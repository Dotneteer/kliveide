// ============================================================================
// Cambridge Z88 keyboard device
// ============================================================================

// ----------------------------------------------------------------------------
// Keyboard variables

// Indicates if there is a key pressed
global bool isKeypressed;

// Indicates the last status of left SHIFT
global bool isLeftShiftDown;

// Indicates the last status of right SHIFT
global bool isRightShiftDown;

// Bitmap for the keys on the keyboard
u8[8] keyboardLines;

// Resets the keyboard
void resetKeyboard() {
  keyboardLines[0] = 0;
  keyboardLines[1] = 0;
  keyboardLines[2] = 0;
  keyboardLines[3] = 0;
  keyboardLines[4] = 0;
  keyboardLines[5] = 0;
  keyboardLines[6] = 0;
  keyboardLines[7] = 0;
}

// Sets the status of the specified key
export void setKeyStatus(u8 keyCode, bool isDown) {
  // --- Ignore invalid key codes
  if (keyCode > 63) {
    return;
  }
  // --- Special shift handling in sleep mode
  if (isInSleepMode) {
    if (keyCode == 63) {
      isRightShiftDown = isDown;
    }
    if (keyCode == 54) {
      isLeftShiftDown = isDown;
    }
  }

  // --- Calculate line address and mask
  local u32 line = keyCode >>> 3;
  local u8 mask = 1 << (keyCode & 0x07);

  if (isDown) {
    // --- Set the key pressed
    keyboardLines[line] |= mask;
  } else {
    // --- Set the key released
    keyboardLines[line] &= ~mask;
  }

  // --- Test if a key is pressed
  local *u64 lineStatusCombined = &keyboardLines;
  isKeypressed = *lineStatusCombined;

  // --- If a key is pressed, we may need an interrupt
  if (isKeypressed) {
    if (INT & INT_KEY) {
      if (!(STA & STA_KEY)) {
        // --- Yes, sign an interrupt
        setSTA(STA | STA_KEY);
      }
    }

    if (INT & INT_KWAIT) {
      awakeCpu();
    }
  }
}

// Gets the status of the specified key
export u32 getKeyStatus(u8 keyCode) {
  // ---Ignore invalid key codes
  if (keyCode > 63) {
    return false;
  }
  return keyboardLines[keyCode >>> 3] & (1 << (keyCode & 0x07));
}

// Gets the byte we would get when querying the I/O address with the
// specified byte as the highest 8 bits of the address line
// $line: The highest 8 bits of the address line
// Returns the status value to be received when querying the I/O
export u32 getKeyLineStatus(u8 line) {
  local u32 status = 0;
  local u32 lineIndex = 0;
  line ^= 0xff;
  while (lineIndex < 8) {
    if (line & 0x01) {
      status |= keyboardLines[lineIndex];
    }
    lineIndex += 1;
    line >>= 1;
  }
  return status ^ 0xff;
}
