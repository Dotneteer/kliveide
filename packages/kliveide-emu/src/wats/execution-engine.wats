// ============================================================================
// Generic Z80 machine execution engine
// ============================================================================

// ----------------------------------------------------------------------------
// Constants

// Emulation modes
const u32 EMU_CONT = 0;  // Continuous
const u32 EMU_HALT = 1;  // Until HALT
const u32 EMU_FRAME = 2; // Until the frame ends
const u32 EMU_TERM = 3;  // Until termination point

// Debug modes
const u32 DEB_NONE = 0;   // No debugging
const u32 DEB_STOPBR = 1; // Stop at breakpoints
const u32 DEB_INTO = 2;   // Step-into mode
const u32 DEB_OVER = 3;   // Step-over mode
const u32 DEB_OUT = 4;    // Step-out mode

// Execution completion reasons
const u32 EXCR_EXEC = 0;  // The machine is still in execution mode
const u32 EXCR_TERM = 1;  // Termination point reached
const u32 EXCR_BREAK = 2; // Breakpoint reached
const u32 EXCR_HALT = 3;  // Halted
const u32 EXCR_FRAME = 4; // Frame completed

// Breakpoint flags
const u32 BR_INSTR = 0x01;     // Instruction breakpoint
const u32 BR_INSTR_M = 0x02;   // Instruction breakpoint with machine address
const u32 BR_ANY_INSTR = BR_INSTR | BR_INSTR_M;
const u32 BR_MEM_RD = 0x04;    // Memory read breakpoint
const u32 BR_MEM_RD_HC = 0x08; // Memory read breakpoint has hit counter
const u32 BR_MEM_RD_CV = 0x10; // Memory read breakpoint has condition value
const u32 BR_MEM_WR = 0x20;    // Memory write breakpoint
const u32 BR_MEM_WR_HC = 0x40; // Memory write breakpoint has hit counter
const u32 BR_MEM_WR_CV = 0x10; // Memory write breakpoint has condition value

// ----------------------------------------------------------------------------
// Execution cycle variables

global i32 interruptCount = 0;

// Number of frames rendered
global u32 frameCount;

// Indicates that a screen frame has just completed
global bool frameCompleted;

// Current emulation mode
global u32 emulationMode;

// The debug step mode to use with the execution cycle
// (only when $emulationMode is Debugger)
global u32 debugStepMode;

// Indicates if fast tape mode is allowed
global bool fastTapeMode;

// The index of the ROM when a termination point is defined
global i8 terminationRom;

// The value of the PC register to reach when a termination point  is defined
global i32 terminationPoint;

// This flag shows that the virtual machine should run in hidden mode
// (no screen, no sound, no delays)
global bool fastVmMode;

// This flag shows whether the virtual machine should render the screen.
// True, renders the screen; false, does not render the screen.
// This flag overrides the fastVmMode setting.
global bool disableScreenRendering;

// The step-over breakpoint
global u32 stepOverBreakpoint;

// The reason the execution cycle completed.
global u32 executionCompletionReason;

// The last rendered frame tact
global u32 lastRenderedFrameTact;


// Describes the execution engine state
type executionEngineStateStruct = struct {
  u32 frameCount,
  bool frameCompleted,
  u32 lastRenderedFrameTact,
  u32 executionCompletionReason
};

// Current state of the execution engine
executionEngineStateStruct executionEngineState;

// Describes the structure of execution options
type execOptions = struct {
  u8 emulationMode,
  u8 debugStepMode,
  bool fastTapeMode,
  i8 terminationRom,
  u16 terminationPoint,
  bool fastVmMode,
  bool disableScreenRendering,
  u32 stepOverBreakpoint
};

// Stores the current execution options
execOptions executionOptions;

// ----------------------------------------------------------------------------
// Memory area used for debugging

// Structure with a memory condition
type memCondition = struct {
  u8 conditionValue,
  u16 hitLimit,
  u16 hitCount
};

// I/O breakpoint descriptor
type ioBpDescriptor = struct {
  u8 flags,
  u16 mask,
  u16 port,
  u8 readConditionValue,
  u16 readHitLimit,
  u16 readHitCount,
  u8 writeConditionValue,
  u16 writeHitLimit,
  u16 writeHitValue
};

// Breakpoints map (64K x 1 byte)
u8[0x1'0000] breakpointsMap;

// Breakpoint partitions map (64K x 2 bytes)
u16[0x1'0000] bpPartitionsMap;

// Memory read breakpoints conditions map (64K x 5 bytes)
memCondition[0x1'0000] memReadConditions;

// Memory write breakpoints conditions map (64K x 5 bytes)
memCondition[0x1'0000] memWriteConditions;

// I/O breakpoints condition map (64K x 1 byte)
u8[0x1'0000] ioIndexMap;

// I/O breakpoints (32 x 15 bytes)
ioBpDescriptor[32] ioBreakpoints;

// ----------------------------------------------------------------------------
// Public execution engine methods

// Copies the execution engine state to the memory
export void getExecutionEngineState() {
  executionEngineState.frameCount = frameCount;
  executionEngineState.frameCompleted = frameCompleted;
  executionEngineState.lastRenderedFrameTact = lastRenderedFrameTact;
  executionEngineState.executionCompletionReason = executionCompletionReason;
}

// Copies the execution options from the memory into the global variables
export void setExecutionOptions() {
  emulationMode = executionOptions.emulationMode;
  debugStepMode = executionOptions.debugStepMode;
  fastTapeMode = executionOptions.fastTapeMode;
  terminationRom = executionOptions.terminationRom;
  terminationPoint = executionOptions.terminationPoint;
  fastVmMode = executionOptions.fastVmMode;
  disableScreenRendering = executionOptions.disableScreenRendering;
  stepOverBreakpoint = executionOptions.stepOverBreakpoint;
}

// The main machine execution cycle
export void executeMachineLoop() {
  local u32 oldClockMultiplier;
 
  // --- Initialize the execution cycle
  executionCompletionReason = EXCR_EXEC;

  // --- We go on while the loop is complete or broken
  do {
    if (frameCompleted) {
      // --- Init a new frame when the previous has completed
      if (allowCpuClockChange()) {
        // --- Use the current clock multiplier
        oldClockMultiplier = clockMultiplier;
        clockMultiplier = defaultClockMultiplier;
      }
      lastRenderedFrameTact = tacts / clockMultiplier;

      // --- Allow a machine to handle frame initialization
      onInitNewFrame(oldClockMultiplier);
    }

    // --- Execute the next CPU cycle
    local u32 currentFrameTact = tacts * clockMultiplier;
    if (cpuSnoozed) {
      // --- Mimic that the time is passing
      tacts += 12;
    } else {
      // --- Carry on with the CPU cycle
      // --- Check if interrupt signal should be raised
      if (shouldRaiseInterrupt(currentFrameTact)) {
        cpuSignalFlags |= SIG_INT;
      } else {
        cpuSignalFlags &= ~SIG_INT;
      }
      beforeCpuCycle(currentFrameTact);
      executeCpuCycle();
      afterCpuCycle(currentFrameTact);
    }

    // --- Test termination conditions
    beforeTerminationCheck(currentFrameTact);
    if (testTerminationPoint()) {
      // --- The machine reached the termination point
      executionCompletionReason = EXCR_TERM;
      return;
    }

    // --- Test debug mode
    if (debugStepMode != DEB_NONE) {
      // --- Check for debug step modes
      if (debugStepMode == DEB_STOPBR) {
        if (testInstructionBreakpoint()) {
          // --- Breakpoint found
          executionCompletionReason = EXCR_BREAK;
          return;
        }
      } else if (debugStepMode == DEB_INTO) {
        // --- We're in step-into mode
        executionCompletionReason = EXCR_BREAK;
        return;
      } else if (debugStepMode == DEB_OVER) {
        if (pc == stepOverBreakpoint) {
          // --- We've just reached a step-over breakpoint
          executionCompletionReason = EXCR_BREAK;
          return;
        }
      } else {
        // --- Step-out mode: Has a return statement executed?
        if (retExecuted) {
          if (stepOutStartDepth == stepOutStackDepth + 1) {
            if (pc == stepOutAddress) {
              executionCompletionReason = EXCR_BREAK;
              return;
            } else {
              // Some invalid code is used, clear the step over stack
              resetStepOverStack();
            }
          }
        }
      }
    }
    
    // --- Test HALT mode
    if (emulationMode == EMU_HALT) {
      if (cpuSignalFlags & SIG_HLT) {
        // --- The CPU is HALTed
        executionCompletionReason = EXCR_HALT;
        return;
      }
    }

    // --- All termination check have completed
    afterTerminationCheck();

    // Test frame completion
    frameCompleted = currentFrameTact >= tactsInFrame;
  } while (!frameCompleted);

  // --- The current frame has just been completed
  onFrameCompleted();

  // --- Adjust tacts
  tacts %= tactsInFrame * clockMultiplier;
  frameCount += 1;

  // --- Done
  executionCompletionReason = EXCR_FRAME;
}

// Tests if the execution reached an instruction breakpoint
bool testInstructionBreakpoint() {
  local u8 flags = breakpointsMap[pc];

  // --- So far, test only for instruction breakpoints
  if (flags & BR_ANY_INSTR) {
    // --- An instruction breakpoint is set
    if (flags & BR_INSTR) {
      // --- CPU address is set
      return true;
    }
    if (flags & BR_INSTR_M) {
      // --- Test for machine breakpoint
      local u16 partition = bpPartitionsMap[pc];
      if (blockLookupTable[pc >> 13].partition == partition) {
        return true;
      }
    }
  }
  return false;
}
