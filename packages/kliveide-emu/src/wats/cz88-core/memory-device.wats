// ============================================================================
// Memory device for Cambridge Z88
// ============================================================================

// ----------------------------------------------------------------------------
// Z88 Memory device terms
// 
// Segments: 4 segments (0-3), each with a 16K size of the addressable 64K 
// of Z80. Determined by A15-A14. Each segment is associated with a slot
// register, SR0, SR1, SR2, or SR3
//   Segment 0: $2000-$3fff --> SR0
//   Segment 1: $4000-$7fff --> SR1
//   Segment 2: $8000-$bfff --> SR2
//   Segment 3: $c000-$ffff --> SR3
// 
// Chip index to select the physical RAM/ROM chip:
//   Chip 0: internal ROM/EPROM, 32K - 512K
//   Chip 1: internal RAM, 32K - 512K
//   Chip 2: card in Slot 1, 32K - 1M
//   Chip 3: card in Slot 2, 32K - 1M
//   Chip 4: card in Slot 3, 32K - 1M: Can be RAM/ROM
//  
// Memory bank: 256 individually addressable memory bank, each with 16K
// Memory banks use 22 bit addresses for 4MB continuous addressable space
//   A21-A14: 8-bit bank index, $00-$ff
//   A13-A0: 14-bit address of the CPU range, offset within a segment
// Memory banks are associated with chips:
//   Chip 0, internal ROM/EPROM: bank $00-$1f
//   Chip 1, internal RAM: bank $20-$3f
//   Chip 2, card in Slot 1: bank $40-$7f
//   Chip 3, card in Slot 2: bank $80-$bf
//   Chip 4, card in Slot 3: bank $c0-$ff
// 
// Chip size masking: determines the size of physical memory of a particular chip.
//   A mask value is 6 bits, and can be used to mask out the lowest 6 bit of 
//   a bank index.
//   For example, if Chip 3 has 32K memory, mask value is $01. When you address
//   bank $40 and bank $42, they result in as if you addressed bank $40, to 
//   represent that the memory contents seem to be repeated for each  32K of 
//   the addressable 1M space. Similarly, $41, $43, $45, ..., $fd, and $ff each
//   repeat the upper 16K of the 32K memory.
// Chip size mask values:
//   $01: 32K
//   $03: 64K
//   $07: 128K
//   $0f: 256K
//   $1f: 512K
//   $3f: 1M
// 
// Addressing logic: 
// 
// Initialization:
//   When the Z88 machine starts up, Each of SR0-SR3 contains $00.
//   Chip size masks are already set.
// Removing/inserting card:
//   TBD
// Setting the value of SR0-SR3:
//   When a byte is written to port $d0-$d3, those values are stored is SR0-SR3,
//   respectively. The emulator prepares a pointer for the address slot 
//   associated with the SR that points to the corresponding 16K segment within
//   the 4MB address range. Later, offsets ($0000-$3fff) should be added to that
//   pointer. (The pointer for address slot 0 contains the pointer for the RAM.
//   When reading or writing memory, SR0 has special behavior.)
// Addresses for SR0 ($0000-$3fff range):
//   SR0 points to a bank. Instead of mapping the entire 16K bank into the 
//   $0000-$3fff range, either the lower or the upper 8K of that particular bank
//   is mapped to the upper 8K ($2000-$3fff) of address slot 0:
//   - Even bank indexes: contents of $0000-$1fff --> address slot 0: $2000-$3fff
//   - Odd bank indexes:  contents of $2000-$3fff --> address slot 0: $2000-$3fff
//   The lower 8K of address slot 0 uses either bank $00 or bank $20:
//   - COM.RAMS register set:   $20
//   - COM.RAMS register reset: $00
// 
// Address page table:
//   Keeps offset values for each 8K virtual memory page for accelerating memory
//   access. Besides, holds a flag that indicates ROM/RAM behavior
//   The table starts at $BLOCK_LOOKUP_TABLE.
// BLOCK_LOOKUP_TABLE entry (for each 8K blocks)
// 0x00: RD_PTR: Read pointer (4 bytes)
// 0x04: WR_PTR: Write pointer (4 bytes)
// 0x08: BL_FLAGS: Flags for the type of memory behind that block
//       0x00: RAM, can be read and written
//       0x01: ROM, read-only
// 0x0a: Partition

// ----------------------------------------------------------------------------
// Z88 constants and variables

// Memory extension registers area, SR0-SR3 (4 bytes)
u8[4] segmentRegs;

// Chip size masks describing the chip size (5 bytes)
// 0: Internal ROM size
// 1: Internal RAM size
// 2: Card Slot 1 size
// 3: Card Slot 2 size
// 4: Card Slot 3 size
// 5: Is Card Slot 3 ROM?
u8[6] chipMasks;

// ROM information for a particular bank
u8[0x100] romInfo;

// Random seed value
global u32 z88RndSeed = 0;

// ----------------------------------------------------------------------------
// Z88 memory routines

// Initial setup of Z88 memory
void resetMemory() {
  setSR0(0);
  setSR1(0);
  setSR2(0);
  setSR3(0);

  // --- 512K internal ROM
  setZ88ChipMask(0, 0x1f);

  // --- 512K internal RAM
  setZ88ChipMask(1, 0x1f);

  // --- No cards in any slot
  setZ88ChipMask(2, 0x1f);
  setZ88ChipMask(3, 0x1f);
  setZ88ChipMask(4, 0x1f);

  // --- Card 3 is RAM
  setZ88Card3Rom(0);
}

// Clears the contents of the memory
export void clearMemory() {
  // --- Fill up the RAM (above 512K) area with zeros
  local u32 counter = 0x07'0000;
  local *u64 ptr = &(vmMemory[0x08'0000]);
  while (counter) {
    *ptr = 0;
    ptr += 1;
    counter -= 1;
  }
}

// Sets SR0 and updates the address page table
void setSR0 (u8 bank) {
  // --- Store SR0 value
  segmentRegs[0] = bank;

  // --- Lower 8K of SR0
  if (COM & COM_RAMS) {
    // --- Bank $20, RAM
    setMemoryBlockEntryWithPartition(0, 0x08'0000, 0x20, false, RAM_BLOCK);
  } else {
    // --- Bank $00, ROM
    setMemoryBlockEntryWithPartition(0, 0x00'0000, 0x00, false, ROM_BLOCK);
  }

  // --- Upper 8K of SR0
  local u32 pageOffset = calculatePageOffset(bank & 0xfe) + (bank & 0x01) * 0x2000;
  setMemoryBlockEntryWithPartition(1, pageOffset, bank, false, romInfo[bank]);
}

// Sets SR1 and updates the address page table
void setSR1 (u8 bank) {
  // --- Store SR1 value
  segmentRegs[1] = bank;
  local u32 pageOffset = calculatePageOffset(bank);
  local u8 romKind = romInfo[bank];

  // --- Offset for 0x4000-0x5fff
  setMemoryBlockEntryWithPartition(2, pageOffset, bank, false, romKind);

  // --- Offset for 0x6000-0x7fff
  setMemoryBlockEntryWithPartition(3, pageOffset + 0x2000, bank, false, romKind);
}

// Sets SR2 and updates the address page table
void setSR2 (u8 bank) {
  // --- Store SR1 value
  segmentRegs[2] = bank;
  local u32 pageOffset = calculatePageOffset(bank);
  local u8 romKind = romInfo[bank];

  // --- Offset for 0x8000-0x9fff
  setMemoryBlockEntryWithPartition(4, pageOffset, bank, false, romKind);

  // --- Offset for 0xa000-0xbfff
  setMemoryBlockEntryWithPartition(5, pageOffset + 0x2000, bank, false, romKind);
}

// Sets SR3 and updates the address page table
void setSR3 (u8 bank) {
  // --- Store SR1 value
  segmentRegs[3] = bank;
  local u32 pageOffset = calculatePageOffset(bank);
  local u8 romKind = romInfo[bank];

  // --- Offset for 0xc000-0xdfff
  setMemoryBlockEntryWithPartition(6, pageOffset, bank, false, romKind);

  // --- Offset for 0xe000-0xffff
  setMemoryBlockEntryWithPartition(7, pageOffset + 0x2000, bank, false, romKind);
}

// Calculates the offset within the 4MB memory for the specified bank
// and chip size mask
inline u32 calculatePageOffset(u8 bank) {
  local u8 sizeMask = chipMasks[bank <= 0x1f ? 0 : 1 + (bank >> 6)];
  return 
    (
      (bank < 0x40 ? bank & 0xe0 : bank & 0xc0) |
      (bank & sizeMask & 0x3f)
    ) << 14;
}

// Gets ROM information for the specified address
inline u8 getRomInfoForAddress(u16 addr) {
  if (addr <= 0x1fff) {
    return romInfo[COM & COM_RAMS ? 0x20 : 0x00];
  }
  return romInfo[segmentRegs[addr >> 14]];
}

// Sets the value of the specified slot mask
export void setZ88ChipMask(u8 chip, u8 mask) {
  // --- Clamp the slot index
  if (chip > 4) {
    chip = 4;
  }

  // --- Store the mask value
  chipMasks[chip] = mask;

  // --- Recalculate all page indexes
  setSR0(segmentRegs[0]);
  setSR1(segmentRegs[1]);
  setSR2(segmentRegs[2]);
  setSR3(segmentRegs[3]);

  // --- Create ROM information
  recalculateRomInfo();
}

// Sets the ROM flag for Card 3
export void setZ88Card3Rom(u8 isRom) {
  chipMasks[5] = isRom;
  recalculateRomInfo();
}

// Recalculates ROM information
void recalculateRomInfo() {
  // --- Calculate ROM information
  local u32 bank = 0;
  while (bank <= 0xff) {
    local u8 romFlags;
    if (bank <= 0x1f) {
      // --- Internal ROM
      romFlags = ROM_BLOCK;
    } else if (bank <= 0x3f) {
      // --- Internal RAM
      romFlags = RAM_BLOCK;
    } else if (bank <= 0x7f) {
      // --- Card Slot 1 RAM
      romFlags = chipMasks[2] ? RAM_BLOCK : UNV_BLOCK;
    } else if (bank <= 0xbf) {
      // --- Card Slot 2 RAM
      romFlags = chipMasks[3] ? RAM_BLOCK : UNV_BLOCK;
    } else {
      // --- Card Slot 3 RAM/EPROM
      romFlags = chipMasks[4] ? chipMasks[5] : UNV_BLOCK;
    }
    romInfo[bank] = romFlags;
    bank += 1;
  }
}

// Sets the random seed value
export void setZ88RndSeed(u32 seed) {
  z88RndSeed = seed ? seed & 0xffff : 0xac23;
}

// Generates a random byte. Used when empty memory is read
inline u8 generateRandomByte() {
  local u32 carry = z88RndSeed & 0x0001;
  z88RndSeed >>= 1;
  z88RndSeed ^= carry ? 0xb4b8 : 0x00b8;
  return z88RndSeed >> 8;
}

// ----------------------------------------------------------------------------
// Test methods

// Use this method to test Z88 address calculation
export u32 testZ88MemoryAddress(u16 addr) {
  local *blockLookup pagePtr = &(blockLookupTable[addr >> 13]);
  return (*pagePtr).readIndex + (addr & 0b0001_1111_1111_1111);
}

// ----------------------------------------------------------------------------
// Core memory handling routines

// Reads the contents of the memory
inline u8 readMemory(u16 addr) {
  local u8 romFlags = getRomInfoForAddress(addr);
  tacts += 3;
  if (romFlags == 0xff) {
    return generateRandomByte();
  }
  local *blockLookup pagePtr = &(blockLookupTable[addr >> 13]);
  return vmMemory[(*pagePtr).readIndex + (addr & 0b0001_1111_1111_1111)];
}

// Writes the contents of the memory
inline void writeMemory(u16 addr, u8 value) {
  local u8 romFlags = getRomInfoForAddress(addr);
  if (romFlags) {
    tacts += 3;
    return;
  }
  local *blockLookup pagePtr = &(blockLookupTable[addr >> 13]);
  if ((*pagePtr).flags) {
    tacts += 3;
    return;
  }
  vmMemory[(*pagePtr).writeIndex + (addr & 0b0001_1111_1111_1111)] = value;
  tacts += 3;
}
