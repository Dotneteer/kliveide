// Indicates that keys were released after the Z88 went to sleep
global bool shiftsReleased;

// Indicates if Z88 is in halt mode
global bool isInSleepMode;

// Z88 allows clock changes any time
bool allowCpuClockChange () {
  return true;
}

// The execution engine starts a new frame
inline void onInitNewFrame(u32 oldClockMultiplier) {
  // Reset beeper frame state for every 8th frame
  if ((frameCount & 0x07) == 0) {
    if (oldClockMultiplier != clockMultiplier) {
      setBeeperSampleRate(audioSampleRate);
    }
    audioSampleCount = 0;
  }
}

// The execution engine is about to execute a CPU cycle
inline void beforeCpuCycle(u32 frameTact) {
  // --- Nothing to do
}

// The execution engine has just executed a CPU cycle
inline void afterCpuCycle(u32 frameTact) {
  // Awake the CPU whenever a key is pressed
  if (isKeypressed) {
    awakeCpu();
  }
}

// The execution engine is before checking loop termination
inline void beforeTerminationCheck(u32 frameTact) {
  // --- Nothing to do
}

// Tests if the execution cycle reached the termination point
inline bool testTerminationPoint() {
  // --- Nothing to do
  return false;
}

// The execution engine is after checking loop termination
void afterTerminationCheck() {
  // --- Is it time to render the next beeper/sound sample?
  if (tacts < audioNextSampleTact) {
    return;
  }

  // --- Current bit of the oscillator
  calculateOscillatorBit();

  // --- Render next beeper sample
  if (COM & COM_SRUN) {
    beeperSamples[audioSampleCount] = 
      (COM & COM_SBIT) ? 0 : oscillatorBit;
  } else {
    beeperSamples[audioSampleCount] = beeperLastEarBit;
  }

  // --- Adjust sample count
  audioSampleCount += 1;  

  // --- Calculate next sample tact
  audioGateValue += audioLowerGate;
  audioNextSampleTact += audioSampleLength;
  if (audioGateValue >= audioUpperGate) {
    audioNextSampleTact += 1;
    audioGateValue -= audioUpperGate;
  }
}

// The execution engine has just completed a frame
void onFrameCompleted() {
  // --- 5ms frame completed, update the real time clock
  incRtcCounter();

  // --- Check again if a key is pressed
  local *u64 lineStatusCombined = &keyboardLines;
  isKeypressed = (*lineStatusCombined);

  // --- Awake the CPU when a key is pressed
  if (isKeypressed) {
    if (INT & INT_KWAIT) {
      awakeCpu();
    }
  }

  // --- Set flash phase
  flashPhase = TIM0 <= 120;

  // --- Set text flash phase
  textFlashCount += 1;
  if (textFlashCount >= textFlashToggleCount) {
    textFlashCount = 0;
    textFlashPhase = !textFlashPhase;
  }

  // --- Refresh the screen for every 8th frame
  if ((frameCount & 0x07) == 0) {
    renderScreen();
  }

  // --- Check id the CPU is HALTed
  if (cpuSignalFlags & SIG_HLT) {
    // --- Check if I is 0x3F
    if (i == 0x3f) {
      isInSleepMode = true;
      if (shiftsReleased) {
        // --- Test if both shift keys are pressed again
        if (((keyboardLines[7] & 0x80) | (keyboardLines[6] & 0x40)) == 0xc0) {
          shiftsReleased = false;
          return;
        }
      } else {
        // --- Test if both shift keys are released
        if (((keyboardLines[7] & 0x80) | (keyboardLines[6] & 0x40)) == 0x00) {
          shiftsReleased = true;
          return;
        }
      }
    } else {
      isInSleepMode = false;
    }
  } else {
    isInSleepMode = false;
  }

  // --- Special shift key handling for sleep mode
  if (isInSleepMode) {
    if (isLeftShiftDown & isRightShiftDown) {
      // --- Sign both shift as pressed
      keyboardLines[7] |= 0x80;
      keyboardLines[6] |= 0x40;
    }
  }

  // --- Prepare for the next beeper sample rate that may overflow to the next frame
  if (audioNextSampleTact > tacts) {
    audioNextSampleTact -= tactsInFrame * clockMultiplier;
  }
}
