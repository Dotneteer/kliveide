// ============================================================================
// Cambridge Z88 real-time clock device
// ============================================================================

// ----------------------------------------------------------------------------
// RTC constants and variables

// TSA flags
const u8 TSTA_MIN = 0x04;  // TSTA: Set if minute interrupt has occurred
const u8 TSTA_SEC = 0x02;  // TSTA: Set if second interrupt has occurred
const u8 TSTA_TICK = 0x01; // TSTA: Set if tick interrupt has occurred

// TMK flags
const u8 TMK_MIN = 0x04;  // TMK: Set to enable minute interrupt
const u8 TMK_SEC = 0x02;  // TMK: Set to enable second interrupt
const u8 TMK_TICK = 0x01; // TMK: Set to enable tick interrupt

// TIM0, 5 millisecond period, counts to 199, Z80 IN Register
global u8 TIM0;

// TIM1, 1 second period, counts to 59, Z80 IN Register
global u8 TIM1;

// TIM2, 1 minutes period, counts to 255, Z80 IN Register
global u8 TIM2;

// TIM3, 256 minutes period, counts to 255, Z80 IN Register
global u8 TIM3;

// TIM4, 64K minutes period, counts to 31, Z80 IN Register
global u8 TIM4;

// TSTA, Timer interrupt status, Z80 IN Read Register
global u8 TSTA;

// TMK, Timer interrupt mask, Z80 OUT Write Register
global u8 TMK;

// Tick event to raise as an interrupt
global u8 tickEvent;

// Resets the Z88 Real-Time Clock
void resetRtc() {
  TIM0 = 0;
  TIM1 = 0;
  TIM2 = 0;
  TIM3 = 0;
  TIM4 = 0;
}

// Increments the Z88 Real-Time Clock (in every 5 ms)
void incRtcCounter() {
  // --- Sign no TICK event
  tickEvent = 0;

  if (COM & COM_RESTIM) {
    // --- Stop Real Time Clock (RESTIM = 1) and reset counters
    resetRtc();
    return;
  }
  
  // --- Increment TIM0
  TIM0 += 1;
  if (TIM0 > 199) {
    // --- When this counter reaches 200, wrap back to 0
    TIM0 = 0;
  } else { 
    if (TIM0 & 0x01) {
      // --- A 10ms TSTA.TICK event as occurred (every 2nd 5ms count)
      tickEvent = TSTA_TICK;
    }

    if (TIM0 == 0x80) {
      // --- According to blink dump monitoring on Z88, when TIM0 reaches 0x80 (bit 7), a second has passed
      TIM1 += 1;
      tickEvent = TMK_SEC;

      if (TIM1 > 59) {
        // --- 60 seconds passed
        TIM1 = 0;

        // --- Increment TIM2
        TIM2 += 1;
        if (TIM2 > 255) {
          // --- 256 minutes has passed
          TIM2 = 0;
          
          // --- Increment TIM3
          TIM3 += 1;
          if (TIM3 > 255) {
            // --- 65535 minutes has passed
            TIM3 = 0;
            
            // --- Increment TIM4
            TIM4 += 1;
            if (TIM4 > 31) {
              // --- 32 * 65535 minutes has passed
              TIM4 = 0;
            }
          }
        }
      }

      if (TIM1 == 32) {
        // --- 1 minute has passed
        tickEvent = TSTA_MIN;
      }
    }
  }

  if (!(INT & INT_GINT)) {
    // --- No interrupts get out of Blink
    return;
  }

  if (STA & STA_FLAPOPEN)   {
    // ---Flap is Open
    // --- (on real hardware, there is no interrupt - in OZvm it's a trick to get 
    // --- LCD switched off properly by the ROM)
    // --- (guarantee there is no STA.TIME event)
    setSTA(STA & 0xfe);
    if (TIM0 % 3 == 0) {
      awakeCpu();
    }
    return;
  }

  if (!(INT & INT_TIME)) {
    // --- INT.TIME is not enabled (no RTC interrupts)
    // --- No interrupt is fired
    setSTA(STA & 0xfe);
    return;
  }

  if (!TMK) {
    // --- No time event (a TMK.TICK, TMK.SEC or TMK.MIN) is enabled (not allowed to happen)
    // --- No interrupt is fired
    setSTA(STA & 0xfe);
    return;
  }

  if (tickEvent) {
    // --- always signal what RTC event happened in Blink
    TSTA = tickEvent;
    if (TMK & tickEvent) {
      // --- only fire the interrupt that TMK is allowing to come out
      setSTA(STA | STA_TIME);
      awakeCpu();
    }
  }
}

// ----------------------------------------------------------------------------
// Test methods

// Emulates a sequence of 5ms ticks
export void testIncZ88Rtc(i32 ticks) {
  while (ticks) {
    TSTA = 0;
    incRtcCounter();
    ticks -= 1;
  }
}

// Sets the RTC registers of Z88
export void testSetRtcRegs(
  i32 tim0,
  i32 tim1,
  i32 tim2,
  i32 tim3,
  i32 tim4
) {
  TIM0 = tim0;
  TIM1 = tim1;
  TIM2 = tim2;
  TIM3 = tim3;
  TIM4 = tim4;
}

// Sets the TMK register of Z88
export void testSetZ88TMK(i32 value) {
  TMK = value;
}
