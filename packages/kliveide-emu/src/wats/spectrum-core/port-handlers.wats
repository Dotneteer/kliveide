// ============================================================================
// I/O handlers for ZX Spectrum 48

// ----------------------------------------------------------------------------
// Port device state

// Last value of bit 3 on port $FE
global bool portBit3LastValue;

// Last value of bit 4 on port $FE
global bool portBit4LastValue;

// Tacts value when last time bit 4 of $fe changed from 0 to 1
global u32 portBit4ChangedFrom0Tacts;

// Tacts value when last time bit 4 of $fe changed from 1 to 0
global u32 portBit4ChangedFrom1Tacts;

// Reads a byte from the specified I/O port
u8 readPort(u16 port) {
  // --- Handle the contention delay
  applyIOContentionDelay(port);

  // --- Handle the 0xfe port
  if (!(port & 0x0001)) {
    local u8 value = readPortFE(port);
    tacts += 4;
    return value;
  }

  // --- Handle the Kempston port
  if (!(port & 0x00e0)) {
    tacts += 4;
    // TODO: Implement Kempston port handling
    return 0xff;
  }
  
  // --- Floating port handling
  // --- Get the rendering table entry of the current ULA tact
  local *renderingTactEntry tactItem = &(renderingTactTable[tacts/clockMultiplier]);

  // --- Check phase
  if (((*tactItem).phase & 0x03) == 0x02) {
    // --- Fetch the attribute value of the current tact
    return vmMemory[memoryScreenOffset + (*tactItem).attrAddress];
  }

  // --- Return the default port value
  tacts += 4;
  return 0xff;
}

// Writes a byte to the specified I/O port
void writePort(u16 port, u8 value) {
  applyIOContentionDelay(port);
  if (!(port & 0x0001)) {
    writePortFE(port, value);
  }
}

// Reads information from the 0xfe port
u8 readPortFE(u16 addr) {
  // --- Scan keyboard line status
  local u32 portValue = getKeyLineStatus(addr >> 8);
  local u32 earBit;
  local u32 bit4Sensed;
  local u32 chargeTime;
  local u32 bit6Value;

  // --- Check for LOAD mode
  if (tapeMode == TM_LOAD) {
    earBit = getTapeEarBit();
    beeperLastEarBit = (earBit << 4);
    portValue = (portValue & 0xbf) | (earBit << 6);
  } else {
    // --- Handle analog EAR bit
    bit4Sensed = portBit4LastValue;
    if (!bit4Sensed) {
      // --- Changed later to 1 from 0 than to 0 from 1?
      chargeTime = portBit4ChangedFrom1Tacts - portBit4ChangedFrom0Tacts;
      if (chargeTime > 0) {
        // --- Yes, calculate charge time
        chargeTime = chargeTime > 700 ? 2800 : 4 * chargeTime;

        // --- Calculate time ellapsed since last change from 1 to 0
        bit4Sensed = (tacts - portBit4ChangedFrom1Tacts < chargeTime) << 4;
      }
    }

    // --- Calculate bit 6 value
    bit6Value = portBit3LastValue 
      ? 0x40
      : bit4Sensed
        ? 0x40
        : 0x00;

    // --- Check for ULA 3
    if (ulaIssue == 3) {
      if (portBit3LastValue) {
        if (!bit4Sensed) {
          bit6Value = 0;
        }
      }
    }

    // --- Merge bit 6 with port value
    portValue = (portValue & 0xbf) | bit6Value;
  }
  return portValue;
}

// Writes information to the 0xfe port
void writePortFE(u16 addr, u8 v) {
  //   (local $bit4 i32)

  // --- Extract border color
  borderColor = v & 0x07;

  // --- Let's store the last EAR bit
  local u32 bit4 = v & 0x10;
  beeperLastEarBit = bit4;

  // --- Set the last value of bit3
  portBit3LastValue = v & 0x08;

  // --- Have the tape device process the MIC bit
  processMicBit(portBit3LastValue);

  // --- Manage bit 4 value
  if (portBit4LastValue) {
    // --- Bit 4 was 1, is it now 0?
    if (!bit4) {
      portBit4ChangedFrom1Tacts = tacts;
      portBit4LastValue = 0;
    }
  } else {
    // --- Bit 4 was 0, is it now 1?
    if (bit4) {
      portBit4ChangedFrom0Tacts = tacts;
      portBit4LastValue = 0x10;
    }
  }
}

// ----------------------------------------------------------------------------
// Helper routines

// Applies I/O contention wait
// addr: port address
void applyIOContentionDelay(u16 addr) {
  // Calculate the low bit value
  local bool lowbit = addr & 0x0001;

  // Check for contended range
  if (addr & 0xc000 == 0x4000) {
    if (lowbit) {
      // Low bit set, C:1, C:1, C:1, C:1 
      applyContentionDelay();
      tacts += 1;
      applyContentionDelay();
      tacts += 1;
      applyContentionDelay();
      tacts += 1;
      applyContentionDelay();
      tacts += 1;
    } else {
      // Low bit reset, C:1, C:3
      applyContentionDelay();
      tacts += 1;
      applyContentionDelay();
      tacts += 3;
    }
  } else {
    if (lowbit) {
      // Low bit set, N:4
      tacts += 4;
    } else {
      // Low bit reset, C:1, C:3
      applyContentionDelay();
      tacts += 1;
      applyContentionDelay();
      tacts += 3;
    }
  }
}