// ============================================================================
// Memory device for ZX Spectrum 48/128
// ============================================================================

// The selected ROM page
global u8 memorySelectedRom;

// Is memory pagin enabled?
global bool memoryPagingEnabled;

// The selected memory bank
global u8 memorySelectedBank;

// Shadow screen is to be used?
global bool memoryUseShadowScreen;

// The WA memory offset where the screen memory starts
global u32 memoryScreenOffset;

// Number of ROMs
global u8 numberOfRoms;

// Number of RAM banks
global u8 ramBanks;

// ----------------------------------------------------------------------------
// Public device routines

// Sets an entry in the BLOCK_LOOKUP_TABLE
// block: Block index
// bankOffset: Offset in the 16MB virtual memory
// contended: Is that block contended?
// readonly: Is that block read-only?
export void setMemoryBlockEntry(
  u32 block, 
  u32 bankOffset, 
  bool contended, 
  bool readonly) {

  local *blockLookup ptr = &(blockLookupTable[block & 0x07]);
  (*ptr).readIndex = bankOffset;
  (*ptr).writeIndex = bankOffset;
  (*ptr).flags = readonly;
  (*ptr).contended = contended;
}

// Memory read contention delay
inline void contendRead(u16 addr) {
  if (blockLookupTable[(addr & 0xe000) >> 9].contended) {
    local u32 delay = contentionTable[tacts/clockMultiplier];
    tacts += delay;
    contentionAccumulated += delay;
  }
}

// Memory write contention delay
inline void contendWrite(u16 addr) {
  if (blockLookupTable[(addr & 0xe000) >> 9].contended) {
    local u32 delay = contentionTable[tacts/clockMultiplier];
    tacts += delay;
    contentionAccumulated += delay;
  }
}

