// ============================================================================
// Tape device for ZX Spectrum 48/128
// ============================================================================

// ----------------------------------------------------------------------------
// Tape constants

// Pilot pulse length
const u64 PILOT_PULSE = 2168;

// Pilot pulses in the header blcok
const u64 HEADER_PILOT_COUNT = 8063;

// Pilot pulses in the data block
const u64 DATA_PILOT_COUNT = 3223;

// Sync 1 pulse length
const u64 SYNC_1_PULSE = 667;

// Sync 2 pulse length
const u64 SYNC_2_PULSE = 735;

// Bit 0 pulse length
const u64 BIT_0_PULSE = 855;

// Bit 1 pulse length
const u64 BIT_1_PULSE = 1710;

// Terminating sync pulse length
const u64 TERM_SYNC = 947;

// Too long pause while saving
const u64 TOO_LONG_PAUSE = 10'500'000;

// Tape modes
const u32 TM_PASSIVE = 0;
const u32 TM_LOAD = 1;
const u32 TM_SAVE = 2;

// The playing phase of the current block
const u32 PP_NONE = 0;
const u32 PP_PILOT = 1;
const u32 PP_SYNC = 2;
const u32 PP_DATA = 3;
const u32 PP_TERM = 4;
const u32 PP_PAUSE = 5;
const u32 PP_COMPLETED = 6;

// The current SAVE phase
const u32 SP_NONE = 0;
const u32 SP_PILOT = 1;
const u32 SP_SYNC1 = 2;
const u32 SP_SYNC2 = 3;
const u32 SP_DATA = 4;
const u32 SP_ERROR = 5;

// ----------------------------------------------------------------------------
// Tape device state

global u32 tapeMode;

// The address of the Load Bytes routine in the ZX Spectrum 48 ROM
global u16 tapeLoadBytesRoutine;

// The address of the Load Bytes Resume routine in the ZX Spectrum 48 ROM
global u16 tapeLoadBytesResume;

// The address of the Load Bytes Invalid Header routine in the ZX Spectrum 48 ROM
global u16 tapeLoadBytesInvalidHeader;

// The address of the Save Bytes routine in the ZX Spectrum 48 ROM
global u16 tapeSaveBytesRoutine;

// The number of tape blocks to play
global u16 tapeBlocksToPlay;

// Is the entire tape played back?
global bool tapeEof;

// The current byte in the tape data buffer
*u8 tapeBufferPtr;

// The address of the next block to play
*u8 $tapeNextBlockPtr;

// The playing phase of the current block
global u32 tapePlayPhase;

// The start tact of the current block
global u64 $tapeStartTact;

// End tact of the current pilot
global u64 tapePilotEndPos;

// End tact of the current sync 1 pulse
global u64 tapeSync1EndPos;

// End tact of the current sync 2 pulse
global u64 tapeSync2EndPos;

// Start tact of the current bit
global u64 tapeBitStartPos;

// Start tact of the current bit
global u64 tapeBitPulseLen;

// Current tape bit mask
global u32 tapeBitMask;

// Fast load?
global bool tapeFastLoad;

// Tape termination position
global u64 tapeTermEndPos;

// Tape pause position
global u64 tapePauseEndPos;

// Last MIC bit activity tact
global u64 tapeLastMicBitTact;

// Last MIC bit state
global u32 tapeLastMicBit;

// The current SAVE phase
global u32 tapeSavePhase;

// Number of pilot pulses
global u32 tapePilotPulseCount;

// Number of saved data blocks
global u32 tapeDataBlockCount;

// Previous data pulse received
global u32 tapePrevDataPulse;

// Lenght of the data saved so far
global u32 tapeSaveDataLen;

// Offset of the bit being saved
global u32 tapeBitOffs;

// Data byte being saved
global u32 tapeDataByte;

// ==========================================================================
// Tape device routines

// Sets the value of the fast load flag
export void setFastLoad(u32 mode) {
  tapeFastLoad = mode;
}

// Checks if tape device hook should be applied
void checkTapeHooks() {
  if (tapeMode == TM_PASSIVE) {
    // --- PASSIVE mode, check for load and save routines
    if (pc == tapeLoadBytesRoutine) {
      // --- Turn on LOAD mode
      tapeMode = TM_LOAD;
      nextTapeBlock();
      if (tapeFastLoad) {
        fastLoad();
        tapeMode = TM_PASSIVE;
      }
      return;
    }

    if (pc == tapeSaveBytesRoutine) {
      // --- Turn on SAVE mode
      tapeMode = TM_SAVE;
      tapeLastMicBitTact = getCurrentTactAsI64();
      tapeLastMicBit = 0x08;
      tapeSavePhase = SP_NONE;
      tapePilotPulseCount = 0;
      tapeDataBlockCount = 0;
      tapePrevDataPulse = 0;
      tapeSaveDataLen = 0;
    }
    return;
  }

  if (tapeMode == TM_LOAD) {
    // --- Tape EOF?
    if (tapeEof) {
      tapeMode = TM_PASSIVE;
      return;
    }

    // --- Tape Error?
    if (pc == 0x0008) {
      tapeMode = TM_PASSIVE;
    }
    return
  }

  // --- SAVE Mode. Error or too long pause?
  if (pc == 0x0008 | (getCurrentTactAsI64() - tapeLastMicBitTact) > TOO_LONG_PAUSE) {
    // --- Leave the SAVE mode
    tapeMode = TM_PASSIVE;
    saveModeLeft(tapeSaveDataLen);
  }
}

// Move to the next block to play
void nextTapeBlock() {
  // TODO: Implement this method
}

// Fast load of the tape contents
void fastLoad() {
  // TODO: Implement this method
}

// Calculates an u64 value from the current tact
inline u64 getCurrentTactAsI64() {
  return u64(frameCount) * tactsInFrame * clockMultiplier + tacts;
}
