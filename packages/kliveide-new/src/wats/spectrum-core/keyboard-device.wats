// ============================================================================
// ZX Spectrum keyboard device
// ============================================================================

// ----------------------------------------------------------------------------
// Keyboard variables

// Bitmap for the keys on the keyboard
u8[8] keyboardLines;

// ----------------------------------------------------------------------------
// Public device mehtods

// Sets the status of the specified key
export void setKeyStatus (u8 keyCode, bool isDown) {
  // ---Ignore invalid key codes
  if (keyCode > 39) {
    return;
  }

  // --- Calculate line address and mask
  local u32 line = keyCode / 5;
  local u8 mask = 1 << (keyCode % 5);

  if (isDown) {
    // --- Set the key pressed
    keyboardLines[line] |= mask;
  } else {
    // --- Set the key released
    keyboardLines[line] &= ~mask;
  }
}

// Gets the status of the specified key
export u32 getKeyStatus(u8 keyCode) {
  // ---Ignore invalid key codes
  if (keyCode > 39) {
    return false;
  }
  return keyboardLines[keyCode / 5] & (1 << (keyCode % 5));
}

// Gets the byte we would get when querying the I/O address with the
// specified byte as the highest 8 bits of the address line
// $line: The highest 8 bits of the address line
// Returns the status value to be received when querying the I/O
export u32 getKeyLineStatus(u8 line) {
  local u32 status = 0;
  status |= keyboardLines[0];
  status |= keyboardLines[1];
  status |= keyboardLines[2];
  status |= keyboardLines[3];
  status |= keyboardLines[4];
  status |= keyboardLines[5];
  status |= keyboardLines[6];
  status |= keyboardLines[7];
  return status ^ 0xff;
}

// Gets the current cursor mode
export u32 getCursorMode() {
  // Get the value of the MODE ZX Spectrum system variable
  return readMemoryNoContention(0x5c41);
}
