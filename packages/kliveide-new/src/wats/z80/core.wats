// ============================================================================
// WAT# Z80 CPU Core
// ============================================================================

#include "memory.wats"
#include "standard-ops.wats"

// ----------------------------------------------------------------------------
// Z80 CPU state

// Primary registers
u8 f;
u8 a;
u16 af {f};
u8 c;
u8 b;
u16 bc {c};
u8 e;
u8 d;
u16 de {e};
u8 l;
u8 h;
u16 hl {l};

// Alternate registers
global u16 af_;
global u16 bc_;
global u16 de_;
global u16 hl_;

// PC & SP
global u16 pc;
global u16 sp;

// Additional registers
global u8 i;
global u8 r;
u8 xl;
u8 xh;
u16 ix {xl};
u8 yl;
u8 yh;
u16 iy {yl};
u8 wl;
u8 wh;
u16 wz {wl};

// Number of tacts within one screen rendering frame. This value indicates the
// number of clock cycles with normal CPU speed.
global u32 tactsInFrame;

// CPU tacts since starting the last screen rendering frame. So this variable is reset
// at the beginning of each screen rendering frame.
global u32 tacts;

// Various Z80 state flags
global u32 cpuSignalFlags;
const u32 SIG_NON = 0x00;
const u32 SIG_INT = 0x01;
const u32 SIG_NMI = 0x02;
const u32 SIG_RST = 0x04;
const u32 SIG_HLT = 0x08;
const u32 SIG_INT_MASK = 0xfe;
const u32 SIG_HLT_MASK = 0xf7;

// ----------------------------------------------------------------------------
// Register access

// T-States helpers
inline void incTacts(u32 inc) { tacts += inc; }

export void show() {
  LdBC();
  standardOps()[12];
}