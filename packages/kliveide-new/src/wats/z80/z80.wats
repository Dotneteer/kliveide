// ============================================================================
// WAT# Z80 CPU Core
// ============================================================================

// ----------------------------------------------------------------------------
// Memory handling for the generic Z80 machine

// 16 MB memory reserved for virtual machines
// memory address is ensured to be 0;
u8[16 * 1024 * 1024] vmMemory;

// Lookup structure for a 8K memory page
type blockLookup = struct {
  u32 readIndex,
  u32 writeIndex,
  u8 flags,
  u8[7] reserved
};

// Block flag types
const u8 RAM_BLOCK = 0x00;
const u8 ROM_BLOCK = 0x01;
const u8 UNV_BLOCK = 0xff;

// Memory page lookup table for 64K memory addressing
blockLookup[8] blockLookupTable;

// ----------------------------------------------------------------------------
// Z80 CPU state

// Primary registers
u8 f;
u8 a;
u16 af {f};
u8 c;
u8 b;
u16 bc {c};
u8 e;
u8 d;
u16 de {e};
u8 l;
u8 h;
u16 hl {l};

// Alternate registers
u16 af_;
u16 bc_;
u16 de_;
u16 hl_;

// PC & SP
u16 pc;
u16 sp;

// Additional registers
u8 i;
u8 r;
u8 xl;
u8 xh;
u16 ix {xl};
u8 yl;
u8 yh;
u16 iy {yl};
u8 wl;
u8 wh;
u16 wz {wl};

// buffer for retriving CPU state
cpuStateStruct cpuStateBuffer;

// Number of tacts within one screen rendering frame. This value indicates the
// number of clock cycles with normal CPU speed.
global u32 tactsInFrame;

// CPU tacts since starting the last screen rendering frame. So this variable is reset
// at the beginning of each screen rendering frame.
global u32 tacts;

// Interrupt flip-flop #1
global bool iff1;

// Interrupt flip-flop #2
global bool iff2;

// Current interrupt mode
global u8 interruptMode;

// The last opCode read
global u8 opCode;

// Depth of consequtive DD/FD prefixes
global u32 ddfdDepth;

// Shows that IX is to be used when executing an indexed operation
global bool useIx;

// Various Z80 state flags
global u32 cpuSignalFlags;
const u32 SIG_NON = 0x00;
const u32 SIG_INT = 0x01;
const u32 SIG_NMI = 0x02;
const u32 SIG_RST = 0x04;
const u32 SIG_HLT = 0x08;
const u32 SIG_INT_MASK = 0xfe;
const u32 SIG_HLT_MASK = 0xf7;

// Is the CPU snoozed?
global bool cpuSnoozed;

// The Program Counter value of the last signalled event
global i32 lastSignalAddress;

// ----------------------------------------------------------------------------
// Z80 flag constants
const i32 FLAG_S = 0x80;
const i32 FLAG_Z = 0x40;
const i32 FLAG_5 = 0x20;
const i32 FLAG_H = 0x10;
const i32 FLAG_3 = 0x08;
const i32 FLAG_PV = 0x04;
const i32 FLAG_N = 0x02;
const i32 FLAG_C = 0x01;
const i32 FLAG_53 = FLAG_3 | FLAG_5;
const i32 FLAG_SZP = FLAG_S | FLAG_Z | FLAG_PV;
const i32 FLAG_53C = FLAG_53 | FLAG_C;

// ----------------------------------------------------------------------------
// Memory buffer for CPU state

type cpuStateStruct = struct {
  u32 tactsInFrame,
  u32 tacts,
  bool iff1,
  bool iff2,
  u8 interruptMode,
  u8 opCode,
  u32 ddfdDepth,
  bool useIx,
  u32 cpuSignalFlags,
  bool cpuSnoozed,
  i32 lastSignalAddress
};

// ----------------------------------------------------------------------------
// Public Z80 core methods

// Puts the global variables that represent CPU state into a transfer buffer
export void getCpuState() {
  cpuStateBuffer.tactsInFrame = tactsInFrame;
  cpuStateBuffer.tacts = tacts;
  cpuStateBuffer.iff1 = iff1;
  cpuStateBuffer.iff2 = iff2;
  cpuStateBuffer.interruptMode = interruptMode;
  cpuStateBuffer.opCode = opCode;
  cpuStateBuffer.ddfdDepth = ddfdDepth;
  cpuStateBuffer.useIx = useIx;
  cpuStateBuffer.cpuSignalFlags = cpuSignalFlags;
  cpuStateBuffer.cpuSnoozed = cpuSnoozed;
  cpuStateBuffer.lastSignalAddress = lastSignalAddress;
}

// Updates the CPU state according to the state transfer buffer
export void updateCpuState() {
  tactsInFrame = cpuStateBuffer.tactsInFrame;
  tacts = cpuStateBuffer.tacts;
  iff1 = cpuStateBuffer.iff1;
  iff2 = cpuStateBuffer.iff2;
  interruptMode = cpuStateBuffer.interruptMode;
  opCode = cpuStateBuffer.opCode;
  ddfdDepth = cpuStateBuffer.ddfdDepth;
  useIx = cpuStateBuffer.useIx;
  cpuSignalFlags = cpuStateBuffer.cpuSignalFlags;
  cpuSnoozed = cpuStateBuffer.cpuSnoozed;
  lastSignalAddress = cpuStateBuffer.lastSignalAddress;
}

// Turn on the CPU
export void turnOnCpu() {
  resetCpu(true);
  tacts = 0;
  cpuSignalFlags = SIG_NON;
  cpuSnoozed = false;
}

// Resets the CPU
// hard: Is it hard reset?
export void resetCpu(bool hard) {
  af = 0xffff;
  af_ = 0xffff;
  i = 0;
  r = 0;
  pc = 0x0000;
  sp = 0xffff;
  iff1 = false;
  iff2 = false;
  interruptMode = 0;
  if (hard) {
    bc = 0;
    de = 0;
    hl = 0;
    bc_ = 0;
    de_ = 0;
    hl_ = 0;
    ix = 0;
    iy = 0;
    wz = 0;
  }
}

// Sets the Program Counter
export void setPC(u16 value) {
  pc = value;
}

// Sets the Stack Pointer
export void setSP(u16 value) {
  sp = value;
}

// Sets the CPU state to snoozed
export void snoozeCpu() {
  cpuSnoozed = true;
}

// Awakes the CPU
export void awakeCpu() {
  cpuSnoozed = false;
}

// ----------------------------------------------------------------------------
// Execution cycle

// Executes a single instruction cycle
export void executeCpuCycle() {
  // --- Just started to process instructions
  ddfdDepth = 0;

  // --- Read the opCode from PC and refresh memory
  opCode = readMemory(pc);
  pc += 1;
  r += 1;
  tacts += 1;

  // --- Execute the operation
  standardOps()[opCode];

  if (!cpuSignalFlags) {
    // No signals, this execution cycle is complete.
    return;
  }

  // Handle NMI, as it has priority over INT
  if (cpuSignalFlags & SIG_NMI) {
    executeNmi();
    return;
  }

  // Handle INT
  if (cpuSignalFlags & SIG_INT) {
    executeInt();
    return;
  }

  // Handle HLT
  if (cpuSignalFlags & SIG_HLT_MASK) {
    executeHalt();
    return;
  }

  // Handle reset
  if (cpuSignalFlags & SIG_RST) {
    resetCpu(false);
  }
}

// Responds to the INT signal
void executeInt() {
}

// Responds to the NMI signal
void executeNmi() {
}

// Responds to the HLT signal
void executeHalt() {
  
}

// ----------------------------------------------------------------------------
// Helpers

// Increments the current T-State value
inline void incTacts(u32 inc) { tacts += inc; }

// Pushes a 16-bit value to the stack
inline void push16(u32 v) {
  v = u16(v);
  sp -= 1;
  writeMemory(sp, v & 0xff);
  sp -= 1;
  writeMemory(sp, v >> 8);
}

#include "aluhelpers.wats"
#include "standard-ops.wats"
#include "indexed-ops.wats"

