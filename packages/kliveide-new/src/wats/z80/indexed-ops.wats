// ============================================================================
// Z80 Indexed operations
// ============================================================================

table void indexedOps() {
  Nop,      LdBCnn,   LdBCiA,   IncBC,    IncB,     DecB,     LdBn,     Rlca,      // 00-07
  ExAF,     AddIXBC,  LdABCi,   DecBC,    IncC,     DecC,     LdCn,     Rrca,      // 08-0f
  Djnz,     LdDEnn,   LdDEiA,   IncDE,    IncD,     DecD,     LdDn,     Rla,       // 10-17
  Jr,       AddIXDE,  LdADEi,   DecDE,    IncE,     DecE,     LdEn,     Rra,       // 18-1f
  JrNz,     LdIXnn,   LdNNiIX,  IncIX,    IncXH,    DecXH,    LdXHn,    Daa,       // 20-27
  JrZ,      AddIXIX,  LdIXNNi,  DecIX,    IncXL,    DecXL,    LdXLn,    Cpl,       // 28-2f
  JrNc,     LdSPnn,   LdNNiA,   IncSP,    IncIXi,   DecIXi,   LdIXin,   Scf,       // 30-37
  JrC,      AddIXSP,  LdANNi,   DecSP,    IncA,     DecA,     LdAn,     Ccf,       // 38-3f

  Nop,      LdBC,     LdBD,     LdBE,     LdBXH,    LdBXL,    LdBIXi,   LdBA,      // 40-47
  LdCB,     Nop,      LdCD,     LdCE,     LdCXH,    LdCXL,    LdCIXi,   LdCA,      // 48-4f
  LdDB,     LdDC,     Nop,      LdDE,     LdDXH,    LdDXL,    LdDIXi,   LdDA,      // 50-57
  LdEB,     LdEC,     LdED,     Nop,      LdEXH,    LdEXL,    LdEIXi,   LdEA,      // 58-5f
  LdXHB,    LdXHC,    LdXHD,    LdXHE,    Nop,      LdXHXL,   LdHIXi,   LdXHA,     // 60-67
  LdXLB,    LdXLC,    LdXLD,    LdXLE,    LdXLXH,   Nop,      LdLIXi,   LdXLA,     // 68-6f
  LdIXiB,   LdIXiC,   LdIXiD,   LdIXiE,   LdIXiH,   LdIXiL,   Halt,     LdIXiA,    // 70-77
  LdAB,     LdAC,     LdAD,     LdAE,     LdAXH,    LdAXL,    LdAIXi,   Nop,       // 78-7f

  AddB,     AddC,     AddD,     AddE,     AddXH,    AddXL,    AddIXi,   AddA,      // 80-87
  AdcB,     AdcC,     AdcD,     AdcE,     AdcXH,    AdcXL,    AdcIXi,   AdcA,      // 88-8f
  SubB,     SubC,     SubD,     SubE,     SubXH,    SubXL,    SubIXi,   SubA,      // 90-97
  SbcB,     SbcC,     SbcD,     SbcE,     SbcXH,    SbcXL,    SbcIXi,   SbcA,      // 98-9f
  AndB,     AndC,     AndD,     AndE,     AndXH,    AndXL,    AndIXi,   AndA,      // a0-a7
  XorB,     XorC,     XorD,     XorE,     XorXH,    XorXL,    XorIXi,   XorA,      // a8-af
  OrB,      OrC,      OrD,      OrE,      OrXH,     OrXL,     OrIXi,    OrA,       // b0-b7
  CpB,      CpC,      CpD,      CpE,      CpXH,     CpXL,     CpIXi,    CpA,       // b8-bf

  RetNz,    PopBC,    JpNz,     Jp,       CallNz,   PushBC,   AddN,     Rst00,     // c0-c7
  RetZ,     Ret,      JpZ,      IXCB,     CallZ,    Call,     AdcN,     Rst08,     // c8-cf
  RetNc,    PopDE,    JpNc,     OutNA,    CallNc,   PushDE,   SubN,     Rst10,     // d0-d7
  RetC,     Exx,      JpC,      InAN,     CallC,    DDPref,   SbcN,     Rst18,     // d8-df
  RetPo,    PopIX,    JpPo,     ExSPiIX,  CallPo,   PushIX,   AndN,     Rst20,     // e0-e7
  RetPe,    JpIX,     JpPe,     ExDEHL,   CallPe,   Nop,      XorN,     Rst28,     // e8-ef
  RetP,     PopAF,    JpP,      Di,       CallP,    PushAF,   OrN,      Rst30,     // f0-f7
  RetM,     LdSPIX,   JpM,      Nop,      CallM,    FDPref,   CpN,      Rst38      // f8-ff
};

// add ix,bc (0x09)
void AddIXBC() {
  setXY(add16(getXY(), bc));
  tacts += 7;
}

// add ix,de (0x19)
void AddIXDE() {
  setXY(add16(getXY(), de));
  tacts += 7;
}

// ld ix,nn (0x21)
void LdIXnn() {
  setXYL(readMemory(pc));
  pc += 1;
  setXYH(readMemory(pc));
  pc += 1;
}

// ld (nn),ix (0x22)
void LdNNiIX() {
  store16(getXYL(), getXYH());
}

// inc ix (0x23)
void IncIX() {
  setXY(getXY() + 1);
  tacts += 2;
}

// inc xh (0x24)
void IncXH() {
  local u8 idxReg = getXYH();
  adjustIncFlags(idxReg);
  setXYH(idxReg + 1);
}

// dec xh (0x25)
void DecXH() {
  local u8 idxReg = getXYH();
  adjustDecFlags(idxReg);
  setXYH(idxReg - 1);
}

// ld xh,n (0x26)
void LdXHn() {
  setXYH(readMemory(pc));
  pc += 1;
}

// add ix,ix (0x29)
void AddIXIX() {
  local u16 idxReg = getXY();
  setXY(add16(idxReg, idxReg));
  tacts += 7;
}

// ld IX,(nn) (0x2a)
void LdIXNNi() {
  local u32 tmp = readMemory(pc);
  pc += 1;
  tmp += readMemory(pc) << 8;
  pc += 1;
  setXYL(readMemory(tmp));
  tmp += 1;
  wz = tmp;
  setXYH(readMemory(tmp));
}

// dec IX (0x2b)
void DecIX() {
  setXY(getXY() - 1);
  tacts += 2;
}

// inc xl (0x2c)
void IncXL() {
  local u8 idxReg = getXYL();
  adjustIncFlags(idxReg);
  setXYL(idxReg + 1);
}

// dec l (0x2d)
void DecXL() {
  local u8 idxReg = getXYL();
  adjustDecFlags(idxReg);
  setXYL(idxReg - 1);
}

// ld l,n (0x2e)
void LdXLn() {
  setXYL(readMemory(pc));
  pc += 1;
}

// inc (ix+D) (0x34)
void IncIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  local u32 tmp = readMemory(wz);
  tacts += 1;
  adjustIncFlags(tmp);
  writeMemory(wz, tmp + 1);
}

// dec (ix+D) (0x35)
void DecIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  local u32 tmp = readMemory(wz);
  tacts += 1;
  adjustDecFlags(tmp);
  writeMemory(wz, tmp - 1);
}

// ld (ix+D),n (0x36)
void LdIXin() {
  local i8 dist = readMemory(pc);
  pc += 1;
  wz = getXY() + dist;
  local u8 value = readMemory(pc);
  pc += 1;
  tacts += 2;
  writeMemory(wz, value);
}

// add ix,sp (0x39)
void AddIXSP() {
  setXY(add16(getXY(), sp));
  tacts += 7;
}

// ld b,xh (0x44)
void LdBXH() { b = getXYH(); }

// ld b,xl (0x45)
void LdBXL() { b = getXYL(); }

// ld b,(ix+D) (0x46)
void LdBIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  b = readMemory(wz);
}

// ld c,xh (0x4c)
void LdCXH() { c = getXYH(); }

// ld c,xl (0x4d)
void LdCXL() { c = getXYL(); }

// ld c,(ix+D) (0x4e)
void LdCIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  c = readMemory(wz);
}

// ld d,xh (0x54)
void LdDXH() { d = getXYH(); }

// ld d,xl (0x55)
void LdDXL() { d = getXYL(); }

// ld d,(ix+D) (0x56)
void LdDIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  d = readMemory(wz);
}

// ld e,xh (0x5c)
void LdEXH() { e = getXYH(); }

// ld e,xl (0x5d)
void LdEXL() { e = getXYL(); }

// ld e,(ix+D) (0x5e)
void LdEIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  e = readMemory(wz);
}

// ld xh,b (0x60)
void LdXHB() { setXYH(b); }

// ld xh,c (0x61)
void LdXHC() { setXYH(c); }

// ld xh,d (0x62)
void LdXHD() { setXYH(d); }

// ld xh,e (0x63)
void LdXHE() { setXYH(e); }

// ld xh,xl (0x65)
void LdXHXL() { setXYH(getXYL()); }

// ld h,(ix+D) (0x66)
void LdHIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  h = readMemory(wz);
}

// ld xh,a (0x67)
void LdXHA() { setXYH(a); }

// ld xl,b (0x68)
void LdXLB() { setXYL(b); }

// ld xl,c (0x69)
void LdXLC() { setXYL(c); }

// ld xl,d (0x6a)
void LdXLD() { setXYL(d); }

// ld xl,e (0x6b)
void LdXLE() { setXYL(e); }

// ld xl,xh (0x6c)
void LdXLXH() { setXYL(getXYH()); }

// ld l,(ix+D) (0x6e)
void LdLIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  l = readMemory(wz);
}

// ld xl,a (0x6f)
void LdXLA() { setXYL(a); }

// ld (ix+D),b (0x70)
void LdIXiB() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  writeMemory(wz, b);
}

// ld (ix+D),c (0x71)
void LdIXiC() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  writeMemory(wz, c);
}

// ld (ix+D),d (0x72)
void LdIXiD() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  writeMemory(wz, d);
}

// ld (ix+D),e (0x73)
void LdIXiE() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  writeMemory(wz, e);
}

// ld (ix+D),h (0x74)
void LdIXiH() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  writeMemory(wz, h);
}

// ld (ix+D),l (0x75)
void LdIXiL() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  writeMemory(wz, l);
}

// ld (ix+D),a (0x77)
void LdIXiA() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  writeMemory(wz, a);
}

// ld a,xh (0x7c)
void LdAXH() { a = getXYH(); }

// ld a,xh (0x7d)
void LdAXL() { a = getXYL(); }

// ld a,(ix+D) (0x7e)
void LdAIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  a = readMemory(wz);
}

// add a,xh (0x84)
void AddXH() {
  add8(getXYH());
}

// add a,xl (0x85)
void AddXL() {
  add8(getXYL());
}

// add a,(ix+D) (0x7e)
void AddIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  add8(readMemory(wz));
}

// adc a,xh (0x8c)
void AdcXH() {
  adc8(getXYH());
}

// adc a,xl (0x8d)
void AdcXL() {
  adc8(getXYL());
}

// adc a,(ix+D) (0x8e)
void AdcIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  adc8(readMemory(wz));
}

// sub a,xh (0x94)
void SubXH() {
  sub8(getXYH());
}

// sub a,xl (0x95)
void SubXL() {
  sub8(getXYL());
}

// sub a,(ix+D) (0x96)
void SubIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  sub8(readMemory(wz));
}

// sbc a,xh (0x9c)
void SbcXH() {
  sbc8(getXYH());
}

// sbc a,xl (0x9d)
void SbcXL() {
  sbc8(getXYL());
}

// sbc a,(ix+D) (0x9e)
void SbcIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  sbc8(readMemory(wz));
}

// and a,xh (0xa4)
void AndXH() {
  and8(getXYH());
}

// and a,xl (0xa5)
void AndXL() {
  and8(getXYL());
}

// and a,(ix+D) (0xa6)
void AndIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  and8(readMemory(wz));
}

// xor a,xh (0xac)
void XorXH() {
  xor8(getXYH());
}

// xor a,xl (0xad)
void XorXL() {
  xor8(getXYL());
}

// xor a,(ix+D) (0xae)
void XorIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  xor8(readMemory(wz));
}

// or a,xh (0xb4)
void OrXH() {
  or8(getXYH());
}

// or a,xl (0xb5)
void OrXL() {
  or8(getXYL());
}

// or a,(ix+D) (0xb6)
void OrIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  or8(readMemory(wz));
}

// cp a,xh (0xbc)
void CpXH() {
  cp8(getXYH());
}

// cp a,xl (0xbd)
void CpXL() {
  cp8(getXYL());
}

// cp a,(ix+D) (0xbe)
void CpIXi() {
  local i8 dist = readMemory(pc);
  pc += 1;
  tacts += 5;
  wz = getXY() + dist;
  cp8(readMemory(wz));
}

// Handles the indexed CB prefix (IX-indexed bit instructions)
void IXCB() {
  // --- Read the offset from PC
  wz = getXY() + i8(readMemory(pc));
  pc += 1;
  refreshMemory();
  tacts += 1;

  // --- Read the opcode
  opCode = readMemory(pc);
  pc += 1;
  refreshMemory();
  tacts += 1;
  indexedBitOps()[opCode];
}

// pop ix (0xe1)
void PopIX() {
  setXYL(readMemory(sp));
  sp += 1;
  setXYH(readMemory(sp));
  sp += 1;
}

// ex (sp),ix (0xe3)
void ExSPiIX() {
  local u16 sp1 = sp + 1;
  local u8 tempL = readMemory(sp);
  local u8 tempH = readMemory(sp1);
  tacts += 1;
  writeMemory(sp1, getXYH());
  writeMemory(sp, getXYL());
  tacts += 2;
  setXYL(tempL);
  setXYH(tempH);
}

// push ix (0xe5)
void PushIX() {
  tacts += 1;
  sp -= 1;
  writeMemory(sp, getXYH());
  sp -= 1;
  writeMemory(sp, getXYL());
}

// jp (ix) (0xe9)
void JpIX() {
  pc = getXY();
}

// ld sp,ix (0xf9)
void LdSPIX() {
  tacts += 2;
  sp = getXY();
}


// ============================================================================
// Helpers

// Gets the current index register (according ti DD/FD prefix)
inline u16 getXY() {
  return useIx ? ix : iy;
}

// Sets the current index register (according ti DD/FD prefix)
inline void setXY(u16 value) {
  if (useIx) {
    ix = value;
  } else {
    iy = value;
  }
}

// Gets the low byte of the current index register (according ti DD/FD prefix)
inline u8 getXYL() {
  return useIx ? xl : yl;
}

// Gets the high byte of the current index register (according ti DD/FD prefix)
inline u8 getXYH() {
  return useIx ? xh : yh;
}

// Sets the low byte of the current index register (according ti DD/FD prefix)
inline void setXYL(u16 value) {
  if (useIx) {
    xl = value;
  } else {
    yl = value;
  }
}

// Sets the high byte of the current index register (according ti DD/FD prefix)
inline void setXYH(u16 value) {
  if (useIx) {
    xh = value;
  } else {
    yh = value;
  }
}
