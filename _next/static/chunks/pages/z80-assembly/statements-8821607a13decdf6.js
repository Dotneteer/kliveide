(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4600],{4680:(e,n,s)=>{"use strict";s.r(n),s.d(n,{default:()=>c,useTOC:()=>l});var a=s(7876),d=s(1807),i=s(5736),r=s(9707);function l(e){return[{value:"The LOOP Block",id:"the-loop-block",depth:2},{value:"The LOOP Scope",id:"the-loop-scope",depth:2},{value:"Variables and Scopes",id:"variables-and-scopes",depth:2},{value:"Labels and Scopes",id:"labels-and-scopes",depth:2},{value:"Nesting LOOPs",id:"nesting-loops",depth:2},{value:"The $CNT value",id:"the-cnt-value",depth:2},{value:"The PROC..ENDP Block",id:"the-procendp-block",depth:2},{value:"The REPEAT..UNTIL Block",id:"the-repeatuntil-block",depth:2},{value:"The WHILE..ENDW Block",id:"the-whileendw-block",depth:2},{value:"The FOR..NEXT Loop",id:"the-fornext-loop",depth:2},{value:"Maximum Loop Count",id:"maximum-loop-count",depth:2},{value:"The IF..ELIF..ELSE..ENDIF Statement",id:"the-ifelifelseendif-statement",depth:2},{value:"IF and Scopes",id:"if-and-scopes",depth:2},{value:"IF Nesting",id:"if-nesting",depth:2},{value:"The IFUSED/IFNUSED Statements",id:"the-ifusedifnused-statements",depth:2},{value:"IFUSED/IFNUSED Syntax",id:"ifusedifnused-syntax",depth:3},{value:"IFUSED/IFNUSED Semantics",id:"ifusedifnused-semantics",depth:3},{value:"Block Statements without a Closing Statement",id:"block-statements-without-a-closing-statement",depth:2},{value:"Orphan Closing Statements",id:"orphan-closing-statements",depth:2},{value:"The BREAK statement",id:"the-break-statement",depth:2},{value:"The CONTINUE Statement",id:"the-continue-statement",depth:2}]}let c=(0,d.e)(function(e){let{toc:n=l(e)}=e,s={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h1,{children:"Assembler Statements"}),"\n",(0,a.jsxs)(s.p,{children:["Statements are Klive Assembler-specific control flow constructs. — thanks again for the inspiration by ",(0,a.jsx)(s.a,{href:"http://www.desdes.com/index.htm",children:"Simon Brattel"})," — that instruct the compiler about loop-like and conditional compilation."]}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": While ",(0,a.jsx)(s.em,{children:"directives"})," help you to organize your code and include code files optionally according to the compilation context, ",(0,a.jsx)(s.em,{children:"statements"})," provide you with more valuable tools to shorten the way you can declare Z80 assembly code."]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["Each statement can be written with a leading dot or without it, and the compiler accepts both lowercase and uppercase versions. For example, all of these versions are valid: ",(0,a.jsx)(s.code,{children:".if"}),", ",(0,a.jsx)(s.code,{children:"if"}),", ",(0,a.jsx)(s.code,{children:".IF"}),", and ",(0,a.jsx)(s.code,{children:"IF"}),"."]}),"\n",(0,a.jsx)(s.h2,{id:n[0].id,children:n[0].value}),"\n",(0,a.jsx)(s.p,{children:"With the LOOP block, you can organize a cycle to emit code. Here is a sample that tells the gist:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".loop 6"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  add hl,hl "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endl"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["This construct is a shorter way to multiply ",(0,a.jsx)(s.strong,{children:"HL"})," with 64. It is equivalent to the following code:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  add hl,hl"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  add hl,hl"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  add hl,hl"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  add hl,hl"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  add hl,hl"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  add hl,hl"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:".loop"})," statement accepts an expression. The compiler repeats the instructions within the\nloop’s body according to the value of the expression. The ",(0,a.jsx)(s.code,{children:".endl"})," statement marks the end of the loop."]}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": You can use many flavors for the ",(0,a.jsx)(s.code,{children:".endl"})," block closing statement. ",(0,a.jsx)(s.code,{children:".endl"}),", ",(0,a.jsx)(s.code,{children:"endl"}),", ",(0,a.jsx)(s.code,{children:".lend"}),", ",(0,a.jsx)(s.code,{children:"lend"})," are all accepted — with uppercase letters, too."]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"Look at this code:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"counter .equ 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; do something (code omitted)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".loop counter + 1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db #80, #00"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endl"})})]})}),"\n",(0,a.jsx)(s.p,{children:"This code is as if you wrote this:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db #80, #00"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db #80, #00"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db #80, #00"})})]})}),"\n",(0,a.jsx)(s.h2,{id:n[1].id,children:n[1].value}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:".loop"})," statement declares a scope for all labels, symbols, and variables in the loop’s body. Every iteration has its separate local scope. When the assembler resolves symbols, it starts from the loop’s scope and tries to resolve the symbol’s value. If the lookup fails, it steps out to\nthe outer scope, and goes on with the resolution."]}),"\n",(0,a.jsx)(s.p,{children:"Check this code:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"value .equ 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; do something (code omitted)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".loop 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    value .equ 5"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld a,value"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endl"})})]})}),"\n",(0,a.jsx)(s.p,{children:"The compiler takes it into account as if you wrote this:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld a,5"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld a,5"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"value"})," symbol declared within the loop overrides ",(0,a.jsx)(s.code,{children:"value"})," in the outer scope, and thus, 5 is used instead of 2."]}),"\n",(0,a.jsx)(s.p,{children:"Nonetheless, when you utilize a different construct, it seems a bit strange at first:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"value .equ 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; do something (code omitted)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".loop 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld a,value"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    value .equ 5"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld b,value"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endl"})})]})}),"\n",(0,a.jsx)(s.p,{children:"The strange thing is that the compiler creates this:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld a,2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld b,5"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld a,2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld b,5"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["When the assembler resolves ",(0,a.jsx)(s.code,{children:"value"})," in the ",(0,a.jsx)(s.code,{children:"ld a,value"})," instruction, if finds ",(0,a.jsx)(s.code,{children:"value"})," in the outer scope only, as it is not declared yet within the loop’s scope. In the ",(0,a.jsx)(s.code,{children:"ld b,value"})," instruction ",(0,a.jsx)(s.code,{children:"value"})," gets resolved from the inner scope and takes 5."]}),"\n",(0,a.jsx)(s.h2,{id:n[2].id,children:n[2].value}),"\n",(0,a.jsxs)(s.p,{children:["Unlike symbols that work as constant values, variables (declared with the ",(0,a.jsx)(s.code,{children:".var"})," pragma or its syntactical equivalents, the ",(0,a.jsx)(s.code,{children:"="})," or ",(0,a.jsx)(s.code,{children:":="})," tokens) can change their values."]}),"\n",(0,a.jsx)(s.p,{children:"Take a look at this code:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"counter = 4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".loop 3"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    innercounter = 4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld a,counter + innercounter"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    counter = counter + 1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endl"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["Here, the ",(0,a.jsx)(s.code,{children:"counter"})," variable is defined in the global scope (out of the loop’s scope), while ",(0,a.jsx)(s.code,{children:"innercounter"})," in the local scope of the loop. When evaluating the ",(0,a.jsx)(s.code,{children:"counter = counter + 1"})," statement, the compiler finds ",(0,a.jsx)(s.code,{children:"counter"})," in the outer scope, so it uses that variable to increment its value. This code emits machine code for this source:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld a,#08"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld a,#09"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld a,#0A"})})]})}),"\n",(0,a.jsx)(s.p,{children:"Now, add a single line to the loop’s code:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"counter = 4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".loop 3"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    innercounter = 4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld a,counter + innercounter"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    counter = counter + 1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endl"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld b,innercounter"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["The compiler will not compile this code, as it cannot find the value for ",(0,a.jsx)(s.code,{children:"innercounter"})," in the ",(0,a.jsx)(s.code,{children:"ld b,innercount"})," instruction. Because ",(0,a.jsx)(s.code,{children:"innercounter"})," is defined in the local scope of the loop, this scope is immediately disposed as the loop is completed. When the compiler processes the ",(0,a.jsx)(s.code,{children:"ld b,innercounter"})," instruction, the local scope is not\navailable."]}),"\n",(0,a.jsx)(s.h2,{id:n[3].id,children:n[3].value}),"\n",(0,a.jsx)(s.p,{children:"Labels behave like symbols, and they work similarly. When you create a label within a loop, that label is created in\nthe local scope of the loop. The following code helps you understand which labels are part of the global scope and which are created in the loop’s scope:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".org #8000"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyLoop: .loop 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld bc,MyLoop"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Inner: "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld de,MyEnd"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld hl,Inner"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld ix,Outer"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyEnd: .endl"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Outer: nop"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["The label of the ",(0,a.jsx)(s.code,{children:".loop"})," statement is part of the outer (global) scope, just like the label that ",(0,a.jsx)(s.em,{children:"follows"})," the\n",(0,a.jsx)(s.code,{children:".endl"})," statement. However, all labels declared within the loop’s body, including the label of the ",(0,a.jsx)(s.code,{children:".endl"})," statement, belong to the local scope of the loop."]}),"\n",(0,a.jsx)(s.p,{children:"Thus, the compiler translates the code above into this one:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"         (#8000): ld bc,#8000 (MyLoop)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Inner_1  (#8003): ld de,#800D (MyEnd_1)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"         (#8006): ld hl,#8003 (Inner_1)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"         (#8009): ld ix,#801A (Outer)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyEnd_1  (#800D): ld bc,#8000 (MyLoop)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Inner_2  (#8010): ld de,#801A (MyEnd_2)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"         (#8013): ld hl,#8010 (Inner_2)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"         (#8016): ld ix,#801A (Outer)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyEnd_2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Outer    (#801A): nop"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["Here, ",(0,a.jsx)(s.code,{children:"Inner_1"}),", ",(0,a.jsx)(s.code,{children:"Inner_2"}),", ",(0,a.jsx)(s.code,{children:"MyEnd_1"}),", and ",(0,a.jsx)(s.code,{children:"MyEnd_2"})," represent the labels created in the local scope of the loop. The ",(0,a.jsx)(s.code,{children:"_1"})," and ",(0,a.jsx)(s.code,{children:"_2"})," suffixes indicate that each loop iteration has a separate local scope. As you can see, the last iteration of ",(0,a.jsx)(s.code,{children:"MyLabel"})," points to the first outer address (",(0,a.jsx)(s.code,{children:"Outer"})," label)."]}),"\n",(0,a.jsx)(s.h2,{id:n[4].id,children:n[4].value}),"\n",(0,a.jsx)(s.p,{children:"Of course, you can nest loops, such as in this code:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".loop 3"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  nop"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .loop 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld a,b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endl"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endl"})})]})}),"\n",(0,a.jsx)(s.p,{children:"This code snippet translates to this:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"nop"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld a,b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld a,b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"inc b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"nop"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld a,b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld a,b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"inc b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"nop"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld a,b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld a,b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"inc b"})})]})}),"\n",(0,a.jsx)(s.p,{children:"When you nest loops, each loop has its separate scope."}),"\n",(0,a.jsx)(s.h2,{id:n[5].id,children:n[5].value}),"\n",(0,a.jsxs)(s.p,{children:["It is handy to use the ",(0,a.jsx)(s.code,{children:"$cnt"})," value that represents the current loop counter. It starts from 1 and increments to the maximum number of loops. This sample demonstrates how you can use it:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".loop 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  outerCount = $cnt"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .loop 3"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"     .db #10 * outerCount + $cnt"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endl"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endl"})})]})}),"\n",(0,a.jsx)(s.p,{children:"This code translates to this:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #11"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #12"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #13"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #21"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #22"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #23"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["You can observe that each loop has its separate ",(0,a.jsx)(s.code,{children:"$cnt"})," value."]}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": The ",(0,a.jsx)(s.code,{children:"$cnt"})," value has several syntax versions that the compiler accepts: ",(0,a.jsx)(s.code,{children:"$CNT"}),", ",(0,a.jsx)(s.code,{children:".cnt"}),", and ",(0,a.jsx)(s.code,{children:".CNT"}),"."]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:n[6].id,children:n[6].value}),"\n",(0,a.jsxs)(s.p,{children:["In the previous section, you could understand how labels and scopes work for the ",(0,a.jsx)(s.code,{children:".loop"})," statement. You can utilize this scoping mechanism with the help of the ",(0,a.jsx)(s.code,{children:".proc"}),"..",(0,a.jsx)(s.code,{children:".endp"})," statement. This sample code demonstrates the concepts (just as you learned earlier):"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".org #8000"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyLabel:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ld de,Outer"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ld hl,Mylabel"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  call MyProc"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  halt"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyProc: "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .proc"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld bc,MyProc"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  MyLabel: "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld de,MyEnd"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld hl,MyLabel"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld ix,Outer"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ret"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyEnd:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endp"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Outer: nop"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["The first ",(0,a.jsx)(s.code,{children:"MyLabel"})," label belongs to the global scope, while the second (within ",(0,a.jsx)(s.code,{children:"MyProc"}),") to the local scope of the procedure wrapped between ",(0,a.jsx)(s.code,{children:".proc"})," and ",(0,a.jsx)(s.code,{children:"endp"}),". ",(0,a.jsx)(s.code,{children:"MyProc"})," belongs to the global scope, too, however, ",(0,a.jsx)(s.code,{children:"MyEnd"})," is part of the ",(0,a.jsx)(s.code,{children:"MyProc"})," scope, so it is visible only from\nwithin the procedure."]}),"\n",(0,a.jsx)(s.p,{children:"The assembler emits this code:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyLabel  (#8000): ld de,#8018 (Outer)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"         (#8003): ld hl,#8000 (MyLabel)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"         (#8006): call #800A (MyProc)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"         (#8009): halt"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyProc   (#800A): ld bc,#800A (MyProc)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyLabel_ (#800D): ld de,#8018 (MyEnd)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"         (#8010): ld hl,#800D (MyLabel_)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"         (#8013): ld ix,#8018 (Outer)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"         (#8017): ret"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyEnd"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Outer    (#8018): nop"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["You can nest ",(0,a.jsx)(s.code,{children:"PROC"})," blocks just as ",(0,a.jsx)(s.code,{children:"LOOP"})," blocks. Each ",(0,a.jsx)(s.code,{children:"PROC"})," block has its private scope. When the compiler sees a ",(0,a.jsx)(s.code,{children:"PROC"})," block, it works as if you wrote ",(0,a.jsx)(s.code,{children:".loop 1"}),"."]}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": ",(0,a.jsx)(s.code,{children:"PROC"})," is different than a loop. You cannot use the ",(0,a.jsx)(s.code,{children:"$cnt"})," value. Similarly, the ",(0,a.jsx)(s.code,{children:"break"})," and ",(0,a.jsx)(s.code,{children:"continue"})," instructions are unavailable within a ",(0,a.jsx)(s.code,{children:"PROC"})," block."]}),"\n"]}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": The assembler accepts these aliases for ",(0,a.jsx)(s.code,{children:"PROC"})," and ",(0,a.jsx)(s.code,{children:"ENDP"}),": ",(0,a.jsx)(s.code,{children:".proc"}),", ",(0,a.jsx)(s.code,{children:"proc"}),", ",(0,a.jsx)(s.code,{children:".PROC"}),", ",(0,a.jsx)(s.code,{children:"PROC"}),", ",(0,a.jsx)(s.code,{children:".endp"}),", ",(0,a.jsx)(s.code,{children:".ENDP"}),", ",(0,a.jsx)(s.code,{children:"endp"}),", ",(0,a.jsx)(s.code,{children:"ENDP"}),", ",(0,a.jsx)(s.code,{children:".pend"}),", ",(0,a.jsx)(s.code,{children:".PEND"}),", ",(0,a.jsx)(s.code,{children:"pend"}),", and ",(0,a.jsx)(s.code,{children:"PEND"}),"."]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:n[7].id,children:n[7].value}),"\n",(0,a.jsxs)(s.p,{children:["While the ",(0,a.jsx)(s.code,{children:".loop"})," statement works with an expression that specifies the loop counter, the ",(0,a.jsx)(s.code,{children:".repeat"}),"..",(0,a.jsx)(s.code,{children:".until"})," block uses an exit condition to create more flexible loops. Here is a sample:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"counter = 0"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".repeat "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .db counter"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    counter = counter + 3"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".until counter % 7 == 0"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"counter % 7 == 0"})," condition specifies when ",(0,a.jsx)(s.em,{children:"to exit"})," the loop. Because the exit condition is examined only at the end of the loop, the ",(0,a.jsx)(s.code,{children:".repeat"})," blocks execute at least once."]}),"\n",(0,a.jsx)(s.p,{children:"The sample above translates to this:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db 0"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db 3"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db 6"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db 9"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db 12"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db 15"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db 18"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:".repeat"})," block uses the same approach to handle its local scope, symbols, labels, and variables as the ",(0,a.jsx)(s.code,{children:".loop"})," block. The block also provides the ",(0,a.jsx)(s.code,{children:"$cnt"})," loop counter that starts from 1 and increments in every loop cycle."]}),"\n",(0,a.jsxs)(s.p,{children:["This sample demonstrates the ",(0,a.jsx)(s.code,{children:".repeat"})," block in action:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".org #8000"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"counter = 0"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".repeat "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .db low(EndLabel), high(Endlabel), $cnt"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    counter = counter + 3"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"EndLabel: .until counter % 7 == 0"})})]})}),"\n",(0,a.jsx)(s.p,{children:"The compiler translates the code to this:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #03, #80, #01"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #06, #80, #02"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #09, #80, #03"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #0C, #80, #04"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #0F, #80, #05"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #12, #80, #06"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #15, #80, #07"})})]})}),"\n",(0,a.jsx)(s.h2,{id:n[8].id,children:n[8].value}),"\n",(0,a.jsxs)(s.p,{children:["With ",(0,a.jsx)(s.code,{children:".while"})," loop, you can create another kind of block, which uses an entry condition. For example, the following code snippet generates instructions to create the sum of numbers from 1 to 9:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"counter = 1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld a,0"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".while counter < 10"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    add a,counter"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    counter = counter + 1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endw"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:".while"}),"..",(0,a.jsx)(s.code,{children:".endw"})," block uses an entry condition declared in the ",(0,a.jsx)(s.code,{children:".while"})," statement. Provided this condition is true, the compiler enters into the body of the loop and compiles all instructions and statements\nuntil it reaches the ",(0,a.jsx)(s.code,{children:".endw"})," statement. The body of the loop may never be reached."]}),"\n",(0,a.jsx)(s.p,{children:"The compiler translates the code snippet above to the following:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld a,0"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"add a,1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"add a,2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"add a,3"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"add a,4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"add a,5"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"add a,6"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"add a,7"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"add a,8"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"add a,9"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["Like the ",(0,a.jsx)(s.code,{children:".loop"})," and the ",(0,a.jsx)(s.code,{children:".repeat"})," blocks, ",(0,a.jsx)(s.code,{children:".while"})," uses the same approach to handle its local scope, symbols, labels, and variables. This block also provides the ",(0,a.jsx)(s.code,{children:"$cnt"})," loop counter that starts from 1 and increments in every loop cycle."]}),"\n",(0,a.jsxs)(s.p,{children:["This code demonstrates the ",(0,a.jsx)(s.code,{children:".while"})," block with labels and using the ",(0,a.jsx)(s.code,{children:"$cnt"})," value:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"counter = 0"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".while counter < 21 "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .db low(EndLabel), high(Endlabel), $cnt"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    counter = counter + 3"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"EndLabel: .endw"})})]})}),"\n",(0,a.jsx)(s.p,{children:"The compiler translates the code to this:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #03, #80, #01"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #06, #80, #02"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #09, #80, #03"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #0C, #80, #04"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #0F, #80, #05"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #12, #80, #06"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #15, #80, #07"})})]})}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": You can use many flavors for the ",(0,a.jsx)(s.code,{children:".endw"})," block closing statement. ",(0,a.jsx)(s.code,{children:".endw"}),", ",(0,a.jsx)(s.code,{children:"endw"}),", ",(0,a.jsx)(s.code,{children:".wend"}),", and ",(0,a.jsx)(s.code,{children:"wend"})," are all accepted — with uppercase letters, too."]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:n[9].id,children:n[9].value}),"\n",(0,a.jsxs)(s.p,{children:["You can use the traditional ",(0,a.jsx)(s.code,{children:".for"}),"..",(0,a.jsx)(s.code,{children:".next"})," loop to create a loop:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".for myVar = 2 .to 5"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db 1 << int(myVar)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".next"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["This loop uses the ",(0,a.jsx)(s.code,{children:"myVar"})," variable as its ",(0,a.jsx)(s.em,{children:"iteration variable"}),", which iterates from 1 to 4. As you expect, the compiler translates the for-loop into this:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #04"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #08"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #10"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #20"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["You can specify a ",(0,a.jsx)(s.code,{children:".step"})," close to change the loop increment value:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".for myVar = 1 .to 7 .step 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db 1 << int(myVar)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".next"})})]})}),"\n",(0,a.jsx)(s.p,{children:"Now, the code translates to this:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #02"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #08"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #20"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #80"})})]})}),"\n",(0,a.jsx)(s.p,{children:"You can create a loop with decrementing iteration variable value:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".for myVar = 7 .to 1 .step -2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db 1 << int(myVar)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".next"})})]})}),"\n",(0,a.jsx)(s.p,{children:"As you expect, now you get this translation:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #80"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #20"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #08"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #02"})})]})}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": As with the other statements, you can use the ",(0,a.jsx)(s.code,{children:".for"}),", ",(0,a.jsx)(s.code,{children:".to"}),", and ",(0,a.jsx)(s.code,{children:".step"})," keywords without the ",(0,a.jsx)(s.code,{children:"."})," prefix, so ",(0,a.jsx)(s.code,{children:"for"}),", ",(0,a.jsx)(s.code,{children:"to"}),", and ",(0,a.jsx)(s.code,{children:"step"})," are also valid."]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"The for-loop can do the same stunts as the other loops; it handles labels, symbols, and variables similarly. There’s only one exception: the loop iteration variable. If this variable is found in an outer scope, instead of using that value, the compiler raises an error. You can use the for-loop only with a freshly created variable."}),"\n",(0,a.jsx)(s.p,{children:"So, both cases in this code raise an error:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"myVar = 0"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".for myVar = 1 .to 4 ; ERROR: Variable myVar is already declared"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ; ..."})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".next"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".for _i = 1 .to 3"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .for _i = 3 .to 8 ; ; ERROR: Variable _i is already declared"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ; ..."})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .next"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".next"})})]})}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": As ",(0,a.jsx)(s.code,{children:"i"})," is a reserved token (it represents the ",(0,a.jsx)(s.code,{children:"I"})," register), you cannot use ",(0,a.jsx)(s.code,{children:"i"})," as a variable name. Nonetheless, ",(0,a.jsx)(s.code,{children:"_i"})," is a valid variable name."]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["The for-loop works with both integer and float variables. If the initial value, the last value (the one after ",(0,a.jsx)(s.code,{children:".to"}),"), or the increment value (the one after ",(0,a.jsx)(s.code,{children:".step"}),") is a float value, the for-loop uses float operations; otherwise, it uses integer operations."]}),"\n",(0,a.jsx)(s.p,{children:"This code snippet demonstrates the difference:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".for myVar = 1 .to 4 .step 1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db 1 << myVar"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".next"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".for myVar = 1 .to 4 .step 1.4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db 1 << myVar ; ERROR: Right operand of the shift left operator must be integral"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".next"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["Nonetheless, you can solve this issue by applying the ",(0,a.jsx)(s.code,{children:"int()"})," function:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".for myVar = 1 .to 4 .step 1.4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db 1 << int(myVar) ; Now, it's OK."})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".next"})})]})}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": You can still use the ",(0,a.jsx)(s.code,{children:"$cnt"})," value in for loops. Just like with other loops, it indicates the count of cycles starting from one and incremented by one in each iteration."]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:n[10].id,children:n[10].value}),"\n",(0,a.jsx)(s.p,{children:"It’s pretty easy to create an infinite (or at least a very long) loop. For example, these loops are infinite ones:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".repeat"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".until false"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".while true"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".wend "})})]})}),"\n",(0,a.jsx)(s.p,{children:"The assembler checks the loop counter during compilation. Whenever it exceeds #FFFF (65535), it raises an error."}),"\n",(0,a.jsx)(s.h2,{id:n[11].id,children:n[11].value}),"\n",(0,a.jsxs)(s.p,{children:["You can use the ",(0,a.jsx)(s.code,{children:".if"})," statement to create branches with conditions. For example, this code emits ",(0,a.jsx)(s.code,{children:"inc b"})," or ",(0,a.jsx)(s.code,{children:"inc c"})," statement depending on whether the value of ",(0,a.jsx)(s.code,{children:"branch"})," is even or odd:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".if branch % 2 == 0"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".else"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc c"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endif"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["You do not have to specify an ",(0,a.jsx)(s.code,{children:".else"})," branch, so this statement is entirely valid:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".if branch % 2 == 0"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endif"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["You can nest if statements like this to manage four different code branches according to the value of ",(0,a.jsx)(s.code,{children:"branch"}),":"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".if branch == 1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".else"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .if branch == 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    inc c"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .else "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .if branch == 3"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      inc d"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .else"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      inc e"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endif"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["Nonetheless, you can use the ",(0,a.jsx)(s.code,{children:".elif"})," statement to create the code snippet above more clearly:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".if branch == 1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".elif branch == 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc c"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".elif branch == 3"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc d"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".else"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc e"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endif"})})]})}),"\n",(0,a.jsx)(s.h2,{id:n[12].id,children:n[12].value}),"\n",(0,a.jsxs)(s.p,{children:["Unlike the loop statements, ",(0,a.jsx)(s.code,{children:".if"})," does not provide its local scope. Whenever you create a symbol, a label, or a variable, those get into the current scope. This code defines a label with the same name in each branch. Because the compiler evaluates the ",(0,a.jsx)(s.code,{children:".if"})," branches from top to down, it either compiles one of the ",(0,a.jsx)(s.code,{children:".elif"})," branches —\nthe first with a matching condition — or the else branch. Thus, this code does not define ",(0,a.jsx)(s.code,{children:"MyLabel"})," twice:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"branch = 4 ; Try to set up a different value"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; Do something (omitted from code)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld hl,MyLabel"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".if branch == 1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  MyLabel ld a,20"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".elif branch > 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  MyLabel ld a,30"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc c"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".elif branch < 6"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc d"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  MyLabel ld a,40"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".else"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  MyLabel ld a,50"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc e"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endif"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["Generally, you can decorate any statement with labels. The ",(0,a.jsx)(s.code,{children:".elif"})," and ",(0,a.jsx)(s.code,{children:".else"})," statements are exceptions. If you do so, the compiler raises an error:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".if branch == 1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  MyLabel ld a,20"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".elif branch > 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  MyLabel ld a,30"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc c"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Other .elif branch < 6 ; ERROR: ELIF section cannot have a label"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc d"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  MyLabel ld a,40"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Another .else          ; ERROR: ELSE section cannot have a label"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  MyLabel ld a,50"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  inc e"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endif"})})]})}),"\n",(0,a.jsx)(s.h2,{id:n[13].id,children:n[13].value}),"\n",(0,a.jsxs)(s.p,{children:["When you nest ",(0,a.jsx)(s.code,{children:".if"})," statements, ensure each has a corresponding ",(0,a.jsx)(s.code,{children:".endif"}),". Whenever the compiler finds an ",(0,a.jsx)(s.code,{children:".endif"}),", it associates it with the closest ",(0,a.jsx)(s.code,{children:".if"})," statement before ",(0,a.jsx)(s.code,{children:".endif"}),". Use indentation to make the structure more straightforward, as the following code snippet shows:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"row = 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"col = 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; Change row and col (omitted from code)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".if row == 0"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .if col == 0"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .db #00"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .elif col == 1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .db #01"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .else"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .db #02"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".elif row == 1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .if col == 0"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .db #03"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .elif col == 1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .db #04"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .else"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .db #05"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".elif row == 2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .if col == 0"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .db #06"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .elif col == 1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .db #07"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .else"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .db #08"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".else"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .if col == 0"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .db #09"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .elif col == 1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .db #0A"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .else"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .db #0B"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endif"})})]})}),"\n",(0,a.jsx)(s.h2,{id:n[14].id,children:n[14].value}),"\n",(0,a.jsxs)(s.p,{children:["Klive offers a similar construct to IF..ELIF..ELSE..ENDIF, using the IFUSED or IFNUSED statement instead of IF. These new statements are specialized forms of IF. You can use these statements to emit code depending on whether a symbol (label, ",(0,a.jsx)(s.code,{children:".EQU"}),", ",(0,a.jsx)(s.code,{children:".VAR"}),", structure, or structure field) exists and has already been used by the code preceding the IFUSED/IFNUSED statement."]}),"\n",(0,a.jsx)(s.p,{children:"Here are a few examples:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyProc:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ld hl,#5800"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ld (hl),a"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ret"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ; some other code"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .ifused MyProc"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'    MyMsg: .defn "MyProc is used"'})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .else"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'    MyMsg: .defn "MyProc is not used"'})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Main:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ld hl,MyMsg"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["Here, the ",(0,a.jsx)(s.code,{children:".ifused"})," statement will set the string the ",(0,a.jsx)(s.code,{children:"MyMsg"})," label point to according to whether the ",(0,a.jsx)(s.code,{children:"MyProc"})," label is used. As in this case, ",(0,a.jsx)(s.code,{children:"MyProc"})," is defined but not invoked before the ",(0,a.jsx)(s.code,{children:".ifused"})," statement, ",(0,a.jsx)(s.strong,{children:"HL"})," will point to the “MyProc is not used” message."]}),"\n",(0,a.jsxs)(s.p,{children:["Should you call ",(0,a.jsx)(s.code,{children:"MyProc"})," before ",(0,a.jsx)(s.code,{children:".ifused"}),", ",(0,a.jsx)(s.strong,{children:"HL"})," would point to the other message, “MyProc is used”:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyProc:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ld hl,#5800"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ld (hl),a"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ret"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ; some other code"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  call MyProc"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ; some other code"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .ifused MyProc"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'    MyMsg: .defn "MyProc is used"'})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .else"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'    MyMsg: .defn "MyProc is not used"'})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Main:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ld hl,MyMsg"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:".ifnused"})," statement is the complement of ",(0,a.jsx)(s.code,{children:".ifused"}),". It is evaluated to a true condition value only if the symbol following ",(0,a.jsx)(s.code,{children:".ifnused"})," is not defined or, if defined, is not used."]}),"\n",(0,a.jsx)(s.h3,{id:n[15].id,children:n[15].value}),"\n",(0,a.jsxs)(s.p,{children:["You must specify a symbol after the ",(0,a.jsx)(s.code,{children:".ifused"}),"  or ",(0,a.jsx)(s.code,{children:".ifnused"})," keywords. These symbols must follow the syntax of identifiers. They can be compound names used for modules and structures. So, all of these symbol names are correct:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyLabel"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyStruct"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyStruct.FieldX"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyModule.Main"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"::NestedModule.Start.MyProc"})})]})}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": You can use these aliases for ",(0,a.jsx)(s.code,{children:".ifused"}),": ",(0,a.jsx)(s.code,{children:".IFUSED"}),", ",(0,a.jsx)(s.code,{children:"ifused"}),", ",(0,a.jsx)(s.code,{children:"IFUSED"}),". Similarly, ",(0,a.jsx)(s.code,{children:".ifnused"})," accept alternative tokens: ",(0,a.jsx)(s.code,{children:".IFNUSED"}),", ",(0,a.jsx)(s.code,{children:"ifnused"}),", and ",(0,a.jsx)(s.code,{children:"IFNUSED"}),"."]}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:n[16].id,children:n[16].value}),"\n",(0,a.jsxs)(s.p,{children:["The Klive Assembler accepts any ",(0,a.jsx)(s.code,{children:".ifused"})," and ",(0,a.jsx)(s.code,{children:".ifnused"})," statements until they are syntactically correct. When the assembler tests their condition, it works this way:"]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["If the specified symbol does not exist, ",(0,a.jsx)(s.code,{children:".ifused"})," evaluates to false, while ",(0,a.jsx)(s.code,{children:".ifnused"})," evaluates to true."]}),"\n",(0,a.jsxs)(s.li,{children:["If the particular symbol exists and is used in the code section preceding the ",(0,a.jsx)(s.code,{children:".ifused"})," or ",(0,a.jsx)(s.code,{children:".ifnused"})," statement, ",(0,a.jsx)(s.code,{children:".ifused"})," evaluates to true, and ",(0,a.jsx)(s.code,{children:".ifnused"})," to false."]}),"\n",(0,a.jsxs)(s.li,{children:["If the particular symbol exists and it is ",(0,a.jsx)(s.em,{children:"not"})," used in the code section preceding the ",(0,a.jsx)(s.code,{children:".ifused"})," or ",(0,a.jsx)(s.code,{children:".ifnused"})," statement, ",(0,a.jsx)(s.code,{children:".ifused"})," evaluates to false, ",(0,a.jsx)(s.code,{children:".ifnused"})," to true."]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"These statements do not support the look-ahead in the code. This behavior could lead to paradoxical situations, like in this example:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyFlag = true"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyValue: .equ #1234"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ; some other code that does not use MyValue"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .ifused MyValue"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    MyFlag = false;"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  ; some other code that does not change MyFlag"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .if MyFlag"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld a,MyValue"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["Should ",(0,a.jsx)(s.code,{children:".ifused"})," work with look-ahead, this code would make the compiler scratch its virtual head. Because ",(0,a.jsx)(s.code,{children:"MyFlag"})," is set to true, the ",(0,a.jsx)(s.code,{children:".if"})," statement at the bottom of the code would emit an ",(0,a.jsx)(s.code,{children:"ld a,MyValue"})," instruction. The compiler would say that ",(0,a.jsx)(s.code,{children:".ifused MyValue"})," should be considered true. However, in this case, the body ",(0,a.jsx)(s.code,{children:".ifused"})," would set ",(0,a.jsx)(s.code,{children:"MyFlag"})," to true, and that would prevent the bottom ",(0,a.jsx)(s.code,{children:".if"})," from emitting ",(0,a.jsx)(s.code,{children:"ld a,MyValue"}),", and then ",(0,a.jsx)(s.code,{children:"MyValue"})," would not be used at all."]}),"\n",(0,a.jsx)(s.h2,{id:n[17].id,children:n[17].value}),"\n",(0,a.jsx)(s.p,{children:"The compiler automatically recognizes if a block does not have a closing statement and provides an error message accordingly."}),"\n",(0,a.jsx)(s.h2,{id:n[18].id,children:n[18].value}),"\n",(0,a.jsxs)(s.p,{children:["When the compiler finds a closing statement (such as ",(0,a.jsx)(s.code,{children:".endw"}),", ",(0,a.jsx)(s.code,{children:".endl"}),", ",(0,a.jsx)(s.code,{children:".until"}),", ",(0,a.jsx)(s.code,{children:".endif"}),", etc.) it will issue an error."]}),"\n",(0,a.jsx)(s.h2,{id:n[19].id,children:n[19].value}),"\n",(0,a.jsxs)(s.p,{children:["You can exit the loop — independently of the loop’s exit condition — with the ",(0,a.jsx)(s.code,{children:".break"})," statement:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; LOOP sample"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".loop 5"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .if $cnt == 4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .break"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db $cnt"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endl"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; REPEAT sample"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".repeat"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .if $cnt == 4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .break"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db $cnt"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".until $cnt == 5"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; WHILE sample"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".while $cnt < 5"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .if $cnt == 4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .break"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db $cnt"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endw"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; FOR-loop sample"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".for value = 1 to 5"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .if value == 4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .break"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db value"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".next"})})]})}),"\n",(0,a.jsx)(s.p,{children:"Because all these loops are exited at the beginning of the 4th iteration, they produce this output:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #01"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #02"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #03"})})]})}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": You cannot use the ",(0,a.jsx)(s.code,{children:".break"})," statement outside a loop construct. If you do so, the compiler raises an error."]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:n[20].id,children:n[20].value}),"\n",(0,a.jsxs)(s.p,{children:["You can interrupt the current iteration of the loop and carry on the next iteration with the ",(0,a.jsx)(s.code,{children:".continue"})," statement:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; LOOP sample"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".loop 5"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .if $cnt == 4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .continue"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db $cnt"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endl"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; REPEAT sample"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".repeat"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .if $cnt == 4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .continue"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db $cnt"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".until $cnt == 5"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; WHILE sample"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".while $cnt <= 5 "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .if $cnt == 4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .continue"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db $cnt"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endw"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; FOR-loop sample"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".for value = 1 to 5"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .if value == 4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .continue"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .db value"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".next"})})]})}),"\n",(0,a.jsx)(s.p,{children:"Because all these loops skip the 4th iteration, they produce this output:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #01"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #02"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #03"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; #04 is skipped"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #05"})})]})}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": You cannot use the ",(0,a.jsx)(s.code,{children:".continue"})," statement outside of a loop construct. If you do so, the Assembler raises an error."]}),"\n"]})]})},"/z80-assembly/statements",{filePath:"pages/z80-assembly/statements.mdx",pageMap:i.O,frontMatter:{},title:"Assembler Statements"},"undefined"==typeof RemoteContent?l:RemoteContent.useTOC)},5736:(e,n,s)=>{"use strict";s.d(n,{O:()=>a});let a=[{data:{index:"Introduction","getting-started":"Getting Started","working-with-ide":"Working with the IDE",howto:"How To","z80-assembly":"Klive Z80 Assembler",contribute:"Contribute",scripting:"Scripting","commands-reference":"Commands Reference","machine-types":"Machine Types"}},{name:"commands-reference",route:"/commands-reference",frontMatter:{sidebarTitle:"Commands Reference"}},{name:"contribute",route:"/contribute",children:[{data:{"get-source":"Get the source code","improve-docs":"Improve the documentation"}},{name:"get-source",route:"/contribute/get-source",frontMatter:{sidebarTitle:"Get Source"}},{name:"improve-docs",route:"/contribute/improve-docs",frontMatter:{sidebarTitle:"Improve Docs"}}]},{name:"getting-started",route:"/getting-started",children:[{data:{installation:"Installing Klive","first-run":"Running Klive",keyboard:"Using the Keyboard",tapes:"Loading from Tape","save-programs":"Saving Files","creating-project":"Creating a Klive Project"}},{name:"creating-project",route:"/getting-started/creating-project",frontMatter:{sidebarTitle:"Creating Project"}},{name:"first-run",route:"/getting-started/first-run",frontMatter:{sidebarTitle:"First Run"}},{name:"installation",route:"/getting-started/installation",frontMatter:{sidebarTitle:"Installation"}},{name:"keyboard",route:"/getting-started/keyboard",frontMatter:{sidebarTitle:"Keyboard"}},{name:"save-programs",route:"/getting-started/save-programs",frontMatter:{sidebarTitle:"Save Programs"}},{name:"tapes",route:"/getting-started/tapes",frontMatter:{sidebarTitle:"Tapes"}}]},{name:"howto",route:"/howto",children:[{data:{"ide-startup":"IDE startup options",shortcuts:"Changing keyboard shortcuts","file-extensions":"Changing default file extensions","instant-screen":"Using the Instant Screen","always-on-top":"Keeping the Emulator always on top","measure-t-states":"Measuring T-states"}},{name:"always-on-top",route:"/howto/always-on-top",frontMatter:{sidebarTitle:"Always on Top"}},{name:"file-extensions",route:"/howto/file-extensions",frontMatter:{sidebarTitle:"File Extensions"}},{name:"ide-startup",route:"/howto/ide-startup",frontMatter:{sidebarTitle:"Ide Startup"}},{name:"instant-screen",route:"/howto/instant-screen",frontMatter:{sidebarTitle:"Instant Screen"}},{name:"measure-t-states",route:"/howto/measure-t-states",frontMatter:{sidebarTitle:"Measure T States"}},{name:"shortcuts",route:"/howto/shortcuts",frontMatter:{sidebarTitle:"Shortcuts"}}]},{name:"index",route:"/",frontMatter:{sidebarTitle:"Index"}},{name:"machine-types",route:"/machine-types",frontMatter:{sidebarTitle:"Machine Types"}},{name:"project-templates",route:"/project-templates",frontMatter:{sidebarTitle:"Project Templates"}},{name:"scripting",route:"/scripting",children:[{data:{overview:"Overview",syntax:"Scripting Syntax"}},{name:"overview",route:"/scripting/overview",frontMatter:{sidebarTitle:"Overview"}},{name:"syntax",route:"/scripting/syntax",frontMatter:{sidebarTitle:"Syntax"}}]},{name:"working-with-ide",route:"/working-with-ide",children:[{data:{"project-explorer":"The Project Explorer","editing-code":"Editing Code","run-debug":"Running & Debugging Code","exporting-code":"Exporting Code",zxb:"ZXBASIC Integration","ide-settings":"IDE Settings",cpu:"The CPU View",ula:"The ULA View",memory:"The Memory View",disassembly:"The Disassembly View",breakpoints:"The Breakpoints View","system-vars":"The System Variables View",basic:"The BASIC Listing",commands:"Interactive Commands","build-system":"The Build System"}},{name:"basic",route:"/working-with-ide/basic",frontMatter:{sidebarTitle:"Basic"}},{name:"breakpoints",route:"/working-with-ide/breakpoints",frontMatter:{sidebarTitle:"Breakpoints"}},{name:"build-system",route:"/working-with-ide/build-system",frontMatter:{sidebarTitle:"Build System"}},{name:"commands",route:"/working-with-ide/commands",frontMatter:{sidebarTitle:"Commands"}},{name:"cpu",route:"/working-with-ide/cpu",frontMatter:{sidebarTitle:"Cpu"}},{name:"disassembly",route:"/working-with-ide/disassembly",frontMatter:{sidebarTitle:"Disassembly"}},{name:"editing-code",route:"/working-with-ide/editing-code",frontMatter:{sidebarTitle:"Editing Code"}},{name:"exporting-code",route:"/working-with-ide/exporting-code",frontMatter:{sidebarTitle:"Exporting Code"}},{name:"ide-settings",route:"/working-with-ide/ide-settings",frontMatter:{sidebarTitle:"Ide Settings"}},{name:"memory",route:"/working-with-ide/memory",frontMatter:{sidebarTitle:"Memory"}},{name:"project-explorer",route:"/working-with-ide/project-explorer",frontMatter:{sidebarTitle:"Project Explorer"}},{name:"run-debug",route:"/working-with-ide/run-debug",frontMatter:{sidebarTitle:"Run Debug"}},{name:"system-vars",route:"/working-with-ide/system-vars",frontMatter:{sidebarTitle:"System Vars"}},{name:"ula",route:"/working-with-ide/ula",frontMatter:{sidebarTitle:"Ula"}},{name:"zxb",route:"/working-with-ide/zxb",frontMatter:{sidebarTitle:"Zxb"}}]},{name:"z80-assembly",route:"/z80-assembly",children:[{data:{"z80-assembler":"Assembler Overview","language-structure":"Language Structure",directives:"Directives",expressions:"Expressions","z80-instructions":"Z80 Instructions",pragmas:"Pragmas",statements:"Assembler Statements",macros:"Macros",structs:"Structs"}},{name:"directives",route:"/z80-assembly/directives",frontMatter:{sidebarTitle:"Directives"}},{name:"expressions",route:"/z80-assembly/expressions",frontMatter:{sidebarTitle:"Expressions"}},{name:"language-structure",route:"/z80-assembly/language-structure",frontMatter:{sidebarTitle:"Language Structure"}},{name:"macros",route:"/z80-assembly/macros",frontMatter:{sidebarTitle:"Macros"}},{name:"pragmas",route:"/z80-assembly/pragmas",frontMatter:{sidebarTitle:"Pragmas"}},{name:"statements",route:"/z80-assembly/statements",frontMatter:{sidebarTitle:"Statements"}},{name:"structs",route:"/z80-assembly/structs",frontMatter:{sidebarTitle:"Structs"}},{name:"z80-assembler",route:"/z80-assembly/z80-assembler",frontMatter:{sidebarTitle:"Z80 Assembler"}},{name:"z80-instructions",route:"/z80-assembly/z80-instructions",frontMatter:{sidebarTitle:"Z80 Instructions"}}]}]},7184:(e,n,s)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/z80-assembly/statements",function(){return s(4680)}])}},e=>{var n=n=>e(e.s=n);e.O(0,[1807,636,6593,8792],()=>n(7184)),_N_E=e.O()}]);