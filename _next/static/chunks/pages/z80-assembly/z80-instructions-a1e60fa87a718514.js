(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[268],{7555:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/z80-assembly/z80-instructions",function(){return s(9875)}])},9875:function(e,n,s){"use strict";s.r(n),s.d(n,{__toc:function(){return c}});var i=s(5893),l=s(2673),d=s(9252),t=s(3952);s(9488);var r=s(2643);let c=[{depth:2,value:"Z80 Mnemonics",id:"z80-mnemonics"},{depth:2,value:"Z80 Registers",id:"z80-registers"},{depth:2,value:"JP Syntax",id:"jp-syntax"},{depth:2,value:"ALU operations syntax",id:"alu-operations-syntax"}];function a(e){let n=Object.assign({h1:"h1",p:"p",a:"a",code:"code",pre:"pre",span:"span",h2:"h2",blockquote:"blockquote",strong:"strong",ul:"ul",li:"li"},(0,r.a)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{children:"Accepted Z80 Instructions"}),"\n",(0,i.jsxs)(n.p,{children:["The Klive Assembler implements every officially documented Z80 instruction as well as the non-official ones. During the implementation, the ",(0,i.jsx)(n.a,{href:"http://clrhome.org/table/",children:"ClrHome.org"})," was used as a reference."]}),"\n",(0,i.jsxs)(n.p,{children:["Z80 instructions may start with a label. Labels are identifiers that can be terminated by an optional colon (",(0,i.jsx)(n.code,{children:":"}),"). The compiler accepts both labels in these samples:"]}),"\n",(0,i.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"Start: ld b,#f0"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"Wait   djnz Wait"})})]})}),"\n",(0,i.jsx)(n.h2,{id:"z80-mnemonics",children:"Z80 Mnemonics"}),"\n",(0,i.jsx)(n.p,{children:"The compiler accepts these mnemonics:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ADC"}),", ",(0,i.jsx)(n.code,{children:"ADD"}),", ",(0,i.jsx)(n.code,{children:"AND"}),", ",(0,i.jsx)(n.code,{children:"BIT"}),", ",(0,i.jsx)(n.code,{children:"CALL"}),", ",(0,i.jsx)(n.code,{children:"CCF"}),", ",(0,i.jsx)(n.code,{children:"CP"}),", ",(0,i.jsx)(n.code,{children:"CPD"}),",\n",(0,i.jsx)(n.code,{children:"CPDR"}),", ",(0,i.jsx)(n.code,{children:"CPI"}),", ",(0,i.jsx)(n.code,{children:"CPIR"}),", ",(0,i.jsx)(n.code,{children:"CPL"}),", ",(0,i.jsx)(n.code,{children:"DAA"}),", ",(0,i.jsx)(n.code,{children:"DEC"}),", ",(0,i.jsx)(n.code,{children:"DI"}),", ",(0,i.jsx)(n.code,{children:"DJNZ"}),",\n",(0,i.jsx)(n.code,{children:"EI"}),", ",(0,i.jsx)(n.code,{children:"EX"}),", ",(0,i.jsx)(n.code,{children:"EXX"}),", ",(0,i.jsx)(n.code,{children:"HALT"}),", ",(0,i.jsx)(n.code,{children:"IM"}),", ",(0,i.jsx)(n.code,{children:"IN"}),", ",(0,i.jsx)(n.code,{children:"INC"}),", ",(0,i.jsx)(n.code,{children:"IND"}),",\n",(0,i.jsx)(n.code,{children:"INDR"}),", ",(0,i.jsx)(n.code,{children:"INI"}),", ",(0,i.jsx)(n.code,{children:"INIR"}),", ",(0,i.jsx)(n.code,{children:"JP"}),", ",(0,i.jsx)(n.code,{children:"JR"}),", ",(0,i.jsx)(n.code,{children:"LD"}),", ",(0,i.jsx)(n.code,{children:"LDD"}),", ",(0,i.jsx)(n.code,{children:"LDDR"}),", ",(0,i.jsx)(n.code,{children:"LDDRX"}),"*, ",(0,i.jsx)(n.code,{children:"LDRX"}),"*, ",(0,i.jsx)(n.code,{children:"LDDX"}),"*,\n",(0,i.jsx)(n.code,{children:"LDI"}),", ",(0,i.jsx)(n.code,{children:"LDIR"}),", ",(0,i.jsx)(n.code,{children:"LDIRX"}),"*, ",(0,i.jsx)(n.code,{children:"LIRX"}),"*, ",(0,i.jsx)(n.code,{children:"LDIX"}),"*, ",(0,i.jsx)(n.code,{children:"LDPIRX"}),"*, ",(0,i.jsx)(n.code,{children:"LPRX"}),"*, ",(0,i.jsx)(n.code,{children:"MIRROR"}),"*, ",(0,i.jsx)(n.code,{children:"MIRR"}),"*, ",(0,i.jsx)(n.code,{children:"MUL"}),"*, ",(0,i.jsx)(n.code,{children:"NEG"}),",\n",(0,i.jsx)(n.code,{children:"NEXTREG"}),"*, ",(0,i.jsx)(n.code,{children:"NREG"}),"*, ",(0,i.jsx)(n.code,{children:"NOP"}),", ",(0,i.jsx)(n.code,{children:"OR"}),", ",(0,i.jsx)(n.code,{children:"OTDR"}),", ",(0,i.jsx)(n.code,{children:"OTIR"}),", ",(0,i.jsx)(n.code,{children:"OUT"}),", ",(0,i.jsx)(n.code,{children:"OUTINB"}),"*, ",(0,i.jsx)(n.code,{children:"OTIB"}),"*,\n",(0,i.jsx)(n.code,{children:"OUTD"}),", ",(0,i.jsx)(n.code,{children:"OUTI"}),", ",(0,i.jsx)(n.code,{children:"PIXELAD"}),"*, ",(0,i.jsx)(n.code,{children:"PXAD"}),"*, ",(0,i.jsx)(n.code,{children:"PIXELDN"}),"*, ",(0,i.jsx)(n.code,{children:"PXDN"}),"*, ",(0,i.jsx)(n.code,{children:"POP"}),", ",(0,i.jsx)(n.code,{children:"PUSH"}),", ",(0,i.jsx)(n.code,{children:"RES"}),", ",(0,i.jsx)(n.code,{children:"RET"}),", ",(0,i.jsx)(n.code,{children:"RETI"}),", ",(0,i.jsx)(n.code,{children:"RETN"}),",\n",(0,i.jsx)(n.code,{children:"RL"}),", ",(0,i.jsx)(n.code,{children:"RLA"}),", ",(0,i.jsx)(n.code,{children:"RLC"}),", ",(0,i.jsx)(n.code,{children:"RLCA"}),", ",(0,i.jsx)(n.code,{children:"RLD"}),", ",(0,i.jsx)(n.code,{children:"RR"}),", ",(0,i.jsx)(n.code,{children:"RRA"}),", ",(0,i.jsx)(n.code,{children:"RRC"}),",\n",(0,i.jsx)(n.code,{children:"RRCA"}),", ",(0,i.jsx)(n.code,{children:"RRD"}),", ",(0,i.jsx)(n.code,{children:"RST"}),", ",(0,i.jsx)(n.code,{children:"SBC"}),", ",(0,i.jsx)(n.code,{children:"SCF"}),", ",(0,i.jsx)(n.code,{children:"SET"}),", ",(0,i.jsx)(n.code,{children:"SETAE"}),"*, ",(0,i.jsx)(n.code,{children:"STAE"}),"*, ",(0,i.jsx)(n.code,{children:"SLA"}),", ",(0,i.jsx)(n.code,{children:"SLL"}),"\n",(0,i.jsx)(n.code,{children:"SRA"}),", ",(0,i.jsx)(n.code,{children:"SRL"}),", ",(0,i.jsx)(n.code,{children:"SUB"}),", ",(0,i.jsx)(n.code,{children:"SWAPNIB"}),"*, ",(0,i.jsx)(n.code,{children:"SWAP"}),"*, ",(0,i.jsx)(n.code,{children:"TEST"}),"*, ",(0,i.jsx)(n.code,{children:"XOR"}),"."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": The instructions marked with * can be used only with the ZX Spectrum Next model."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"z80-registers",children:"Z80 Registers"}),"\n",(0,i.jsx)(n.p,{children:"The compiler uses the standard 8-bit and 16-bit register names, as specified in the official\nZilog Z80 documentation:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["8-bit registers: ",(0,i.jsx)(n.code,{children:"A"}),", ",(0,i.jsx)(n.code,{children:"B"}),", ",(0,i.jsx)(n.code,{children:"C"}),", ",(0,i.jsx)(n.code,{children:"D"}),", ",(0,i.jsx)(n.code,{children:"E"}),", ",(0,i.jsx)(n.code,{children:"H"}),", ",(0,i.jsx)(n.code,{children:"L"}),", ",(0,i.jsx)(n.code,{children:"I"}),", ",(0,i.jsx)(n.code,{children:"R"})]}),"\n",(0,i.jsxs)(n.li,{children:["16-bit registers: ",(0,i.jsx)(n.code,{children:"AF"}),", ",(0,i.jsx)(n.code,{children:"BC"}),", ",(0,i.jsx)(n.code,{children:"DE"}),", ",(0,i.jsx)(n.code,{children:"HL"}),", ",(0,i.jsx)(n.code,{children:"SP"}),", ",(0,i.jsx)(n.code,{children:"IX"}),", ",(0,i.jsx)(n.code,{children:"IY"})]}),"\n",(0,i.jsxs)(n.li,{children:["For the 8-bit halves of the ",(0,i.jsx)(n.code,{children:"IX"})," and ",(0,i.jsx)(n.code,{children:"IY"})," index registers, the compiler uses these names: ",(0,i.jsx)(n.code,{children:"XL"}),", ",(0,i.jsx)(n.code,{children:"XH"}),", ",(0,i.jsx)(n.code,{children:"YL"}),", ",(0,i.jsx)(n.code,{children:"YH"}),". Alternatively, the compiler accepts these names, too: ",(0,i.jsx)(n.code,{children:"IXL"}),", ",(0,i.jsx)(n.code,{children:"IXH"}),", ",(0,i.jsx)(n.code,{children:"IYL"}),", ",(0,i.jsx)(n.code,{children:"IYH"}),". As a kind of exception to general naming conventions, these mixed-case names are also accepted: ",(0,i.jsx)(n.code,{children:"IXl"}),", ",(0,i.jsx)(n.code,{children:"IXh"}),", ",(0,i.jsx)(n.code,{children:"IYl"}),", ",(0,i.jsx)(n.code,{children:"IYh"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"jp-syntax",children:"JP Syntax"}),"\n",(0,i.jsxs)(n.p,{children:["Z80 assemblers use two different syntax constructs for the indirect ",(0,i.jsx)(n.code,{children:"JP"})," statements:"]}),"\n",(0,i.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"; Notation #1"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"jp hl"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"jp ix"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"jp iy"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"; Notation #2"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"jp (hl)"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"jp (ix)"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"jp (iy)"})})]})}),"\n",(0,i.jsx)(n.p,{children:"The Klive Assembler accepts both notations."}),"\n",(0,i.jsx)(n.h2,{id:"alu-operations-syntax",children:"ALU operations syntax"}),"\n",(0,i.jsxs)(n.p,{children:["Three standard ALU operations between ",(0,i.jsx)(n.code,{children:"A"})," and other operands (",(0,i.jsx)(n.code,{children:"ADD"}),", ",(0,i.jsx)(n.code,{children:"ADC"}),", and ",(0,i.jsx)(n.code,{children:"SBC"}),") sign ",(0,i.jsx)(n.code,{children:"A"}),"\nas their first operand:"]}),"\n",(0,i.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"add a,b"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"adc a,(hl)"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"sbc a,e"})})]})}),"\n",(0,i.jsxs)(n.p,{children:["However, the five other standard ALU operations between ",(0,i.jsx)(n.code,{children:"A"})," and other operands (",(0,i.jsx)(n.code,{children:"SUB"}),", ",(0,i.jsx)(n.code,{children:"AND"}),", ",(0,i.jsx)(n.code,{children:"XOR"}),",\n",(0,i.jsx)(n.code,{children:"OR"}),", and ",(0,i.jsx)(n.code,{children:"CP"}),") omit ",(0,i.jsx)(n.code,{children:"A"})," from their notation:"]}),"\n",(0,i.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"sub e"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"and (hl)"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"xor e"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"or c"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"cp b"})})]})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Klive"})," compiler accepts the second group of ALU operations using the explicit ",(0,i.jsx)(n.code,{children:"A"})," operand, too:"]}),"\n",(0,i.jsx)(n.pre,{"data-language":"text","data-theme":"default",children:(0,i.jsxs)(n.code,{"data-language":"text","data-theme":"default",children:[(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"sub a,e"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"and a,(hl)"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"xor a,e"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"or a,c"})}),"\n",(0,i.jsx)(n.span,{className:"line",children:(0,i.jsx)(n.span,{style:{color:"var(--shiki-color-text)"},children:"cp a,b"})})]})})]})}let o={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.a)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)},pageOpts:{filePath:"pages/z80-assembly/z80-instructions.mdx",route:"/z80-assembly/z80-instructions",pageMap:[{kind:"Meta",data:{index:"Introduction","getting-started":"Getting Started","working-with-ide":"Working with the IDE",howto:"How To","z80-assembly":"Klive Z80 Assembler",scripting:"Scripting"}},{kind:"Folder",name:"getting-started",route:"/getting-started",children:[{kind:"Meta",data:{installation:"Installing Klive","first-run":"Running Klive",keyboard:"Using the Keyboard",tapes:"Loading from Tape","save-programs":"Saving Files","creating-project":"Creating a Klive Project"}},{kind:"MdxPage",name:"creating-project",route:"/getting-started/creating-project"},{kind:"MdxPage",name:"first-run",route:"/getting-started/first-run"},{kind:"MdxPage",name:"installation",route:"/getting-started/installation"},{kind:"MdxPage",name:"keyboard",route:"/getting-started/keyboard"},{kind:"MdxPage",name:"save-programs",route:"/getting-started/save-programs"},{kind:"MdxPage",name:"tapes",route:"/getting-started/tapes"}]},{kind:"Folder",name:"howto",route:"/howto",children:[{kind:"Meta",data:{"file-extensions":"Changing default file extensions"}},{kind:"MdxPage",name:"file-extensions",route:"/howto/file-extensions"}]},{kind:"MdxPage",name:"index",route:"/"},{kind:"Folder",name:"scripting",route:"/scripting",children:[{kind:"Meta",data:{overview:"Overview",syntax:"Scripting Syntax"}},{kind:"MdxPage",name:"overview",route:"/scripting/overview"},{kind:"MdxPage",name:"syntax",route:"/scripting/syntax"}]},{kind:"Folder",name:"working-with-ide",route:"/working-with-ide",children:[{kind:"Meta",data:{"project-explorer":"The Project Explorer","editing-code":"Editing Code","run-debug":"Running & Debugging Code",zxb:"ZX BASIC Integration","ide-settings":"IDE Settings",cpu:"The CPU View",ula:"The ULA View",memory:"The Memory View",disassembly:"The Disassembly View",breakpoints:"The Breakpoints View","system-vars":"The System Variables View",basic:"The BASIC Listing",commands:"Interactive Commands","build-system":"The Build System"}},{kind:"MdxPage",name:"basic",route:"/working-with-ide/basic"},{kind:"MdxPage",name:"breakpoints",route:"/working-with-ide/breakpoints"},{kind:"MdxPage",name:"build-system",route:"/working-with-ide/build-system"},{kind:"MdxPage",name:"commands",route:"/working-with-ide/commands"},{kind:"MdxPage",name:"cpu",route:"/working-with-ide/cpu"},{kind:"MdxPage",name:"disassembly",route:"/working-with-ide/disassembly"},{kind:"MdxPage",name:"editing-code",route:"/working-with-ide/editing-code"},{kind:"MdxPage",name:"ide-settings",route:"/working-with-ide/ide-settings"},{kind:"MdxPage",name:"memory",route:"/working-with-ide/memory"},{kind:"MdxPage",name:"project-explorer",route:"/working-with-ide/project-explorer"},{kind:"MdxPage",name:"run-debug",route:"/working-with-ide/run-debug"},{kind:"MdxPage",name:"system-vars",route:"/working-with-ide/system-vars"},{kind:"MdxPage",name:"ula",route:"/working-with-ide/ula"},{kind:"MdxPage",name:"zxb",route:"/working-with-ide/zxb"}]},{kind:"Folder",name:"z80-assembly",route:"/z80-assembly",children:[{kind:"Meta",data:{"z80-assembler":"Assembler Overview","language-structure":"Language Structure",expressions:"Expressions","z80-instructions":"Z80 Instructions",pragmas:"Pragmas",statements:"Assembler Statements",macros:"Macros",structs:"Structs"}},{kind:"MdxPage",name:"expressions",route:"/z80-assembly/expressions"},{kind:"MdxPage",name:"language-structure",route:"/z80-assembly/language-structure"},{kind:"MdxPage",name:"macros",route:"/z80-assembly/macros"},{kind:"MdxPage",name:"pragmas",route:"/z80-assembly/pragmas"},{kind:"MdxPage",name:"statements",route:"/z80-assembly/statements"},{kind:"MdxPage",name:"structs",route:"/z80-assembly/structs"},{kind:"MdxPage",name:"z80-assembler",route:"/z80-assembly/z80-assembler"},{kind:"MdxPage",name:"z80-instructions",route:"/z80-assembly/z80-instructions"}]}],flexsearch:{codeblocks:!0},title:"Accepted Z80 Instructions",headings:c},pageNextRoute:"/z80-assembly/z80-instructions",nextraLayout:d.ZP,themeConfig:t.Z};n.default=(0,l.j)(o)},3952:function(e,n,s){"use strict";s.d(n,{Z:function(){return l}});var i=s(5893),l={logo:(0,i.jsxs)("div",{style:{display:"flex",alignItems:"center"},children:[(0,i.jsx)(e=>{let{width:n=50,height:s=50}=e;return(0,i.jsxs)("svg",{width:n,height:s,viewBox:"0 0 200 200",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[(0,i.jsx)("rect",{width:"100%",height:"100%",fill:"#000"}),(0,i.jsx)("path",{d:"M 200 149 l 0 -20 l -70 70 l 20 0",fill:"#0ff"}),(0,i.jsx)("path",{d:"M 200 129 l 0 -20 l -90 90 l 20 0",fill:"#0f0"}),(0,i.jsx)("path",{d:"M 200 109 l 0 -20 l -110 110 l 20 0",fill:"#ff0"}),(0,i.jsx)("path",{d:"M 200 89 l 0 -20 l -130 130 l 20 0",fill:"#f00"}),(0,i.jsx)("path",{d:"M 0 0 l 200 0 l 0 8 l -200 0",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 0 200 l 200 0 l 0 -8 l -200 0",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 0 0 l 0 200 l 8 0 l 0 -200",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 192 0 l 0 200 l 8 0 l 0 -200",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 40 40 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 40 60 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 40 80 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 40 100 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 40 120 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 40 140 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 60 80 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 80 80 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 100 100 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 120 120 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 140 140 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 100 60 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,i.jsx)("path",{d:"M 120 40 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"})," "]})},{}),(0,i.jsx)("span",{style:{marginLeft:12,fontWeight:"bold",fontSize:"2em"},children:"Klive IDE"})]}),logoLink:"https://dotneteer.github.io/kliveide",editLink:{text:null},feedback:{content:null},project:{link:"https://github.com/dotneteer/kliveide"},sidebar:{autoCollape:!0,defaultMenuCollapseLevel:1},footer:{text:(0,i.jsx)("div",{children:(0,i.jsxs)("span",{children:[(0,i.jsx)("strong",{children:"Klive IDE"})," is an open-source project (MIT) developed by ",(0,i.jsx)("em",{children:"Istvan Novak"})," (2016-2023)."]})})}}},5789:function(){}},function(e){e.O(0,[577,888,774,179],function(){return e(e.s=7555)}),_N_E=e.O()}]);