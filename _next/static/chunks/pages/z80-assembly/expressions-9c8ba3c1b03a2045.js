(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9883],{2253:(e,s,n)=>{"use strict";n.r(s),n.d(s,{default:()=>c,useTOC:()=>d});var r=n(7876),t=n(1807),i=n(8964),l=n(9707);function d(e){let s={code:"code",...(0,l.R)()};return[{value:"Instant and Late Expression Evaluation",id:"instant-and-late-expression-evaluation",depth:2},{value:"Operands",id:"operands",depth:2},{value:"Operators",id:"operators",depth:2},{value:"Conditional Operator",id:"conditional-operator",depth:3},{value:"Binary Bitwise Operators",id:"binary-bitwise-operators",depth:3},{value:"Relational Operators",id:"relational-operators",depth:3},{value:"Shift Operators",id:"shift-operators",depth:3},{value:"Basic Arithmetic Operators",id:"basic-arithmetic-operators",depth:3},{value:"Unary operators",id:"unary-operators",depth:3},{value:"Functions",id:"functions",depth:2},{value:"Parse Time Functions",id:"parse-time-functions",depth:2},{value:(0,r.jsxs)(r.Fragment,{children:["The ",(0,r.jsx)(s.code,{children:"lreg()"})," and ",(0,r.jsx)(s.code,{children:"hreg()"})," Parse Time Functions"]}),id:"the-lreg-and-hreg-parse-time-functions",depth:3},{value:(0,r.jsxs)(r.Fragment,{children:["The ",(0,r.jsx)(s.code,{children:"textof()"})," Parse Time Function"]}),id:"the-textof-parse-time-function",depth:3}]}let c=(0,t.e)(function(e){let{toc:s=d(e)}=e,n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{children:"Expressions"}),"\n",(0,r.jsxs)(n.p,{children:["The Klive Assembler has a rich syntax for evaluating expressions. You can use the same syntax with the ",(0,r.jsx)(n.code,{children:"#if"})," directives, the Z80 instructions, and the compiler statements."]}),"\n",(0,r.jsx)(n.p,{children:"You can use operands and operators just like in most programming languages. Nevertheless, the Klive implementation has its particular way of evaluating expressions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Expressions can be one of these types:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Booleans"})," (",(0,r.jsx)(n.code,{children:"true"})," or ",(0,r.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"integers"})," (64-bit)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"floating point numbers"})," (64-bit precision)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"strings"})," (with 8-bit characters)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The assembler applies implicit conversion whenever it’s possible."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Floating point numbers are truncated to integer values."}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"true"})," Boolean literal is represented with the integer value ",(0,r.jsx)(n.code,{children:"1"}),"; ",(0,r.jsx)(n.code,{children:"false"})," with ",(0,r.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["When the assembler needs a Boolean value, ",(0,r.jsx)(n.code,{children:"0"})," is considered ",(0,r.jsx)(n.code,{children:"false"}),", and any other values as ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"There is no implicit conversion between strings and any numeric values."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When the compiler needs a 16-bit value (for example, ",(0,r.jsx)(n.code,{children:"ld hl,NNNN"}),"), it uses the rightmost 16 bits of an expression’s value."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["When a Z80 operation (for example, ",(0,r.jsx)(n.code,{children:"ld a,NN"}),") needs an 8-bit value, it utilizes the rightmost 8 bits."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Besides the parentheses — ",(0,r.jsx)(n.code,{children:"("})," and ",(0,r.jsx)(n.code,{children:")"})," — you can use square brackets\n— ",(0,r.jsx)(n.code,{children:"["})," and ",(0,r.jsx)(n.code,{children:"]"})," — to group operations and change operator precedence."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{tabIndex:"0","data-language":"z80klive","data-word-wrap":"",children:(0,r.jsxs)(n.code,{children:[(0,r.jsx)(n.span,{children:(0,r.jsx)(n.span,{style:{color:"#6A9955"},children:"; This is valid"})}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#569CD6",fontWeight:"bold"},children:"ld"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"hl"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:",("}),(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"Offset"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4",fontWeight:"bold"},children:"+"}),(0,r.jsx)(n.span,{style:{color:"#4D8061"},children:"#20"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:")"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4",fontWeight:"bold"},children:"*"}),(0,r.jsx)(n.span,{style:{color:"#4D8061"},children:"2"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4",fontWeight:"bold"},children:"+"}),(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"BaseAddr"})]}),"\n",(0,r.jsx)(n.span,{children:" "}),"\n",(0,r.jsx)(n.span,{children:(0,r.jsx)(n.span,{style:{color:"#6A9955"},children:"; Just like this"})}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#569CD6",fontWeight:"bold"},children:"ld"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"hl"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:",["}),(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"Offset"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4",fontWeight:"bold"},children:"+"}),(0,r.jsx)(n.span,{style:{color:"#4D8061"},children:"#20"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"]"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4",fontWeight:"bold"},children:"*"}),(0,r.jsx)(n.span,{style:{color:"#4D8061"},children:"2"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4",fontWeight:"bold"},children:"+"}),(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"BaseAddr"})]})]})}),"\n",(0,r.jsx)(n.h2,{id:s[0].id,children:s[0].value}),"\n",(0,r.jsxs)(n.p,{children:["Depending on the context in which an expression is used, the compiler evaluates it instantly or decides to postpone the evaluation. For example, when you use the ",(0,r.jsx)(n.code,{children:".org"})," pragma, the compiler applies immediate evaluation. Let’s assume this is your code:"]}),"\n",(0,r.jsx)(n.pre,{tabIndex:"0","data-language":"z80klive","data-word-wrap":"",children:(0,r.jsxs)(n.code,{children:[(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"Start"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4",fontWeight:"bold"},children:":"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#C586C0"},children:".org"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#4D8061"},children:"#8000"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4",fontWeight:"bold"},children:"+"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"Later"})]}),"\n",(0,r.jsx)(n.span,{children:(0,r.jsx)(n.span,{style:{color:"#6A9955"},children:"; code body (omitted)"})}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"Later"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4",fontWeight:"bold"},children:":"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#C586C0"},children:".db"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" #"}),(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"ff"})]})]})}),"\n",(0,r.jsxs)(n.p,{children:["The value of ",(0,r.jsx)(n.code,{children:"Later"})," depends on the address in ",(0,r.jsx)(n.code,{children:".org"}),", and the ",(0,r.jsx)(n.code,{children:".org"})," address depends on ",(0,r.jsx)(n.code,{children:"Later"}),", so this declaration could not be adequately resolved; it’s like a deadlock. The ",(0,r.jsx)(n.code,{children:".org"})," pragma would raise an error to avoid such situations, as at the moment of its evaluation, the ",(0,r.jsx)(n.code,{children:"Later"})," symbol’s value is unknown."]}),"\n",(0,r.jsx)(n.p,{children:"For most Z80 instructions, the compiler uses late evaluation:"}),"\n",(0,r.jsx)(n.pre,{tabIndex:"0","data-language":"z80klive","data-word-wrap":"",children:(0,r.jsxs)(n.code,{children:[(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"Start"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4",fontWeight:"bold"},children:":"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#C586C0"},children:".org"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#4D8061"},children:"#6000"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"    "}),(0,r.jsx)(n.span,{style:{color:"#569CD6",fontWeight:"bold"},children:"ld"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"hl"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:",("}),(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"MyVar"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:")"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"    "}),(0,r.jsx)(n.span,{style:{color:"#6A9955"},children:"; code body omitted"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"    "}),(0,r.jsx)(n.span,{style:{color:"#569CD6",fontWeight:"bold"},children:"ret"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"MyVar"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4",fontWeight:"bold"},children:":"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#C586C0"},children:".defs"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#4D8061"},children:"2"})]})]})}),"\n",(0,r.jsxs)(n.p,{children:["When the compiler reaches the ",(0,r.jsx)(n.code,{children:"ld hl,(MyVar)"})," instruction, it does not know the value of ",(0,r.jsx)(n.code,{children:"MyVar"}),". Nonetheless, it does not stop with an error but generates the machine code for ",(0,r.jsx)(n.code,{children:"ld hl,(0)"}),", namely #21, #00, and #00;\ntakes a note (it is called a ",(0,r.jsx)(n.em,{children:"fixup"}),") when ",(0,r.jsx)(n.code,{children:"MyVal"})," gets a value, the two #00 bytes generated at address #6001\nshould be updated accordingly."]}),"\n",(0,r.jsx)(n.h2,{id:s[1].id,children:s[1].value}),"\n",(0,r.jsx)(n.p,{children:"You can use the following operands in expressions:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Boolean, Decimal and hexadecimal literals"}),"\n",(0,r.jsx)(n.li,{children:"Character literals"}),"\n",(0,r.jsx)(n.li,{children:"Identifiers"}),"\n",(0,r.jsx)(n.li,{children:"The current assembly address"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": String literals cannot be used as operands."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:s[2].id,children:s[2].value}),"\n",(0,r.jsx)(n.p,{children:"You can use about a dozen operators, including unary, binary, and ternary. In this section, you will learn about them. They will be introduced in descending order of their precedence."}),"\n",(0,r.jsx)(n.h3,{id:s[3].id,children:s[3].value}),"\n",(0,r.jsx)(n.p,{children:"The assembler supports using only one ternary operator, the conditional operator:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"conditional-expression"})," ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"?"})})," ",(0,r.jsx)(n.em,{children:"true-value"})," ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:":"})})," ",(0,r.jsx)(n.em,{children:"false-value"})]}),"\n",(0,r.jsx)(n.p,{children:"This operation results in -1:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"2 > 3 ? 2 : -1"})}),"\n",(0,r.jsxs)(n.p,{children:["When the ",(0,r.jsx)(n.em,{children:"conditional-expression"})," evaluates to true, the operation results\nin ",(0,r.jsx)(n.em,{children:"true-value"}),"; otherwise in ",(0,r.jsx)(n.em,{children:"false-value"}),"."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": Conditional expressions are evaluated from right to left, unlike binary operators, which use left-to-right evaluation."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:s[4].id,children:s[4].value}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operator token"}),(0,r.jsx)(n.th,{children:"Precedence"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"`"}),(0,r.jsx)(n.td,{children:"`"}),(0,r.jsx)(n.td,{children:"1"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"^"})}),(0,r.jsx)(n.td,{children:"2"}),(0,r.jsx)(n.td,{children:"Bitwise XOR"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"&"})}),(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"Bitwise AND — string concatenation with new line"})]})]})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": The ",(0,r.jsx)(n.code,{children:"&"})," operator can be applied to two strings. If you do so, the compiler concatenates the two strings and puts a ",(0,r.jsx)(n.code,{children:"\\r\\n"})," (new line) character pair between them."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:s[5].id,children:s[5].value}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operator token"}),(0,r.jsx)(n.th,{children:"Precedence"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"=="})}),(0,r.jsx)(n.td,{children:"4"}),(0,r.jsx)(n.td,{children:"Equality"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"!="})}),(0,r.jsx)(n.td,{children:"4"}),(0,r.jsx)(n.td,{children:"Non-equality"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<"})}),(0,r.jsx)(n.td,{children:"5"}),(0,r.jsx)(n.td,{children:"Less than"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<="})}),(0,r.jsx)(n.td,{children:"5"}),(0,r.jsx)(n.td,{children:"Less than or equal"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:">"})}),(0,r.jsx)(n.td,{children:"5"}),(0,r.jsx)(n.td,{children:"Greater than"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:">="})}),(0,r.jsx)(n.td,{children:"5"}),(0,r.jsx)(n.td,{children:"Greater than or equal"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:s[6].id,children:s[6].value}),"\n",(0,r.jsx)(n.p,{children:"The bits of the left operand are shifted by the number of bits given by the right operand."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operator token"}),(0,r.jsx)(n.th,{children:"Precedence"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<<"})}),(0,r.jsx)(n.td,{children:"6"}),(0,r.jsx)(n.td,{children:"Shift left"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:">>"})}),(0,r.jsx)(n.td,{children:"6"}),(0,r.jsx)(n.td,{children:"Shift right"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:s[7].id,children:s[7].value}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operator token"}),(0,r.jsx)(n.th,{children:"Precedence"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"+"})}),(0,r.jsx)(n.td,{children:"7"}),(0,r.jsx)(n.td,{children:"Addition — string concatenation"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"-"})}),(0,r.jsx)(n.td,{children:"7"}),(0,r.jsx)(n.td,{children:"Subtraction"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"*"})}),(0,r.jsx)(n.td,{children:"8"}),(0,r.jsx)(n.td,{children:"Multiplication"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/"})}),(0,r.jsx)(n.td,{children:"8"}),(0,r.jsx)(n.td,{children:"Division"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"%"})}),(0,r.jsx)(n.td,{children:"8"}),(0,r.jsx)(n.td,{children:"Modulo calculation"})]})]})]}),"\n",(0,r.jsx)(n.h1,{children:"Min-Max operators"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operator token"}),(0,r.jsx)(n.th,{children:"Precedence"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"<?"})}),(0,r.jsx)(n.td,{children:"9"}),(0,r.jsx)(n.td,{children:"Minimum of the left and right operand"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:">?"})}),(0,r.jsx)(n.td,{children:"9"}),(0,r.jsx)(n.td,{children:"Maximum of the left and right operand"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:s[8].id,children:s[8].value}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operator token"}),(0,r.jsx)(n.th,{children:"Precedence"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"+"})}),(0,r.jsx)(n.td,{children:"10"}),(0,r.jsx)(n.td,{children:"Unary plus"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"-"})}),(0,r.jsx)(n.td,{children:"10"}),(0,r.jsx)(n.td,{children:"Unary minus"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"~"})}),(0,r.jsx)(n.td,{children:"10"}),(0,r.jsx)(n.td,{children:"Unary bitwise NOT"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"!"})}),(0,r.jsx)(n.td,{children:"10"}),(0,r.jsx)(n.td,{children:"Unary logical NOT"})]})]})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Do not forget, you can change the default precedence with ",(0,r.jsx)(n.code,{children:"("})," and ",(0,r.jsx)(n.code,{children:")"}),", or with ",(0,r.jsx)(n.code,{children:"["})," and ",(0,r.jsx)(n.code,{children:"]"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:s[9].id,children:s[9].value}),"\n",(0,r.jsxs)(n.p,{children:["The Z80 assembler provides a number of functions that can have zero, one, or more arguments.\nSeveral functions (for example as ",(0,r.jsx)(n.code,{children:"rnd()"}),") have overloads with different signatures. Each\nfunction has a name and a parameter list wrapped into parentheses, the parameters are separated\nby a comma. Of course, parameters can be expressions, and they may invoke other functions, too.\nHere are a few samples:"]}),"\n",(0,r.jsx)(n.pre,{tabIndex:"0","data-language":"z80klive","data-word-wrap":"",children:(0,r.jsxs)(n.code,{children:[(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"length"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"("}),(0,r.jsx)(n.span,{style:{color:"#CD3131"},children:'"Hello"'}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4",fontWeight:"bold"},children:"+"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#CD3131"},children:'" world"'}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:")"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"max"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"("}),(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"value1"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:", "}),(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"value2"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:")"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"sin"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"("}),(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"pi"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"()"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4",fontWeight:"bold"},children:"/"}),(0,r.jsx)(n.span,{style:{color:"#4D8061"},children:"2"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:")"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"sqrt"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"("}),(0,r.jsx)(n.span,{style:{color:"#B5890F"},children:"pear"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4",fontWeight:"bold"},children:"+"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#4D8061"},children:"3.0"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:")"})]})]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Klive"})," support these function signatures:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Signature"}),(0,r.jsx)(n.th,{children:"Value"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"abs(integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsxs)(n.td,{children:["The absolute value of an ",(0,r.jsx)(n.em,{children:"integer"})," number."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"abs(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsxs)(n.td,{children:["The absolute value of a ",(0,r.jsx)(n.em,{children:"float"})," number."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"acos(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The angle whose cosine is the specified number."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"asin(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The angle whose sine is the specified number."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"atan(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The angle whose tangent is the specified number."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"atan2(float, float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The angle whose tangent is the quotient of two specified numbers."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"attr(integer, integer, boolean, boolean)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsxs)(n.td,{children:["Retrieves the color attribute byte value defined by ",(0,r.jsx)(n.code,{children:"ink"})," (first argument, 0 to 7), ",(0,r.jsx)(n.code,{children:"paper"})," (second argument, 0 to 7), ",(0,r.jsx)(n.code,{children:"bright"})," (third argument, 0 - non-zero), and ",(0,r.jsx)(n.code,{children:"flash"})," (fourth argument, 0 - non-zero). The ",(0,r.jsx)(n.code,{children:"bright"})," and ",(0,r.jsx)(n.code,{children:"flash"})," values are optional."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"attraddr(integer, integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:"Returns the memory address of the byte specified screen attribute in the given line (first argument, from top to bottom, 0-192) and column (second argument, from left to right, 0-255)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bright(boolean)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:"Retrieves the bright flag defined by the attribute (0 - non-zero). It can be ORed to create a color attribute value."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"ceiling(float"}),")"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The smallest integral value greater than or equal to the specified number."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"cos(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The cosine of the specified angle."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"cosh(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The hyperbolic cosine of the specified angle."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"exp(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"e"})," raised to the specified power."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"fill(string, integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"Creates a new string by concatenating the specified one with the given times."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"flash(boolean)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:"Retrieves the flash flag defined by the argument (0 - non-zero). It can be ORed to create a color attribute value."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"floor(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The largest integer less than or equal to the specified number."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"frac(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The fractional part of the specified number."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"high(integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:"The leftmost 8 bits (MSB) of a 16-bit integer number."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ink(integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:"Retrieves the three ink bits defined by the color argument (0 to 7). It can be ORed to create a color attribute value."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"int(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:"The integer part of the specified number."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"lcase(string)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"The lowercase version of the input string."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"left(string, integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"Takes the leftmost characters of the string with the length specified."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"len(string)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:"The length of the specified string."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"length(string)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:"The length of the specified string."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"log(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsxs)(n.td,{children:["The natural (base ",(0,r.jsx)(n.strong,{children:"e"}),") logarithm of a specified number."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"log(float, float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The logarithm of a specified number in a specified base."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"log10(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The base 10 logarithm of a specified number."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"low(integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:"The rightmost 8 bits (LSB) of an integer number."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"lowercase(string)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"The lowercase version of the input string."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"max(integer, integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsxs)(n.td,{children:["The larger of two ",(0,r.jsx)(n.em,{children:"integer"})," numbers."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"max(float, float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsxs)(n.td,{children:["The larger of two ",(0,r.jsx)(n.em,{children:"float"})," numbers."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"min(integer, integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsxs)(n.td,{children:["The smaller of two ",(0,r.jsx)(n.em,{children:"integer"})," numbers."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"min(float, float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsxs)(n.td,{children:["The smaller of two ",(0,r.jsx)(n.em,{children:"float"})," numbers."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"nat()"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsxs)(n.td,{children:["Represents the natural logarithmic base, specified by the constant, ",(0,r.jsx)(n.strong,{children:"e"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"paper(integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:"retrieves the three paper bits defined by the argument (0 to 7). It can be ORed to create a color attribute value."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pi()"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsxs)(n.td,{children:["Represents the ratio of the circumference of a circle to its diameter, specified by the constant, ",(0,r.jsx)(n.strong,{children:"π"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"pow(float, float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The specified number raised to the specified power."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"right(string, integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"Takes the rightmost characters of the string with the length specified."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"round(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsxs)(n.td,{children:["Rounds a ",(0,r.jsx)(n.em,{children:"float"})," value to the nearest integral value."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"round(float, int)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsxs)(n.td,{children:["Rounds a ",(0,r.jsx)(n.em,{children:"float"})," value to a specified number of fractional digits."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rnd()"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:"Returns a random 32-bit number."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"rnd(integer, integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:"Returns a random 32-bit integer between the first and second number."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"scraddr(integer, integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:"Retrieves the memory address of the screen pixel byte in the specified line (first argument, from top to bottom, 0-192) and in the specified column (second argument, from left to right, 0-255)."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sign(integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsxs)(n.td,{children:["Returns an integer that indicates the sign of an ",(0,r.jsx)(n.em,{children:"integer"})," number."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sign(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsxs)(n.td,{children:["Returns an integer that indicates the sign of a ",(0,r.jsx)(n.em,{children:"float"})," number."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sin(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The sine of the specified angle."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sinh(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The hyperbolic sine of the specified angle."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sqrt(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The square root of a specified number."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str(bool)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"Convert the input value to a string."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str(integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"Convert the input value to a string."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"str(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"Convert the input value to a string."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"substr(string, integer, integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"Takes a substring of the specified string from the given position (zero-based) and length."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"tan(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The tangent of the specified angle."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"tanh(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"float"})}),(0,r.jsx)(n.td,{children:"The hyperbolic tangent of the specified angle."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"truncate(float)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:"Calculates the integral part of a specified number."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ucase(string)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"The uppercase version of the input string."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"uppercase(string)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"string"})}),(0,r.jsx)(n.td,{children:"The uppercase version of the input string."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"word(integer)"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"integer"})}),(0,r.jsx)(n.td,{children:"The rightmost 16 bits of an integer number."})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["Functions have the same precedence as the unary operators (such as the unary ",(0,r.jsx)(n.code,{children:"+"})," and ",(0,r.jsx)(n.code,{children:"-"}),")."]}),"\n",(0,r.jsx)(n.h2,{id:s[10].id,children:s[10].value}),"\n",(0,r.jsxs)(n.p,{children:["The compiler provides a construct, ",(0,r.jsx)(n.em,{children:"parse time functions"}),". These functions can receive a Z80 assembly language token and transform them into other language constructs. As the name suggests, these functions run in the parsing phase before the compiler emits code."]}),"\n",(0,r.jsx)(n.h3,{id:s[11].id,children:s[11].value}),"\n",(0,r.jsxs)(n.p,{children:["These functions accept a 16-bit register pair token (",(0,r.jsx)(n.strong,{children:"BC"}),", ",(0,r.jsx)(n.strong,{children:"DE"}),", ",(0,r.jsx)(n.strong,{children:"HL"}),", ",(0,r.jsx)(n.strong,{children:"IX"}),", or ",(0,r.jsx)(n.strong,{children:"IY"}),") and retrieve the lower\nor higher 8-bit register half of their input. Here is a sample code snippet:"]}),"\n",(0,r.jsx)(n.pre,{tabIndex:"0","data-language":"z80klive","data-word-wrap":"",children:(0,r.jsxs)(n.code,{children:[(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#569CD6",fontWeight:"bold"},children:"ld"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"a"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:","}),(0,r.jsx)(n.span,{style:{color:"#4FC1FF"},children:"lreg"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"("}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"bc"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:")"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#569CD6",fontWeight:"bold"},children:"ld"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"c"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:","}),(0,r.jsx)(n.span,{style:{color:"#4FC1FF"},children:"hreg"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"("}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"hl"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:")"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#569CD6",fontWeight:"bold"},children:"ld"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"a"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:","}),(0,r.jsx)(n.span,{style:{color:"#4FC1FF"},children:"lreg"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"("}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"ix"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:")"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#569CD6",fontWeight:"bold"},children:"ld"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"l"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:","}),(0,r.jsx)(n.span,{style:{color:"#4FC1FF"},children:"hreg"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"("}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"de"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:")"})]})]})}),"\n",(0,r.jsx)(n.p,{children:"The compiler sees as if you wrote this:"}),"\n",(0,r.jsx)(n.pre,{tabIndex:"0","data-language":"z80klive","data-word-wrap":"",children:(0,r.jsxs)(n.code,{children:[(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#569CD6",fontWeight:"bold"},children:"ld"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"a"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:","}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"c"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#569CD6",fontWeight:"bold"},children:"ld"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"c"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:","}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"h"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#569CD6",fontWeight:"bold"},children:"ld"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"a"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:","}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"ixl"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#569CD6",fontWeight:"bold"},children:"ld"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"l"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:","}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"d"})]})]})}),"\n",(0,r.jsx)(n.h3,{id:s[12].id,children:s[12].value}),"\n",(0,r.jsxs)(n.p,{children:["You can use ",(0,r.jsx)(n.code,{children:"textof()"}),", which accepts these kinds of tokens: mnemonic, register, register indirection, C port, or condition. This function translates these tokens into uppercase string constants that represent them.\nHere is a sample:"]}),"\n",(0,r.jsx)(n.pre,{tabIndex:"0","data-language":"z80klive","data-word-wrap":"",children:(0,r.jsxs)(n.code,{children:[(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#C586C0"},children:".dm"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#4FC1FF"},children:"textof"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"("}),(0,r.jsx)(n.span,{style:{color:"#569CD6",fontWeight:"bold"},children:"ldir"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:")"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#C586C0"},children:".dm"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#4FC1FF"},children:"textof"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"("}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"bc"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:")"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#C586C0"},children:".dm"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#4FC1FF"},children:"textof"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"(("}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"de"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"))"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#C586C0"},children:".dm"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#4FC1FF"},children:"textof"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"(("}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"c"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"))"})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#C586C0"},children:".dm"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#4FC1FF"},children:"textof"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:"("}),(0,r.jsx)(n.span,{style:{color:"#2B7CB3"},children:"nz"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:")"})]})]})}),"\n",(0,r.jsx)(n.p,{children:"The compiler sees as if you wrote this code:"}),"\n",(0,r.jsx)(n.pre,{tabIndex:"0","data-language":"z80klive","data-word-wrap":"",children:(0,r.jsxs)(n.code,{children:[(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#C586C0"},children:".dm"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#CD3131"},children:'"LDIR"'})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#C586C0"},children:".dm"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#CD3131"},children:'"BC"'})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#C586C0"},children:".dm"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#CD3131"},children:'"(DE)"'})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#C586C0"},children:".dm"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#CD3131"},children:'"(C)"'})]}),"\n",(0,r.jsxs)(n.span,{children:[(0,r.jsx)(n.span,{style:{color:"#C586C0"},children:".dm"}),(0,r.jsx)(n.span,{style:{color:"#A4A4A4"},children:" "}),(0,r.jsx)(n.span,{style:{color:"#CD3131"},children:'"NZ"'})]})]})})]})},"/z80-assembly/expressions",{filePath:"pages/z80-assembly/expressions.mdx",timestamp:1752582908e3,pageMap:i.O,frontMatter:{},title:"Expressions"},"undefined"==typeof RemoteContent?d:RemoteContent.useTOC)},3702:(e,s,n)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/z80-assembly/expressions",function(){return n(2253)}])},8964:(e,s,n)=>{"use strict";n.d(s,{O:()=>r});let r=[{data:{index:"Introduction","getting-started":"Getting Started","working-with-ide":"Working with the IDE",howto:"How To","z80-assembly":"Klive Z80 Assembler",contribute:"Contribute",scripting:"Scripting","commands-reference":"Commands Reference","machine-types":"Machine Types"}},{name:"commands-reference",route:"/commands-reference",frontMatter:{sidebarTitle:"Commands Reference"}},{name:"contribute",route:"/contribute",children:[{data:{"get-source":"Get the source code","improve-docs":"Improve the documentation"}},{name:"get-source",route:"/contribute/get-source",frontMatter:{sidebarTitle:"Get Source"}},{name:"improve-docs",route:"/contribute/improve-docs",frontMatter:{sidebarTitle:"Improve Docs"}}]},{name:"getting-started",route:"/getting-started",children:[{data:{installation:"Installing Klive","first-run":"Running Klive",keyboard:"Using the Keyboard",tapes:"Loading from Tape","save-programs":"Saving Files","creating-project":"Creating a Klive Project"}},{name:"creating-project",route:"/getting-started/creating-project",frontMatter:{sidebarTitle:"Creating Project"}},{name:"first-run",route:"/getting-started/first-run",frontMatter:{sidebarTitle:"First Run"}},{name:"installation",route:"/getting-started/installation",frontMatter:{sidebarTitle:"Installation"}},{name:"keyboard",route:"/getting-started/keyboard",frontMatter:{sidebarTitle:"Keyboard"}},{name:"save-programs",route:"/getting-started/save-programs",frontMatter:{sidebarTitle:"Save Programs"}},{name:"tapes",route:"/getting-started/tapes",frontMatter:{sidebarTitle:"Tapes"}}]},{name:"howto",route:"/howto",children:[{data:{"ide-startup":"IDE startup options",diagnostics:"Diagnostics",shortcuts:"Changing keyboard shortcuts","file-extensions":"Changing default file extensions","instant-screen":"Using the Instant Screen","always-on-top":"Keeping the Emulator always on top","measure-t-states":"Measuring T-states"}},{name:"always-on-top",route:"/howto/always-on-top",frontMatter:{sidebarTitle:"Always on Top"}},{name:"diagnostics",route:"/howto/diagnostics",frontMatter:{sidebarTitle:"Diagnostics"}},{name:"file-extensions",route:"/howto/file-extensions",frontMatter:{sidebarTitle:"File Extensions"}},{name:"ide-startup",route:"/howto/ide-startup",frontMatter:{sidebarTitle:"Ide Startup"}},{name:"instant-screen",route:"/howto/instant-screen",frontMatter:{sidebarTitle:"Instant Screen"}},{name:"measure-t-states",route:"/howto/measure-t-states",frontMatter:{sidebarTitle:"Measure T States"}},{name:"shortcuts",route:"/howto/shortcuts",frontMatter:{sidebarTitle:"Shortcuts"}}]},{name:"index",route:"/",frontMatter:{sidebarTitle:"Index"}},{name:"machine-types",route:"/machine-types",frontMatter:{sidebarTitle:"Machine Types"}},{name:"project-templates",route:"/project-templates",frontMatter:{sidebarTitle:"Project Templates"}},{name:"scripting",route:"/scripting",children:[{data:{overview:"Overview",syntax:"Scripting Syntax"}},{name:"overview",route:"/scripting/overview",frontMatter:{sidebarTitle:"Overview"}},{name:"syntax",route:"/scripting/syntax",frontMatter:{sidebarTitle:"Syntax"}}]},{name:"working-with-ide",route:"/working-with-ide",children:[{data:{"project-explorer":"The Project Explorer","editing-code":"Editing Code","run-debug":"Running & Debugging Code","exporting-code":"Exporting Code",zxb:"ZXBASIC Integration",sjasmp:"SJASMPLUS Integration","ide-settings":"IDE Settings",cpu:"The CPU View",ula:"The ULA View",memory:"The Memory View",disassembly:"The Disassembly View",breakpoints:"The Breakpoints View","system-vars":"The System Variables View",basic:"The BASIC Listing",commands:"Interactive Commands","build-system":"The Build System"}},{name:"basic",route:"/working-with-ide/basic",frontMatter:{sidebarTitle:"Basic"}},{name:"breakpoints",route:"/working-with-ide/breakpoints",frontMatter:{sidebarTitle:"Breakpoints"}},{name:"build-system",route:"/working-with-ide/build-system",frontMatter:{sidebarTitle:"Build System"}},{name:"commands",route:"/working-with-ide/commands",frontMatter:{sidebarTitle:"Commands"}},{name:"cpu",route:"/working-with-ide/cpu",frontMatter:{sidebarTitle:"Cpu"}},{name:"disassembly",route:"/working-with-ide/disassembly",frontMatter:{sidebarTitle:"Disassembly"}},{name:"editing-code",route:"/working-with-ide/editing-code",frontMatter:{sidebarTitle:"Editing Code"}},{name:"exporting-code",route:"/working-with-ide/exporting-code",frontMatter:{sidebarTitle:"Exporting Code"}},{name:"ide-settings",route:"/working-with-ide/ide-settings",frontMatter:{sidebarTitle:"Ide Settings"}},{name:"memory",route:"/working-with-ide/memory",frontMatter:{sidebarTitle:"Memory"}},{name:"project-explorer",route:"/working-with-ide/project-explorer",frontMatter:{sidebarTitle:"Project Explorer"}},{name:"run-debug",route:"/working-with-ide/run-debug",frontMatter:{sidebarTitle:"Run Debug"}},{name:"sjasmp",route:"/working-with-ide/sjasmp",frontMatter:{sidebarTitle:"Sjasmp"}},{name:"system-vars",route:"/working-with-ide/system-vars",frontMatter:{sidebarTitle:"System Vars"}},{name:"ula",route:"/working-with-ide/ula",frontMatter:{sidebarTitle:"Ula"}},{name:"zxb",route:"/working-with-ide/zxb",frontMatter:{sidebarTitle:"Zxb"}}]},{name:"z80-assembly",route:"/z80-assembly",children:[{data:{"z80-assembler":"Assembler Overview","language-structure":"Language Structure",directives:"Directives",expressions:"Expressions","z80-instructions":"Z80 Instructions",pragmas:"Pragmas",statements:"Assembler Statements",macros:"Macros",structs:"Structs"}},{name:"directives",route:"/z80-assembly/directives",frontMatter:{sidebarTitle:"Directives"}},{name:"expressions",route:"/z80-assembly/expressions",frontMatter:{sidebarTitle:"Expressions"}},{name:"language-structure",route:"/z80-assembly/language-structure",frontMatter:{sidebarTitle:"Language Structure"}},{name:"macros",route:"/z80-assembly/macros",frontMatter:{sidebarTitle:"Macros"}},{name:"pragmas",route:"/z80-assembly/pragmas",frontMatter:{sidebarTitle:"Pragmas"}},{name:"statements",route:"/z80-assembly/statements",frontMatter:{sidebarTitle:"Statements"}},{name:"structs",route:"/z80-assembly/structs",frontMatter:{sidebarTitle:"Structs"}},{name:"z80-assembler",route:"/z80-assembly/z80-assembler",frontMatter:{sidebarTitle:"Z80 Assembler"}},{name:"z80-instructions",route:"/z80-assembly/z80-instructions",frontMatter:{sidebarTitle:"Z80 Instructions"}}]}]}},e=>{e.O(0,[1807,636,6593,8792],()=>e(e.s=3702)),_N_E=e.O()}]);