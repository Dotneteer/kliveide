(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[206],{9601:function(e,s,l){(window.__NEXT_P=window.__NEXT_P||[]).push(["/z80-assembly/structs",function(){return l(1682)}])},1682:function(e,s,l){"use strict";l.r(s),l.d(s,{__toc:function(){return c}});var n=l(5893),t=l(2673),i=l(7758),a=l(3911);l(9128);var r=l(2643);let c=[{depth:2,value:"Understanding Structures",id:"understanding-structures"},{depth:2,value:"Structure Definition",id:"structure-definition"},{depth:2,value:"Labels and Field Names",id:"labels-and-field-names"},{depth:2,value:"Structure initialization",id:"structure-initialization"},{depth:2,value:"Field Initializers",id:"field-initializers"},{depth:2,value:"Fluent Structure Initialization",id:"fluent-structure-initialization"}];function _createMdxContent(e){let s=Object.assign({h1:"h1",p:"p",code:"code",h2:"h2",pre:"pre",span:"span",em:"em",strong:"strong",blockquote:"blockquote"},(0,r.a)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{children:"Structures"}),"\n",(0,n.jsxs)(s.p,{children:["Klive allows you to use structure definitions and placements in your Z80 programs. If you know the ",(0,n.jsx)(s.code,{children:"struct"})," construct from C, C++, or C#, the concept in Z80 is only partly similar."]}),"\n",(0,n.jsx)(s.h2,{id:"understanding-structures",children:"Understanding Structures"}),"\n",(0,n.jsx)(s.p,{children:"In Klive Assembler, a structure definition is a placeholder that defines a byte pattern like this:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Object2D: .struct"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    .defw 0"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    .defw 0"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    .defb 1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    .defb 1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .ends"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["This definition says that ",(0,n.jsx)(s.code,{children:"Object2D"})," is a structure of six bytes (two 16-bit words and two 8-bit bytes) with the following bytes emitted: #00, #00, #00, #00, #01, #01. Whenever you place a structure declaration in a program, just like in this sample, the assembler will emit the bytes you specified in the ",(0,n.jsx)(s.code,{children:".struct"})," definition:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  Object2D() ; emits #00, #00, #00, #00, #01, #01"})})})}),"\n",(0,n.jsxs)(s.p,{children:["As you can see, six subsequent bytes do not tell enough about the semantics of ",(0,n.jsx)(s.code,{children:"Object2D"}),". When we created this structure, the original concept was to use two 16-bit numbers to specify the X and Y coordinates of the object, plus two 8-bit numbers to describe its horizontal and vertical velocity. With ",(0,n.jsx)(s.em,{children:"field definitions"})," (see ",(0,n.jsx)(s.code,{children:"X"}),", ",(0,n.jsx)(s.code,{children:"Y"}),", ",(0,n.jsx)(s.code,{children:"DX"}),", and ",(0,n.jsx)(s.code,{children:"DY"}),"), the meaning of ",(0,n.jsx)(s.code,{children:"Object2D"})," is more straightforward than it was before:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Object2D: .struct"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    X: .defw 0"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    Y: .defw 0"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    DX: .defb 1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    DY: .defb 1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .ends"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Of course, we would like to initialize objects with different states. With ",(0,n.jsx)(s.em,{children:"field initializers"}),", we can define structures with initial states that are different from the ",(0,n.jsx)(s.code,{children:".struct"})," definition:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Apple: Object2D()"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  X -> .defw 100"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  Y -> .defw 100"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Pear: Object2D()"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  DX -> .defb -1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  DY -> .defb -1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ; Some other code"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ; ..."})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld hl,Apple"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld de,Pear"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["In this sample, the ",(0,n.jsx)(s.code,{children:"Apple"})," label (that the code later loads into ",(0,n.jsx)(s.strong,{children:"HL"}),") points to an ",(0,n.jsx)(s.code,{children:"Object2D"})," declaration that holds 100 in its X and Y values. Another label, ",(0,n.jsx)(s.code,{children:"Pear"}),", points to a different instance of ",(0,n.jsx)(s.code,{children:"Object2D"})," (later, the code loads that address into ",(0,n.jsx)(s.strong,{children:"DE"}),"). ",(0,n.jsx)(s.code,{children:"Pear"})," has a converse velocity compared to ",(0,n.jsx)(s.code,{children:"Apple"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["The Assembler allows you to initialize structures with any pragma that emits bytes to the assembly output. For example, the following code snippet sets a new ",(0,n.jsx)(s.code,{children:"Object2D"})," structure in a particular way:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Banana: Object2D()"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  -> .defb 10, 1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  -> .defb 12, 2"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  DX -> .defb 2, 2"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["The first ",(0,n.jsx)(s.code,{children:".defb"})," pragma (right after the first ",(0,n.jsx)(s.code,{children:"->"}),") emits two bytes, 10 and 1, respectively, and it sets the X field to 266 (10 + 1",(0,n.jsxs)(s.em,{children:["256). The second ",(0,n.jsx)(s.code,{children:".defb"})," sets Y to 524 (12 * 2"]}),"256). The initialization of DX (",(0,n.jsx)(s.code,{children:"DX -> .defb 2, 2"}),") emits two bytes and sets both ",(0,n.jsx)(s.code,{children:"DX"})," and ",(0,n.jsx)(s.code,{children:"DY"})," to 2."]}),"\n",(0,n.jsx)(s.h2,{id:"structure-definition",children:"Structure Definition"}),"\n",(0,n.jsxs)(s.p,{children:["You can define structure between the ",(0,n.jsx)(s.code,{children:".struct"})," and ",(0,n.jsx)(s.code,{children:".ends"}),"  statements. Each structure must have a unique name to declare with a label. The compiler accepts all of these definitions:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; Version #1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"MyStruct .struct"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ; ..."})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .ends"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; Version #2"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"MyStruct: .struct"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ; ..."})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .ends"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; Version #3"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"MyStruct"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .struct"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ; ..."})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .ends"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; Version#4"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"MyStruct:"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .struct"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ; ..."})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .ends"})})]})}),"\n",(0,n.jsx)(s.p,{children:"Nonetheless, it raises an error if you do not name the structure:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".struct ; ERROR: .struct must have a name"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; ..."})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".ends"})})]})}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Note"}),": The assembler accepts the following alternative keywords for ",(0,n.jsx)(s.code,{children:".struct"}),": ",(0,n.jsx)(s.code,{children:".STRUCT"}),", ",(0,n.jsx)(s.code,{children:"struct"}),", or ",(0,n.jsx)(s.code,{children:"STRUCT"}),". Similarly, ",(0,n.jsx)(s.code,{children:".ends"})," has these aliases, too: ",(0,n.jsx)(s.code,{children:".ENDS"}),", ",(0,n.jsx)(s.code,{children:"ends"}),", and ",(0,n.jsx)(s.code,{children:"ENDS"}),". Though you can define an empty structure, there is no practical reason to do so."]}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["In the body of the structure, you can use only one of these byte-emitter pragmas: ",(0,n.jsx)(s.code,{children:".defb"}),", ",(0,n.jsx)(s.code,{children:".defw"}),", ",(0,n.jsx)(s.code,{children:".defm"}),", ",(0,n.jsx)(s.code,{children:".defn"}),", ",(0,n.jsx)(s.code,{children:".defc"}),", ",(0,n.jsx)(s.code,{children:".defs"}),", ",(0,n.jsx)(s.code,{children:".fillb"}),", ",(0,n.jsx)(s.code,{children:".fillw"}),", ",(0,n.jsx)(s.code,{children:".defg"}),",  or ",(0,n.jsx)(s.code,{children:".defgx"}),". If you try to use any other construct, the compiler raises an error message."]}),"\n",(0,n.jsx)(s.p,{children:"As you saw earlier, you can specify field labels within the structure body. The assembler is flexible: you can omit field labels or even use multiple labels for a single field:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Object2D_A: .struct"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  Coords:"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    X: .defw 0"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    Y: .defw 0"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  Velocity:"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    .defb 1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    .defb 1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .ends"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Here, ",(0,n.jsx)(s.code,{children:"Object2D_A"})," has two field name for the first ",(0,n.jsx)(s.code,{children:".defw"})," field, ",(0,n.jsx)(s.code,{children:"Coords"}),", and ",(0,n.jsx)(s.code,{children:"X"}),", respectively. The last ",(0,n.jsx)(s.code,{children:".defb"})," does not have its field name, unlike the one before, ",(0,n.jsx)(s.code,{children:"Velocity"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:"labels-and-field-names",children:"Labels and Field Names"}),"\n",(0,n.jsxs)(s.p,{children:["The label assigned to the ",(0,n.jsx)(s.code,{children:".struct"})," definition has a dual role. When used in a structure initialization (for example, as ",(0,n.jsx)(s.code,{children:"Object2D"})," is utilized in the ",(0,n.jsx)(s.code,{children:"Object2D()"})," initializer), it identifies the structure. Nonetheless, you can use the label name in Z80 instructions, too. In this case, the label's value is the size of the structure. For example, these instructions are equivalent, as the size of the ",(0,n.jsx)(s.code,{children:"Object2D"})," structure is six bytes:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld a,Object2D ; Size of Object2D"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; ..."})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld a,6 ; "})})]})}),"\n",(0,n.jsxs)(s.p,{children:["You can allocate a memory block for 100 uninitialized instances of ",(0,n.jsx)(s.code,{children:"Object2D"})," with this pragma:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"My100Objects:"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .defs 100 * Object2D"})})]})}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Note"}),": You cannot assign a label to the ",(0,n.jsx)(s.code,{children:".ends"})," statement. If you do, the compiler throws an error."]}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["Labels assigned to the body of the ",(0,n.jsx)(s.code,{children:".struct"})," definition are used as field names. You can use them only with the structure name:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Object2D: .struct"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    X: .defw 0"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    Y: .defw 0"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    DX: .defb 1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    DY: .defb 1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .ends"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Apple: Object2D()"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ; ..."})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld hl,Apple + Object2D.DX"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld a,(hl)"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Field label values contain the offset of the particular field from the beginning of the structure. Thus, the last two instructions in the code above load the content of the ",(0,n.jsx)(s.code,{children:"Apple"})," structure's ",(0,n.jsx)(s.code,{children:"DX"})," field into ",(0,n.jsx)(s.strong,{children:"A"}),"."]}),"\n",(0,n.jsxs)(s.p,{children:["According to these definitions, here are the field label values of ",(0,n.jsx)(s.code,{children:"Object2D"}),":"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Object2D.X: 0"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Object2D.Y: 2"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Object2D.DX: 4"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Object2D.DY: 5"})})]})}),"\n",(0,n.jsx)(s.h2,{id:"structure-initialization",children:"Structure initialization"}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:".struct"})," definition does not emit any code; it just tells the compiler the layout and initial contents of a structure. To allocate space for a particular structure, you need to initialize it with the name of the structure plus a pair of opening and closing parentheses, just like these samples show:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; Initalize an Object2D"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"MyObject: Object2D()"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; Initialize another one"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"OtherObject: Object2D()"})})]})}),"\n",(0,n.jsx)(s.p,{children:"When you add a label to the structure initialization, that label's value points to the beginning of the structure in the memory."}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"start: .org #8000"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"DistanceEntry:"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .struct"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    Address: .defw $"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    SeqNo: .defb Index"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .ends"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Data: .org #9000"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Index = 1;"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Entry1:	DistanceEntry()"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Index = 2;"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Entry2:	DistanceEntry()"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Index = 3;"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Entry3:	DistanceEntry()"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["The compiler emits the initialization code for ",(0,n.jsx)(s.code,{children:"Entry1"}),", ",(0,n.jsx)(s.code,{children:"Entry2"}),", and ",(0,n.jsx)(s.code,{children:"Entry3"})," as if you wrote this:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Data .org #9000"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Entry1:"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .defw #9000"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .defb 1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Entry2:"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .defw #9003"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .defb 2"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Entry3:"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .defw #9006"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .defb 03"})})]})}),"\n",(0,n.jsx)(s.h2,{id:"field-initializers",children:"Field Initializers"}),"\n",(0,n.jsx)(s.p,{children:"Field initializers can be used to change the default structure initializer. A field initializer has this syntax:"}),"\n",(0,n.jsxs)(s.p,{children:["[",(0,n.jsx)(s.em,{children:"identifier"}),"] ",(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"->"})})," ",(0,n.jsx)(s.em,{children:"byte-emitter-pragma"})]}),"\n",(0,n.jsxs)(s.p,{children:["For a moment, let's forget that ",(0,n.jsx)(s.em,{children:"identifier"})," is optional. When you use it, it must be one of the structure's field names. The ",(0,n.jsx)(s.em,{children:"byte-emitter-pragma"})," is one of the Klive pragmas you can use to define a structure body, namely these:  ",(0,n.jsx)(s.code,{children:".defb"}),", ",(0,n.jsx)(s.code,{children:".defw"}),", ",(0,n.jsx)(s.code,{children:".defm"}),", ",(0,n.jsx)(s.code,{children:".defn"}),", ",(0,n.jsx)(s.code,{children:".defc"}),", ",(0,n.jsx)(s.code,{children:".defs"}),", ",(0,n.jsx)(s.code,{children:".fillb"}),", ",(0,n.jsx)(s.code,{children:".fillw"}),", ",(0,n.jsx)(s.code,{children:".defg"}),",  or ",(0,n.jsx)(s.code,{children:".defgx"}),"."]}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Note"}),": You can use the label syntax for field names; thus, you can add an optional colon after the ",(0,n.jsx)(s.em,{children:"identifier"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["You can apply field initializer statements right after the structure initialization. Any other Z80 instruction, pragma, statement, or directive signs the end of the structure initialization. This code snippet shows two examples of setting up ",(0,n.jsx)(s.code,{children:"Object2D"})," structures. The first is correct; however, the second one raises an error:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Object2D: .struct"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    X: .defw 0"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    Y: .defw 0"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    DX: .defb 1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    DY: .defb 1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .ends"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Obj1: Object2D()"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  DX -> .defb 2"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  DY -> .defb 2"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld a,b"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ; ... Some other code"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Obj2: Object2D()"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  X -> .defw 100"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  Y -> .defw 100"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld hl,#4000    ; Field initialization stops here"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  DX -> .defb 4  ; ERROR"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["The compiler does not care how you initialize fields. For example, even if you have created the ",(0,n.jsx)(s.code,{children:"X"})," field of ",(0,n.jsx)(s.code,{children:"Object2D"})," with a ",(0,n.jsx)(s.code,{children:".defw"})," pragma, you can set its value with ",(0,n.jsx)(s.code,{children:".defb"}),", like in this example:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Obj3: Object2D()"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  X -> .defb 100, 0"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["You can even initialize two fields with a simple initializer statement. For example, ",(0,n.jsx)(s.code,{children:"DX"})," and ",(0,n.jsx)(s.code,{children:"DY"})," are one byte each. You can initialize both of these fields in a single step, as these code snippet shows:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Obj4: Object2D()"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  DX -> .defb 2,2"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Obj5: Object2D()"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  DX -> .defw #0202"})})]})}),"\n",(0,n.jsx)(s.p,{children:"The order of fields is unimportant; you can initialize them in any order:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Obj6: Object2D()"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  DX -> .defb 1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  X -> .defw 100"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  DY -> .defb 1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  Y -> .defw 200"})})]})}),"\n",(0,n.jsx)(s.h2,{id:"fluent-structure-initialization",children:"Fluent Structure Initialization"}),"\n",(0,n.jsxs)(s.p,{children:["The assembler allows flexible initialization, where you do not use field names. The compiler emits bytes as the byte emitter pragmas would do if you were not within a structure initialization. Let's assume you initialize an ",(0,n.jsx)(s.code,{children:"Object2D"})," this way:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Obj7: Object2D()"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  -> .defb 1, 0"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  DX -> defw #0303"})})]})}),"\n",(0,n.jsx)(s.p,{children:"Without the field initializers, the structure would contain these six bytes:"}),"\n",(0,n.jsx)(s.p,{children:"#00, #00, #00, #00, #01, #01"}),"\n",(0,n.jsx)(s.p,{children:"However, the field initializers overwrote the default bytes with the ones displayed in boldface:"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"#01"}),", ",(0,n.jsx)(s.strong,{children:"#00"}),", #00, #00, ",(0,n.jsx)(s.strong,{children:"#03"}),", ",(0,n.jsx)(s.strong,{children:"#03"})]}),"\n",(0,n.jsxs)(s.p,{children:["You can choose your preferred way to initialize a structure using a field or unnamed initializers. The compiler does not care how you assemble the set of bytes within the structure. However, it does not allow you to overflow the structure boundaries. This sample shows you two initializations of ",(0,n.jsx)(s.code,{children:"Object2D"}),". The first is correct, as it emits exactly six bytes. However, the second raises an error since the initialization tries to put eight bytes into the structure:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Obj8: Object2D()"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'  -> .defm "012345"'})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Obj9: Object2D()    ; ERROR: The code tries to initialize the structure with 8 bytes"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  X -> .defw 100"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'  -> .defm "012345"'})})]})})]})}function MDXContent(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,r.a)(),e.components);return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)}let o={MDXContent,pageOpts:{filePath:"pages/z80-assembly/structs.mdx",route:"/z80-assembly/structs",pageMap:[{kind:"Meta",data:{index:"Introduction","getting-started":"Getting Started","z80-assembly":"Klive Z80 Assembler"}},{kind:"Folder",name:"getting-started",route:"/getting-started",children:[{kind:"Meta",data:{installation:"Installing Klive"}},{kind:"MdxPage",name:"installation",route:"/getting-started/installation"}]},{kind:"MdxPage",name:"index",route:"/"},{kind:"Folder",name:"z80-assembly",route:"/z80-assembly",children:[{kind:"Meta",data:{"z80-assembler":"Assembler Overview","language-structure":"Language Structure",expressions:"Expressions","z80-instructions":"Z80 Instructions",pragmas:"Pragmas",statements:"Assembler Statements",macros:"Macros",structs:"Structs"}},{kind:"MdxPage",name:"expressions",route:"/z80-assembly/expressions"},{kind:"MdxPage",name:"language-structure",route:"/z80-assembly/language-structure"},{kind:"MdxPage",name:"macros",route:"/z80-assembly/macros"},{kind:"MdxPage",name:"pragmas",route:"/z80-assembly/pragmas"},{kind:"MdxPage",name:"statements",route:"/z80-assembly/statements"},{kind:"MdxPage",name:"structs",route:"/z80-assembly/structs"},{kind:"MdxPage",name:"z80-assembler",route:"/z80-assembly/z80-assembler"},{kind:"MdxPage",name:"z80-instructions",route:"/z80-assembly/z80-instructions"}]}],flexsearch:{codeblocks:!0},title:"Structures",headings:c},pageNextRoute:"/z80-assembly/structs",nextraLayout:i.ZP,themeConfig:a.Z};s.default=(0,t.j)(o)},3911:function(e,s,l){"use strict";l.d(s,{Z:function(){return t}});var n=l(5893);l(7294);var t={logo:(0,n.jsx)(()=>(0,n.jsxs)("svg",{width:"118",height:"50",viewBox:"0 0 294 124",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[(0,n.jsx)("rect",{width:"100%",height:"100%",fill:"#000"}),(0,n.jsx)("rect",{width:"100%",height:"100%",stroke:"black",strokeWidth:4}),(0,n.jsx)("rect",{x:12,y:0,width:7,height:"100%",fill:"#007acc"}),(0,n.jsx)("path",{d:"M 293 103 l -21 21 l -21 0 l 42 -42",fill:"#0ff"}),(0,n.jsx)("path",{d:"M 293 82 l -42 42 l -21 0 l 63 -63",fill:"#0f0"}),(0,n.jsx)("path",{d:"M 293 61 l -63 63 l -21 0 l 84 -84",fill:"#ff0"}),(0,n.jsx)("path",{d:"M 293 40 l -84 84 l -21 0 l 105 -105",fill:"#f00"}),(0,n.jsx)("path",{d:"M 41 12 l 0 42 l 7 0 l 0 -42 M 48 26 l 14 0 l 0 7 l -14 0 M 62 19 l 7 0 l 0 7 l -7 0 M 69 12 l 7 0 l 0 7 l -7 0 M 62 33 l 7 0 l 0 7 l -7 0 M 69 40 l 7 0 l 0 7 l -7 0 M 76 47 l 7 0 l 0 7 l -7 0",fill:"#e0e0e0"}),(0,n.jsx)("path",{d:"M 90 12 l 0 42 l 35 0 l 0 -7 l -28 0 l 0 -35",fill:"#e0e0e0"}),(0,n.jsx)("path",{d:"M 139 12 l 35 0 l 0 7 l -14 0 l 0 28 l 14 0 l 0 7 l -35 0 l 0 -7 l 14 0 l 0 -28 l -14 0",fill:"#e0e0e0"}),(0,n.jsx)("path",{d:"M 190 12 l 0 28 l 7 0 l 0 -28 M 195 40 l 7 0 l 0 7 l -7 0 M 202 47 l 14 0 l 0 7 l -14 0 M 216 40 l 7 0 l 0 7 l -7 0 M 223 12 l 0 28 l 7 0 l 0 -28",fill:"#e0e0e0"}),(0,n.jsx)("path",{d:"M 237 12 l 0 42 l 42 0 l 0 -7 l -35 0 l 0 -14 l 28 0 l 0 -7 l -28 0 l 0 -7 l 35 0 l 0 -7",fill:"#e0e0e0"}),(0,n.jsx)("path",{d:"M 56 68 l 7 0 l 0 7 l -7 0 M 49 82 l 14 0 l 0 21 l 7 0 l 0 7 l -21 0 l 0 -7 l 7 0 l 0 -14 l -7 0",fill:"#e0e0e0"}),(0,n.jsx)("path",{d:"M 119 68 l 7 0 l 0 42 l -28 0 l 0 -7 l 21 0 M 119 82 l -21 0 l 0 7 l 21 0 M 98 89 l 0 14 l -7 0 l 0 -14",fill:"#e0e0e0"}),(0,n.jsx)("path",{d:"M 147 75 l 21 0 l 0 7 l -21 0 M 140 82 l 0 21 l 7 0 l 0 -21 M 147 103 l 28 0 l 0 7 l -28 0 M 168 82 l 7 0 l 0 7 l -7 0 M 147 89 l 21 0 l 0 7 l -21 0",fill:"#e0e0e0"}),(0,n.jsx)("defs",{children:(0,n.jsxs)("linearGradient",{id:"paint0_linear_2790_21058",x1:"11.9663",y1:"6.54545",x2:"22.5351",y2:"22.5385",gradientUnits:"userSpaceOnUse",children:[(0,n.jsx)("stop",{stopColor:"#D62400"}),(0,n.jsx)("stop",{offset:"1",stopColor:"#A02020"})]})})]}),{}),logoLink:"https://dotneteer.github.io/kliveide",editLink:{text:null},feedback:{content:null},project:{link:"https://github.com/dotneteer/kliveide"}}}},function(e){e.O(0,[774,546,888,179],function(){return e(e.s=9601)}),_N_E=e.O()}]);