(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[166],{776:(e,n,s)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/z80-assembly/z80-instructions",function(){return s(6456)}])},6456:(e,n,s)=>{"use strict";s.r(n),s.d(n,{default:()=>a,useTOC:()=>c});var r=s(4848),i=s(7849),t=s(2421),d=s(8023);function c(e){return[{value:"Z80 Mnemonics",id:"z80-mnemonics",depth:2},{value:"Z80 Registers",id:"z80-registers",depth:2},{value:"JP Syntax",id:"jp-syntax",depth:2},{value:"ALU operations syntax",id:"alu-operations-syntax",depth:2}]}let a=(0,i.e)(function(e){let{toc:n=c(e)}=e,s={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{children:"Accepted Z80 Instructions"}),"\n",(0,r.jsxs)(s.p,{children:["The Klive Assembler implements every officially documented Z80 instruction as well as the non-official ones. During the implementation, the ",(0,r.jsx)(s.a,{href:"http://clrhome.org/table/",children:"ClrHome.org"})," was used as a reference."]}),"\n",(0,r.jsxs)(s.p,{children:["Z80 instructions may start with a label. Labels are identifiers that can be terminated by an optional colon (",(0,r.jsx)(s.code,{children:":"}),"). The compiler accepts both labels in these samples:"]}),"\n",(0,r.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,r.jsxs)(s.code,{children:[(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"Start: ld b,#f0"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"Wait   djnz Wait"})})]})}),"\n",(0,r.jsx)(s.h2,{id:n[0].id,children:n[0].value}),"\n",(0,r.jsx)(s.p,{children:"The compiler accepts these mnemonics:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"ADC"}),", ",(0,r.jsx)(s.code,{children:"ADD"}),", ",(0,r.jsx)(s.code,{children:"AND"}),", ",(0,r.jsx)(s.code,{children:"BIT"}),", ",(0,r.jsx)(s.code,{children:"CALL"}),", ",(0,r.jsx)(s.code,{children:"CCF"}),", ",(0,r.jsx)(s.code,{children:"CP"}),", ",(0,r.jsx)(s.code,{children:"CPD"}),",\n",(0,r.jsx)(s.code,{children:"CPDR"}),", ",(0,r.jsx)(s.code,{children:"CPI"}),", ",(0,r.jsx)(s.code,{children:"CPIR"}),", ",(0,r.jsx)(s.code,{children:"CPL"}),", ",(0,r.jsx)(s.code,{children:"DAA"}),", ",(0,r.jsx)(s.code,{children:"DEC"}),", ",(0,r.jsx)(s.code,{children:"DI"}),", ",(0,r.jsx)(s.code,{children:"DJNZ"}),",\n",(0,r.jsx)(s.code,{children:"EI"}),", ",(0,r.jsx)(s.code,{children:"EX"}),", ",(0,r.jsx)(s.code,{children:"EXX"}),", ",(0,r.jsx)(s.code,{children:"HALT"}),", ",(0,r.jsx)(s.code,{children:"IM"}),", ",(0,r.jsx)(s.code,{children:"IN"}),", ",(0,r.jsx)(s.code,{children:"INC"}),", ",(0,r.jsx)(s.code,{children:"IND"}),",\n",(0,r.jsx)(s.code,{children:"INDR"}),", ",(0,r.jsx)(s.code,{children:"INI"}),", ",(0,r.jsx)(s.code,{children:"INIR"}),", ",(0,r.jsx)(s.code,{children:"JP"}),", ",(0,r.jsx)(s.code,{children:"JR"}),", ",(0,r.jsx)(s.code,{children:"LD"}),", ",(0,r.jsx)(s.code,{children:"LDD"}),", ",(0,r.jsx)(s.code,{children:"LDDR"}),", ",(0,r.jsx)(s.code,{children:"LDDRX"}),"*, ",(0,r.jsx)(s.code,{children:"LDRX"}),"*, ",(0,r.jsx)(s.code,{children:"LDDX"}),"*,\n",(0,r.jsx)(s.code,{children:"LDI"}),", ",(0,r.jsx)(s.code,{children:"LDIR"}),", ",(0,r.jsx)(s.code,{children:"LDIRX"}),"*, ",(0,r.jsx)(s.code,{children:"LIRX"}),"*, ",(0,r.jsx)(s.code,{children:"LDIX"}),"*, ",(0,r.jsx)(s.code,{children:"LDPIRX"}),"*, ",(0,r.jsx)(s.code,{children:"LPRX"}),"*, ",(0,r.jsx)(s.code,{children:"MIRROR"}),"*, ",(0,r.jsx)(s.code,{children:"MIRR"}),"*, ",(0,r.jsx)(s.code,{children:"MUL"}),"*, ",(0,r.jsx)(s.code,{children:"NEG"}),",\n",(0,r.jsx)(s.code,{children:"NEXTREG"}),"*, ",(0,r.jsx)(s.code,{children:"NREG"}),"*, ",(0,r.jsx)(s.code,{children:"NOP"}),", ",(0,r.jsx)(s.code,{children:"OR"}),", ",(0,r.jsx)(s.code,{children:"OTDR"}),", ",(0,r.jsx)(s.code,{children:"OTIR"}),", ",(0,r.jsx)(s.code,{children:"OUT"}),", ",(0,r.jsx)(s.code,{children:"OUTINB"}),"*, ",(0,r.jsx)(s.code,{children:"OTIB"}),"*,\n",(0,r.jsx)(s.code,{children:"OUTD"}),", ",(0,r.jsx)(s.code,{children:"OUTI"}),", ",(0,r.jsx)(s.code,{children:"PIXELAD"}),"*, ",(0,r.jsx)(s.code,{children:"PXAD"}),"*, ",(0,r.jsx)(s.code,{children:"PIXELDN"}),"*, ",(0,r.jsx)(s.code,{children:"PXDN"}),"*, ",(0,r.jsx)(s.code,{children:"POP"}),", ",(0,r.jsx)(s.code,{children:"PUSH"}),", ",(0,r.jsx)(s.code,{children:"RES"}),", ",(0,r.jsx)(s.code,{children:"RET"}),", ",(0,r.jsx)(s.code,{children:"RETI"}),", ",(0,r.jsx)(s.code,{children:"RETN"}),",\n",(0,r.jsx)(s.code,{children:"RL"}),", ",(0,r.jsx)(s.code,{children:"RLA"}),", ",(0,r.jsx)(s.code,{children:"RLC"}),", ",(0,r.jsx)(s.code,{children:"RLCA"}),", ",(0,r.jsx)(s.code,{children:"RLD"}),", ",(0,r.jsx)(s.code,{children:"RR"}),", ",(0,r.jsx)(s.code,{children:"RRA"}),", ",(0,r.jsx)(s.code,{children:"RRC"}),",\n",(0,r.jsx)(s.code,{children:"RRCA"}),", ",(0,r.jsx)(s.code,{children:"RRD"}),", ",(0,r.jsx)(s.code,{children:"RST"}),", ",(0,r.jsx)(s.code,{children:"SBC"}),", ",(0,r.jsx)(s.code,{children:"SCF"}),", ",(0,r.jsx)(s.code,{children:"SET"}),", ",(0,r.jsx)(s.code,{children:"SETAE"}),"*, ",(0,r.jsx)(s.code,{children:"STAE"}),"*, ",(0,r.jsx)(s.code,{children:"SLA"}),", ",(0,r.jsx)(s.code,{children:"SLL"}),"\n",(0,r.jsx)(s.code,{children:"SRA"}),", ",(0,r.jsx)(s.code,{children:"SRL"}),", ",(0,r.jsx)(s.code,{children:"SUB"}),", ",(0,r.jsx)(s.code,{children:"SWAPNIB"}),"*, ",(0,r.jsx)(s.code,{children:"SWAP"}),"*, ",(0,r.jsx)(s.code,{children:"TEST"}),"*, ",(0,r.jsx)(s.code,{children:"XOR"}),"."]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Note"}),": The instructions marked with * can be used only with the ZX Spectrum Next model."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:n[1].id,children:n[1].value}),"\n",(0,r.jsx)(s.p,{children:"The compiler uses the standard 8-bit and 16-bit register names, as specified in the official\nZilog Z80 documentation:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["8-bit registers: ",(0,r.jsx)(s.code,{children:"A"}),", ",(0,r.jsx)(s.code,{children:"B"}),", ",(0,r.jsx)(s.code,{children:"C"}),", ",(0,r.jsx)(s.code,{children:"D"}),", ",(0,r.jsx)(s.code,{children:"E"}),", ",(0,r.jsx)(s.code,{children:"H"}),", ",(0,r.jsx)(s.code,{children:"L"}),", ",(0,r.jsx)(s.code,{children:"I"}),", ",(0,r.jsx)(s.code,{children:"R"})]}),"\n",(0,r.jsxs)(s.li,{children:["16-bit registers: ",(0,r.jsx)(s.code,{children:"AF"}),", ",(0,r.jsx)(s.code,{children:"BC"}),", ",(0,r.jsx)(s.code,{children:"DE"}),", ",(0,r.jsx)(s.code,{children:"HL"}),", ",(0,r.jsx)(s.code,{children:"SP"}),", ",(0,r.jsx)(s.code,{children:"IX"}),", ",(0,r.jsx)(s.code,{children:"IY"})]}),"\n",(0,r.jsxs)(s.li,{children:["For the 8-bit halves of the ",(0,r.jsx)(s.code,{children:"IX"})," and ",(0,r.jsx)(s.code,{children:"IY"})," index registers, the compiler uses these names: ",(0,r.jsx)(s.code,{children:"XL"}),", ",(0,r.jsx)(s.code,{children:"XH"}),", ",(0,r.jsx)(s.code,{children:"YL"}),", ",(0,r.jsx)(s.code,{children:"YH"}),". Alternatively, the compiler accepts these names, too: ",(0,r.jsx)(s.code,{children:"IXL"}),", ",(0,r.jsx)(s.code,{children:"IXH"}),", ",(0,r.jsx)(s.code,{children:"IYL"}),", ",(0,r.jsx)(s.code,{children:"IYH"}),". As a kind of exception to general naming conventions, these mixed-case names are also accepted: ",(0,r.jsx)(s.code,{children:"IXl"}),", ",(0,r.jsx)(s.code,{children:"IXh"}),", ",(0,r.jsx)(s.code,{children:"IYl"}),", ",(0,r.jsx)(s.code,{children:"IYh"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:n[2].id,children:n[2].value}),"\n",(0,r.jsxs)(s.p,{children:["Z80 assemblers use two different syntax constructs for the indirect ",(0,r.jsx)(s.code,{children:"JP"})," statements:"]}),"\n",(0,r.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,r.jsxs)(s.code,{children:[(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"; Notation #1"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"jp hl"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"jp ix"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"jp iy"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"; Notation #2"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"jp (hl)"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"jp (ix)"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"jp (iy)"})})]})}),"\n",(0,r.jsx)(s.p,{children:"The Klive Assembler accepts both notations."}),"\n",(0,r.jsx)(s.h2,{id:n[3].id,children:n[3].value}),"\n",(0,r.jsxs)(s.p,{children:["Three standard ALU operations between ",(0,r.jsx)(s.code,{children:"A"})," and other operands (",(0,r.jsx)(s.code,{children:"ADD"}),", ",(0,r.jsx)(s.code,{children:"ADC"}),", and ",(0,r.jsx)(s.code,{children:"SBC"}),") sign ",(0,r.jsx)(s.code,{children:"A"}),"\nas their first operand:"]}),"\n",(0,r.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,r.jsxs)(s.code,{children:[(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"add a,b"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"adc a,(hl)"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"sbc a,e"})})]})}),"\n",(0,r.jsxs)(s.p,{children:["However, the five other standard ALU operations between ",(0,r.jsx)(s.code,{children:"A"})," and other operands (",(0,r.jsx)(s.code,{children:"SUB"}),", ",(0,r.jsx)(s.code,{children:"AND"}),", ",(0,r.jsx)(s.code,{children:"XOR"}),",\n",(0,r.jsx)(s.code,{children:"OR"}),", and ",(0,r.jsx)(s.code,{children:"CP"}),") omit ",(0,r.jsx)(s.code,{children:"A"})," from their notation:"]}),"\n",(0,r.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,r.jsxs)(s.code,{children:[(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"sub e"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"and (hl)"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"xor e"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"or c"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"cp b"})})]})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.strong,{children:"Klive"})," compiler accepts the second group of ALU operations using the explicit ",(0,r.jsx)(s.code,{children:"A"})," operand, too:"]}),"\n",(0,r.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,r.jsxs)(s.code,{children:[(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"sub a,e"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"and a,(hl)"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"xor a,e"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"or a,c"})}),"\n",(0,r.jsx)(s.span,{children:(0,r.jsx)(s.span,{children:"cp a,b"})})]})})]})},"/z80-assembly/z80-instructions",{filePath:"pages/z80-assembly/z80-instructions.mdx",pageMap:t.O,frontMatter:{},title:"Accepted Z80 Instructions"},"undefined"==typeof RemoteContent?c:RemoteContent.useTOC)},2421:(e,n,s)=>{"use strict";s.d(n,{O:()=>r});let r=[{data:{index:"Introduction","getting-started":"Getting Started","working-with-ide":"Working with the IDE",howto:"How To","z80-assembly":"Klive Z80 Assembler",scripting:"Scripting","commands-reference":"Commands Reference","machine-types":"Machine Types"}},{name:"commands-reference",route:"/commands-reference",frontMatter:{sidebarTitle:"Commands Reference"}},{name:"getting-started",route:"/getting-started",children:[{data:{installation:"Installing Klive","first-run":"Running Klive",keyboard:"Using the Keyboard",tapes:"Loading from Tape","save-programs":"Saving Files","creating-project":"Creating a Klive Project"}},{name:"creating-project",route:"/getting-started/creating-project",frontMatter:{sidebarTitle:"Creating Project"}},{name:"first-run",route:"/getting-started/first-run",frontMatter:{sidebarTitle:"First Run"}},{name:"installation",route:"/getting-started/installation",frontMatter:{sidebarTitle:"Installation"}},{name:"keyboard",route:"/getting-started/keyboard",frontMatter:{sidebarTitle:"Keyboard"}},{name:"save-programs",route:"/getting-started/save-programs",frontMatter:{sidebarTitle:"Save Programs"}},{name:"tapes",route:"/getting-started/tapes",frontMatter:{sidebarTitle:"Tapes"}}]},{name:"howto",route:"/howto",children:[{data:{"ide-startup":"IDE startup options","file-extensions":"Changing default file extensions","instant-screen":"Using the Instant Screen"}},{name:"file-extensions",route:"/howto/file-extensions",frontMatter:{sidebarTitle:"File Extensions"}},{name:"ide-startup",route:"/howto/ide-startup",frontMatter:{sidebarTitle:"Ide Startup"}},{name:"instant-screen",route:"/howto/instant-screen",frontMatter:{sidebarTitle:"Instant Screen"}}]},{name:"index",route:"/",frontMatter:{sidebarTitle:"Index"}},{name:"machine-types",route:"/machine-types",frontMatter:{sidebarTitle:"Machine Types"}},{name:"project-templates",route:"/project-templates",frontMatter:{sidebarTitle:"Project Templates"}},{name:"scripting",route:"/scripting",children:[{data:{overview:"Overview",syntax:"Scripting Syntax"}},{name:"overview",route:"/scripting/overview",frontMatter:{sidebarTitle:"Overview"}},{name:"syntax",route:"/scripting/syntax",frontMatter:{sidebarTitle:"Syntax"}}]},{name:"working-with-ide",route:"/working-with-ide",children:[{data:{"project-explorer":"The Project Explorer","editing-code":"Editing Code","run-debug":"Running & Debugging Code",zxb:"ZXBASIC Integration","ide-settings":"IDE Settings",cpu:"The CPU View",ula:"The ULA View",memory:"The Memory View",disassembly:"The Disassembly View",breakpoints:"The Breakpoints View","system-vars":"The System Variables View",basic:"The BASIC Listing",commands:"Interactive Commands","build-system":"The Build System"}},{name:"basic",route:"/working-with-ide/basic",frontMatter:{sidebarTitle:"Basic"}},{name:"breakpoints",route:"/working-with-ide/breakpoints",frontMatter:{sidebarTitle:"Breakpoints"}},{name:"build-system",route:"/working-with-ide/build-system",frontMatter:{sidebarTitle:"Build System"}},{name:"commands",route:"/working-with-ide/commands",frontMatter:{sidebarTitle:"Commands"}},{name:"cpu",route:"/working-with-ide/cpu",frontMatter:{sidebarTitle:"Cpu"}},{name:"disassembly",route:"/working-with-ide/disassembly",frontMatter:{sidebarTitle:"Disassembly"}},{name:"editing-code",route:"/working-with-ide/editing-code",frontMatter:{sidebarTitle:"Editing Code"}},{name:"ide-settings",route:"/working-with-ide/ide-settings",frontMatter:{sidebarTitle:"Ide Settings"}},{name:"memory",route:"/working-with-ide/memory",frontMatter:{sidebarTitle:"Memory"}},{name:"project-explorer",route:"/working-with-ide/project-explorer",frontMatter:{sidebarTitle:"Project Explorer"}},{name:"run-debug",route:"/working-with-ide/run-debug",frontMatter:{sidebarTitle:"Run Debug"}},{name:"system-vars",route:"/working-with-ide/system-vars",frontMatter:{sidebarTitle:"System Vars"}},{name:"ula",route:"/working-with-ide/ula",frontMatter:{sidebarTitle:"Ula"}},{name:"zxb",route:"/working-with-ide/zxb",frontMatter:{sidebarTitle:"Zxb"}}]},{name:"z80-assembly",route:"/z80-assembly",children:[{data:{"z80-assembler":"Assembler Overview","language-structure":"Language Structure",expressions:"Expressions","z80-instructions":"Z80 Instructions",pragmas:"Pragmas",statements:"Assembler Statements",macros:"Macros",structs:"Structs"}},{name:"expressions",route:"/z80-assembly/expressions",frontMatter:{sidebarTitle:"Expressions"}},{name:"language-structure",route:"/z80-assembly/language-structure",frontMatter:{sidebarTitle:"Language Structure"}},{name:"macros",route:"/z80-assembly/macros",frontMatter:{sidebarTitle:"Macros"}},{name:"pragmas",route:"/z80-assembly/pragmas",frontMatter:{sidebarTitle:"Pragmas"}},{name:"statements",route:"/z80-assembly/statements",frontMatter:{sidebarTitle:"Statements"}},{name:"structs",route:"/z80-assembly/structs",frontMatter:{sidebarTitle:"Structs"}},{name:"z80-assembler",route:"/z80-assembly/z80-assembler",frontMatter:{sidebarTitle:"Z80 Assembler"}},{name:"z80-instructions",route:"/z80-assembly/z80-instructions",frontMatter:{sidebarTitle:"Z80 Instructions"}}]}]}},e=>{var n=n=>e(e.s=n);e.O(0,[849,636,593,792],()=>n(776)),_N_E=e.O()}]);