(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[242],{391:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/z80-assembly/macros",function(){return s(5559)}])},5559:function(e,n,s){"use strict";s.r(n),s.d(n,{useTOC:function(){return c}});var a=s(5893),r=s(7812),d=s(9514),i=s(9299);function c(e){return[{value:"Getting Started with Macros",id:"getting-started-with-macros",depth:2},{value:"Macro Declaration",id:"macro-declaration",depth:2},{value:"Macro Parameters",id:"macro-parameters",depth:2},{value:"Passing Parameters to Macros",id:"passing-parameters-to-macros",depth:2},{value:"Passing Instructions in a Macro Parameter",id:"passing-instructions-in-a-macro-parameter",depth:2},{value:"Passing Multiple Lines in a Macro Parameter",id:"passing-multiple-lines-in-a-macro-parameter",depth:2},{value:"Labels, Symbols, and Variables in Macros",id:"labels-symbols-and-variables-in-macros",depth:2},{value:"Invoking Macros from Macros",id:"invoking-macros-from-macros",depth:2},{value:"Macro-Related Parse-Time Functions",id:"macro-related-parse-time-functions",depth:2}]}n.default=(0,r.c)(function(e){let{toc:n=c(e)}=e,s={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h1,{children:"Macros"}),"\n",(0,a.jsx)(s.p,{children:"The Klive Assembler provides a powerful way to declare and apply macros in the code. While in most programming languages and assemblers, the macros are preprocessor constructs and use simple\ntext replacement, the Klive implementation is different."}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": Unlike in C, C++ (and some Z80 Assemblers), Klive macros emit only code (through instructions and pragmas); they cannot be used as user-defined functions. When you pass parameters to macros, any parameter expression is evaluated instantly, so you cannot use unknown symbols or variables, ones that will get their values only somewhere later in the code."]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:n[0].id,children:n[0].value}),"\n",(0,a.jsx)(s.p,{children:"The best way to show you what macros can do is actual code. Let’s start with a simple parameterless macro:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Delay: "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .macro()    "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    DelayLoop:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        djnz DelayLoop"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})})]})}),"\n",(0,a.jsx)(s.p,{children:"You can easily use this macro in your code:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld b,#24"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Delay()"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; ...and later"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld b,#44"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Delay()"})})]})}),"\n",(0,a.jsx)(s.p,{children:"The assembler will emit the code like this:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld b,#24"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"DelayLoop_1: djnz DelayLoop_1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; ...and later"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld b,#44"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"DelayLoop_2: djnz DelayLoop_2"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["As you expect, it takes care that the ",(0,a.jsx)(s.code,{children:"DelayLoop"})," label remains local within the scope of the macro; otherwise, it would lead to a duplicated label name."]}),"\n",(0,a.jsxs)(s.p,{children:["This macro is named ",(0,a.jsx)(s.code,{children:"Delay"}),", and it uses the value of the ",(0,a.jsx)(s.strong,{children:"B"})," register to create a ",(0,a.jsx)(s.code,{children:"djnz"})," loop. You can easily apply this macro."]}),"\n",(0,a.jsx)(s.p,{children:"Now, let’s enhance this macro with an argument:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Delay: "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .macro(wait)    "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld b,{{wait}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    DelayLoop:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        djnz DelayLoop"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["As the body of the macro suggests, ",(0,a.jsx)(s.code,{children:"{{wait}}"})," is a placeholder for the ",(0,a.jsx)(s.code,{children:"wait"})," argument. While other assemblers do not use a separate markup for a placeholder (they’d just use ",(0,a.jsx)(s.code,{children:"wait"}),"),  Klive applies this markup for\ntwo reasons: first, it is visually better and more eye-catching; second, it allows the compiler to provide better performance."]}),"\n",(0,a.jsxs)(s.p,{children:["You can use this macro passing an argument value for ",(0,a.jsx)(s.code,{children:"wait"}),":"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Delay(#24)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Delay(d)"})})]})}),"\n",(0,a.jsx)(s.p,{children:"As you expect, the compiler now emits this code:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld b,#24"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"DelayLoop_1: djnz DelayLoop_1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; ...and later"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld b,d"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"DelayLoop_2: djnz DelayLoop_2"})})]})}),"\n",(0,a.jsx)(s.p,{children:"Macros allow you to pass anything that could be an operand in a Z80 instruction, so this is entirely valid:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsx)(s.code,{children:(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Delay((ix+23))"})})})}),"\n",(0,a.jsx)(s.p,{children:"As you can imagine, this macro invocation results as if you wrote this:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld b,(ix+23)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"DelayLoop: djnz DelayLoop"})})]})}),"\n",(0,a.jsx)(s.p,{children:"Klive macros do not stop here. You can define macros that receive an entire Z80 instruction as an argument:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"RepeatLight: "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .macro(count, body)    "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld b,{{count}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    DelayLoop:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        {{body}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        djnz DelayLoop"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["This macro is to repeat the ",(0,a.jsx)(s.code,{children:"body"})," in ",(0,a.jsx)(s.code,{children:"count"})," several times. This is how you can invoke it:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsx)(s.code,{children:(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'RepeatLight(4, "add a,c")'})})})}),"\n",(0,a.jsxs)(s.p,{children:["The second argument of the macro is a string that names the ",(0,a.jsx)(s.code,{children:"add a,c"})," operation. The result of this macro is this set of instructions:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld b,4"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"DelayLoop_1: "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  add a,c"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"djnz DelayLoop_1"})})]})}),"\n",(0,a.jsx)(s.p,{children:"Instead of a run time loop, you can apply a compile time loop within the macro:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"RepeatLight: "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .macro(count, body)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .loop {{count}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"          {{body}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .endl"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:'RepeatLight(3, "add a,c")'})," line invokes the macro, and the macro’s body translates to this:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".loop 3"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    add a,c"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endl"})})]})}),"\n",(0,a.jsx)(s.p,{children:"As you already learned, the compiler handles this as if you wrote:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"add a,c"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"add a,c"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"add a,c"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["Klive allows you to pass a set of lines as a macro argument. You can invoke ",(0,a.jsx)(s.code,{children:"RepeatLight"})," like this:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsx)(s.code,{children:(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'RepeatLigth(3, "add a,c" & "add a,10")'})})})}),"\n",(0,a.jsx)(s.p,{children:"Or, you can make it with variables:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'FirstOp = "add a,c"'})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'SecondOp = "add a,10"'})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"RepeatLight(3, FirstOp & SecondOp)"})})]})}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": The ",(0,a.jsx)(s.code,{children:"&"})," operator between the two string values concatenates them with a next-line character set (#0A and #0D). If you apply the ",(0,a.jsx)(s.code,{children:"+"})," operator, the above code would fail: the assembler accepts only a single instruction in a text line and would reject multiple instructions."]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["In macros, you can use several unique functions, such as ",(0,a.jsx)(s.code,{children:"lreg()"})," and ",(0,a.jsx)(s.code,{children:"hreg()"}),". These work during parse time and retrieve the lower and higher 8-bit register of a 16-bit register pair:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"LdHl: "})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .macro(reg16)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld h,hreg({{reg16}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld l,lreg({{reg16}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["Here, you can apply the ",(0,a.jsx)(s.code,{children:"LdHl"})," macro like this:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"LdHl(de)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"LdHl(bc)"})})]})}),"\n",(0,a.jsx)(s.p,{children:"The compiler translates these macro invocations into these Z80 instructions:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld h,d"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld l,e"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld h,b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld l,c"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["When you invoke a macro, you can pass fewer parameters than the macro declares. Within the macro body, you can use the ",(0,a.jsx)(s.code,{children:"def()"})," function to check whether the specified parameter has been passed:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Push:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .macro(r1, r2, r3, r4)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .if def({{r1}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        push {{r1}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .if def({{r2}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        push {{r2}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .if def({{r3}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        push {{r3}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .if def({{r4}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        push {{r4}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"Push"})," macro in this code snippet allows you to create a ",(0,a.jsx)(s.code,{children:"push"})," instruction for up to 4 register pairs. Look at these usages:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Push(af)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; ... and later"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Push(bc, de, ix)"})})]})}),"\n",(0,a.jsx)(s.p,{children:"This is what the compiler generates:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"push af"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; ... and later"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"push bc"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"push de"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"push ix"})})]})}),"\n",(0,a.jsx)(s.p,{children:"You can opt not to pass a macro parameter for a specific argument. Look at this macro declaration:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"LdBcDeHl:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .macro(bcVal, deVal, hlVal)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .if def({{bcVal}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld bc,{{bcVal}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .if def({{deVal}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld de,{{deVal}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .if def({{hlVal}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld hl,{{hlVal}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})})]})}),"\n",(0,a.jsx)(s.p,{children:"You can invoke this macro in these ways, leaving a parameter empty to sign that you do not intend to use it:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"LdBcDeHl(,#1000,#2000)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; ... and later"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"LdBcDeHl(#3000,,#4000)"})})]})}),"\n",(0,a.jsx)(s.p,{children:"The compiler understands your intention and generates this output:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld de,#1000"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld hl,#2000"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; ... and later"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld bc,#3000"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld hl,#4000"})})]})}),"\n",(0,a.jsx)(s.p,{children:"It’s time to go deep into the nitty-gritty details of creating and using macros in Klive."}),"\n",(0,a.jsx)(s.h2,{id:n[1].id,children:n[1].value}),"\n",(0,a.jsxs)(s.p,{children:["Macros must have a name. Each macro is named according to the label preceding its declaration, either in the same line as the ",(0,a.jsx)(s.code,{children:".macro"})," token or before it as a hanging label. Macros can have zero, one, or more named arguments separated by a comma. The macro declaration is closed with the ",(0,a.jsx)(s.code,{children:".endm"})," token:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MacroWithHangingLabel:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .macro(myParam, otherParam)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ; Macro body"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyMacro: macro()"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ; Macro body"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})})]})}),"\n",(0,a.jsx)(s.p,{children:"Even if a macro does not have arguments, its declaration must contain the parentheses."}),"\n",(0,a.jsxs)(s.p,{children:["The macro body can contain Z80 instructions, pragmas, or statements. The only exceptions are the ",(0,a.jsx)(s.strong,{children:"ENT"})," and ",(0,a.jsx)(s.strong,{children:"XENT"})," pragmas."]}),"\n",(0,a.jsxs)(s.p,{children:["As you already experienced, the Assembler supports syntax variants for the macro-related keywords. The Assembler accepts these tokens: ",(0,a.jsx)(s.code,{children:".macro"}),", ",(0,a.jsx)(s.code,{children:"macro"}),", ",(0,a.jsx)(s.code,{children:".MACRO"}),", ",(0,a.jsx)(s.code,{children:"MACRO"}),", ",(0,a.jsx)(s.code,{children:".endm"}),", ",(0,a.jsx)(s.code,{children:"endm"}),", ",(0,a.jsx)(s.code,{children:".ENDM"}),", ",(0,a.jsx)(s.code,{children:"ENDM"}),", ",(0,a.jsx)(s.code,{children:".mend"}),", ",(0,a.jsx)(s.code,{children:"mend"}),", ",(0,a.jsx)(s.code,{children:".MEND"}),", and ",(0,a.jsx)(s.code,{children:"MEND"}),"."]}),"\n",(0,a.jsx)(s.p,{children:"Within the macro’s body, you can refer to the arguments of the macros wrapping them into double curly braces:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Mul10:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .macro(reg8)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    push af"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld a,{{reg8}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    add a,a"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    push bc"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld b,a"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    add a,a"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    add a,a"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    add a,b"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    pop bc"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ld {{reg8}},a"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["Arguments are identifiers. Thus, the corresponding naming rules are applied to them. You cannot use a reserved word (for example, a mnemonic like ",(0,a.jsx)(s.code,{children:"ldir"})," or a register name like ",(0,a.jsx)(s.code,{children:"hl"}),") as a macro argument."]}),"\n",(0,a.jsx)(s.h2,{id:n[2].id,children:n[2].value}),"\n",(0,a.jsx)(s.p,{children:"You can invoke a macro with as many parameters as many arguments its declaration has or even with fewer parameters. If the macro invocation has more parameters than arguments, the compiler raises an error."}),"\n",(0,a.jsx)(s.p,{children:"Let’s assume you’ve created this macro declaration:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyMacro: .macro(arg1, arg2, arg2)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"; Macro body"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endm"})})]})}),"\n",(0,a.jsx)(s.p,{children:"All of these usages are valid:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyMacro()"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyMacro(a)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyMacro(a, b)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyMacro(a, b, c)"})})]})}),"\n",(0,a.jsx)(s.p,{children:"Nonetheless, this usage is invalid since it passes more than three parameters:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsx)(s.code,{children:(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyMacro(a, b, c, d) ; ERROR: To many parameters"})})})}),"\n",(0,a.jsxs)(s.p,{children:["Sometimes, it is convenient to omit not the last parameters but one at the beginning or the middle of the parameter list. You can do that: an empty comma separator signs that the preceding parameter is empty. Using this\nnotation, all these invocations of ",(0,a.jsx)(s.code,{children:"MyMacro"})," are valid:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyMacro(,b)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyMacro(a,,c)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyMacro(,,)"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["Within the macro declaration, you can use the ",(0,a.jsx)(s.code,{children:"def()"})," function to check if a particular argument has a value."]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"LdBcDeHl:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .macro(bcVal, deVal, hlVal)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .if def({{bcVal}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld bc,{{bcVal}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .if def({{deVal}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld de,{{deVal}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .if def({{hlVal}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld hl,{{hlVal}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"def()"})," function accepts only a macro argument reference (the argument’s name wrapped in double curly braces). This function evaluates to true only when the macro argument is not empty."]}),"\n",(0,a.jsxs)(s.p,{children:["You can use the logical NOT operator (",(0,a.jsx)(s.code,{children:"!"}),") combined with ",(0,a.jsx)(s.code,{children:"def()"})," to check if an argument is empty."]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyMacro: .macro(arg)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .if !def({{arg}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    ; generate something for empty arg"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"  .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endm"})})]})}),"\n",(0,a.jsx)(s.h2,{id:n[3].id,children:n[3].value}),"\n",(0,a.jsxs)(s.p,{children:["You can pass ",(0,a.jsx)(s.em,{children:"anything"})," as a macro parameter that is a ",(0,a.jsx)(s.em,{children:"valid operand"})," of a Z80 instruction:"]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["Names of 8-bit registers and 16-bit register pairs (e.g. ",(0,a.jsx)(s.code,{children:"a"}),", ",(0,a.jsx)(s.code,{children:"b"}),", ",(0,a.jsx)(s.code,{children:"ixl"}),", ",(0,a.jsx)(s.code,{children:"hl"})," ",(0,a.jsx)(s.code,{children:"sp"}),", ",(0,a.jsx)(s.code,{children:"af"}),", etc.)"]}),"\n",(0,a.jsxs)(s.li,{children:["Names of conditions (e.g. ",(0,a.jsx)(s.code,{children:"z"}),", ",(0,a.jsx)(s.code,{children:"nz"}),", ",(0,a.jsx)(s.code,{children:"pe"}),", ",(0,a.jsx)(s.code,{children:"m"}),", etc.)"]}),"\n",(0,a.jsxs)(s.li,{children:["Memory address indirection (e.g. ",(0,a.jsx)(s.code,{children:"(#4000)"}),", ",(0,a.jsx)(s.code,{children:"(#4000+#20)"}),")"]}),"\n",(0,a.jsxs)(s.li,{children:["Register pair indirection (e.g. ",(0,a.jsx)(s.code,{children:"(bc)"}),", ",(0,a.jsx)(s.code,{children:"(de)"}),", ",(0,a.jsx)(s.code,{children:"(hl)"}),", etc.)"]}),"\n",(0,a.jsxs)(s.li,{children:["Indexed indirection (e.g. ",(0,a.jsx)(s.code,{children:"(ix+#20)"}),", ",(0,a.jsx)(s.code,{children:"(iy-12)"}),", etc.)"]}),"\n",(0,a.jsxs)(s.li,{children:["C-port (",(0,a.jsx)(s.code,{children:"(c)"}),")"]}),"\n",(0,a.jsxs)(s.li,{children:["Expression (e.g. ",(0,a.jsx)(s.code,{children:"(MyId << 1) + 23"}),", ",(0,a.jsx)(s.code,{children:"#4000"}),", ",(0,a.jsx)(s.code,{children:"12*sin(pi()/4)"}),", ",(0,a.jsx)(s.code,{children:'"ld " + "a,b"'}),", etc.)"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"You should be careful when you use parentheses in expressions. Let’s assume you declare this macro:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"SetHlValue:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .macro(value)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld hl,{{value}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})})]})}),"\n",(0,a.jsx)(s.p,{children:"When you use it, the first invocation uses an expression, and the second has a memory address indirection:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"SetHlValue(#4000+#20)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"SetHlValue((#4000+#20))"})})]})}),"\n",(0,a.jsx)(s.p,{children:"The compiler translates them to these instructions:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld hl,#4020"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld hl,(#4020)"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["To avoid such issues, you can use the square brackets to group parts of expressions. When you invoke the ",(0,a.jsx)(s.code,{children:"SetHlValue"})," macro with this way, both usage with generate a ",(0,a.jsx)(s.code,{children:"ld hl,#4020"})," statement:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"SetHlValue(#4000+#20)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"SetHlValue([#4000+#20])"})})]})}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": When you pass parameters to macros, any parameter expression is evaluated instantly, so you cannot use unknown symbols or variables (ones that will get their values only somewhere later in the code.)"]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"The compiler replaces the macro argument references to their current values passed in parameters. Whenever you use an expression, its value is converted into a string and put into the place of the macro argument."}),"\n",(0,a.jsx)(s.h2,{id:n[4].id,children:n[4].value}),"\n",(0,a.jsx)(s.p,{children:"Within a macro declaration, you can use a macro argument reference instead of an entire Z80 instruction. Take a look at this macro:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ShortDi:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .macro(body)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        di"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        {{body}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ei"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["Here, the ",(0,a.jsx)(s.code,{children:"body"})," argument is expected to get something the compiler can understand as an entire instruction. When you invoke the macro, you need to pass a string expression so that the compiler can replace the ",(0,a.jsx)(s.code,{children:"{{body}}"})," reference. Here is an example:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsx)(s.code,{children:(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'ShortDi("in a,(#fe)")'})})})}),"\n",(0,a.jsx)(s.p,{children:"As you expect, the compiler generates this output:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"di"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"in a,(#fe)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ei"})})]})}),"\n",(0,a.jsx)(s.p,{children:"You are not obliged to use Z80 instructions; the compiler accepts pragmas, too:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsx)(s.code,{children:(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'ShortDi(".db #00")'})})})}),"\n",(0,a.jsx)(s.p,{children:"Well, the output is not pretty useful; nonetheless, the compiler generates this:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"di"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".db #00"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ei"})})]})}),"\n",(0,a.jsx)(s.h2,{id:n[5].id,children:n[5].value}),"\n",(0,a.jsxs)(s.p,{children:["If you pass multiple lines in a macro parameter where the corresponding argument reference is used instead of an entire instruction line, the compiler will apply all those lines. In this case, the individual lines should be separated by new line characters (",(0,a.jsx)(s.code,{children:"\\r\\n"}),"). The ",(0,a.jsx)(s.code,{children:"&"})," operator, when applied for two strings, does this step for you, as it concatenates the two strings with ",(0,a.jsx)(s.code,{children:"\\r\\n"})," between them. Let’s assume you invoke the ",(0,a.jsx)(s.code,{children:"ShortDi"})," macro with this code:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsx)(s.code,{children:(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'ShortDi("ld a,#7f" & "in a,(#fe)")'})})})}),"\n",(0,a.jsx)(s.p,{children:"Now, the compiler will generate this output:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"di"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld a,#7f"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"in a,(#fe)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ei"})})]})}),"\n",(0,a.jsx)(s.p,{children:"Because you can pass expressions as macro parameters, you can invoke the macro in this way, too:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'FirstOp = "ld a,#7f"'})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'SecondOp = "in a,(#fe)"'})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ShortDi(FirstOp & SecondOp)"})})]})}),"\n",(0,a.jsx)(s.p,{children:"You can pass not only instructions and pragmas to macros but also statements:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'LoopOp = ".loop 3" & "nop" & ".endl"'})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ShortDi(LoopOp)"})})]})}),"\n",(0,a.jsx)(s.p,{children:"The compiler will emit this code:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"di"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"nop"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"nop"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"nop"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ei"})})]})}),"\n",(0,a.jsx)(s.h2,{id:n[6].id,children:n[6].value}),"\n",(0,a.jsxs)(s.p,{children:["Macros have a local scope for all labels, symbols, and variables created within their body, including the label attached to the ",(0,a.jsx)(s.code,{children:".endm"})," statement. The macro’s name is a label that also represents the start of the macro."]}),"\n",(0,a.jsx)(s.p,{children:"Take a look at this macro definition:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"GetBoundaries:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .macro(instr)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        {{instr}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld de,EndLabel"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld hl,GetBoundaries"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"EndLabel:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["Here, the ",(0,a.jsx)(s.code,{children:"ld hl,GetBoundaries"})," instruction fills ",(0,a.jsx)(s.strong,{children:"HL"})," with the start address of the macro, while the ",(0,a.jsx)(s.code,{children:"ld de,EndLabel"})," instruction puts the address of the next instruction following the macro into ",(0,a.jsx)(s.strong,{children:"DE"}),"."]}),"\n",(0,a.jsx)(s.p,{children:"Let’s assume you use the macro this way:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".org #8000"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'GetBoundaries("nop")'})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'GetBoundaries("ld ix,#ABCD")'})})]})}),"\n",(0,a.jsx)(s.p,{children:"The compiler will create this output:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"#8000 GetBoundaries_1 nop"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"#8001                 ld de,#8007 ; EndLabel_1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"#8004                 ld hl,#8000 ; GetBoundaries_1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"#8007 EndLabel_1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"      GetBoundaries_2 ld ix,#ABCD"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"#800B                 ld de,#8011 ; Endlabel_2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"#800E                 ld hl,#8007 ; GetBoundaries_2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"#8011 EndLabel_2"})})]})}),"\n",(0,a.jsx)(s.p,{children:"Symbols and variables within the context work exactly as they do with loops. Remember: Symbols are constant values, while variables may change!"}),"\n",(0,a.jsx)(s.h2,{id:n[7].id,children:n[7].value}),"\n",(0,a.jsx)(s.p,{children:"Klive allows you to invoke a macro from another macro, too. Here is a short sample:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"Delay:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .macro(wait)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld b,{{wait}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        WaitLoop: djnz WaitLoop"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"BorderPulse:"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .macro(col1, wait1, col2, wait2)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld a,{{col1}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        out (#fe),a"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        Delay({{wait1}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld a,{{col2}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        out (#fe),a"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        Delay({{wait2}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endm"})})]})}),"\n",(0,a.jsxs)(s.p,{children:["Here, the ",(0,a.jsx)(s.code,{children:"BorderPulse"})," macro uses ",(0,a.jsx)(s.code,{children:"Delay"})," as a helper macro. The ",(0,a.jsx)(s.code,{children:"BorderPulse(2, 10, 3, 20)"})," invocation produces this output:"]}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld a,2"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"out (#fe),a"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld b,10"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"WaitLoop_1: djnz WaitLoop_1"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld a,3"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"out (#fe),a"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"ld b,20"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"WaitLoop_2: djnz WaitLoop_2"})})]})}),"\n",(0,a.jsx)(s.h2,{id:n[8].id,children:n[8].value}),"\n",(0,a.jsxs)(s.p,{children:["The Klive Assembler allows several parse-time functions with macro arguments similar to the ",(0,a.jsx)(s.code,{children:"def()"})," function to check whether a macro argument has been passed to the macro invocation."]}),"\n",(0,a.jsx)(s.p,{children:"These functions check if the argument is an operand the name of the function suggests. Each of them returns true, provided the function recognizes the operand; otherwise, false."}),"\n",(0,a.jsx)(s.p,{children:"The Assembler supports these functions:"}),"\n",(0,a.jsxs)(s.table,{children:[(0,a.jsx)(s.thead,{children:(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.th,{children:"Name"}),(0,a.jsx)(s.th,{children:"Description"})]})}),(0,a.jsxs)(s.tbody,{children:[(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:(0,a.jsx)(s.code,{children:"isreg8std()"})}),(0,a.jsxs)(s.td,{children:["The operand is an 8-bit register, one of these: ",(0,a.jsx)(s.code,{children:"a"}),", ",(0,a.jsx)(s.code,{children:"b"}),", ",(0,a.jsx)(s.code,{children:"c"}),", ",(0,a.jsx)(s.code,{children:"d"}),", ",(0,a.jsx)(s.code,{children:"e"}),", ",(0,a.jsx)(s.code,{children:"h"}),", ",(0,a.jsx)(s.code,{children:"l"}),", ",(0,a.jsx)(s.code,{children:"i"}),", ",(0,a.jsx)(s.code,{children:"r"}),", ",(0,a.jsx)(s.code,{children:"xh"})," (",(0,a.jsx)(s.code,{children:"ixh"}),"), ",(0,a.jsx)(s.code,{children:"xl"})," (",(0,a.jsx)(s.code,{children:"ixl"}),"), ",(0,a.jsx)(s.code,{children:"yh"})," (",(0,a.jsx)(s.code,{children:"iyh"}),"), or ",(0,a.jsx)(s.code,{children:"yl"})," (",(0,a.jsx)(s.code,{children:"iyl"}),")"]})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:(0,a.jsx)(s.code,{children:"isreg8std()"})}),(0,a.jsxs)(s.td,{children:["The operand is a standard 8-bit register, one of these: ",(0,a.jsx)(s.code,{children:"a"}),", ",(0,a.jsx)(s.code,{children:"b"}),", ",(0,a.jsx)(s.code,{children:"c"}),", ",(0,a.jsx)(s.code,{children:"d"}),", ",(0,a.jsx)(s.code,{children:"e"}),", ",(0,a.jsx)(s.code,{children:"h"}),", or ",(0,a.jsx)(s.code,{children:"l"})]})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:(0,a.jsx)(s.code,{children:"isreg8spec()"})}),(0,a.jsxs)(s.td,{children:["The operand is a special 8-bit register, ",(0,a.jsx)(s.code,{children:"i"}),", or ",(0,a.jsx)(s.code,{children:"r"})]})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:(0,a.jsx)(s.code,{children:"isreg8idx()"})}),(0,a.jsxs)(s.td,{children:["One of these 8-bit index registers: ",(0,a.jsx)(s.code,{children:"xh"})," (",(0,a.jsx)(s.code,{children:"ixh"}),"), ",(0,a.jsx)(s.code,{children:"xl"})," (",(0,a.jsx)(s.code,{children:"ixl"}),"), ",(0,a.jsx)(s.code,{children:"yh"})," (",(0,a.jsx)(s.code,{children:"iyh"}),"), or ",(0,a.jsx)(s.code,{children:"yl"})," (",(0,a.jsx)(s.code,{children:"iyl"}),")"]})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:(0,a.jsx)(s.code,{children:"isreg16()"})}),(0,a.jsxs)(s.td,{children:["Any of these 16-bit registers: ",(0,a.jsx)(s.code,{children:"af"}),", ",(0,a.jsx)(s.code,{children:"bc"}),", ",(0,a.jsx)(s.code,{children:"de"}),", ",(0,a.jsx)(s.code,{children:"hl"}),", ",(0,a.jsx)(s.code,{children:"sp"}),", ",(0,a.jsx)(s.code,{children:"ix"})," or ",(0,a.jsx)(s.code,{children:"iy"})]})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:(0,a.jsx)(s.code,{children:"isreg16std()"})}),(0,a.jsxs)(s.td,{children:["Any of the standard 16-bit registers: ",(0,a.jsx)(s.code,{children:"bc"}),", ",(0,a.jsx)(s.code,{children:"de"}),", ",(0,a.jsx)(s.code,{children:"hl"}),", or ",(0,a.jsx)(s.code,{children:"sp"})]})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:(0,a.jsx)(s.code,{children:"isreg16idx()"})}),(0,a.jsxs)(s.td,{children:["Any of the ",(0,a.jsx)(s.code,{children:"ix"})," or ",(0,a.jsx)(s.code,{children:"iy"})," registers"]})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:(0,a.jsx)(s.code,{children:"isregindirect()"})}),(0,a.jsxs)(s.td,{children:["The operand is one of these: ",(0,a.jsx)(s.code,{children:"(bc)"}),", ",(0,a.jsx)(s.code,{children:"(de)"}),", ",(0,a.jsx)(s.code,{children:"(hl)"}),", or ",(0,a.jsx)(s.code,{children:"(sp)"})]})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:(0,a.jsx)(s.code,{children:"isindexedaddr()"})}),(0,a.jsxs)(s.td,{children:["The operand is an indexed address like ",(0,a.jsx)(s.code,{children:"(ix)"}),", ",(0,a.jsx)(s.code,{children:"(iy)"}),", ",(0,a.jsx)(s.code,{children:"(ix+#12)"}),", ",(0,a.jsx)(s.code,{children:"(iy-#23)"}),", and so on"]})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:(0,a.jsx)(s.code,{children:"iscport()"})}),(0,a.jsxs)(s.td,{children:["The operand is ",(0,a.jsx)(s.code,{children:"(c)"})," (e.g., in the ",(0,a.jsx)(s.code,{children:"out (c),a"})," instruction)"]})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:(0,a.jsx)(s.code,{children:"iscondition()"})}),(0,a.jsxs)(s.td,{children:["The operand is one of these conditions: ",(0,a.jsx)(s.code,{children:"z"}),", ",(0,a.jsx)(s.code,{children:"nz"}),", ",(0,a.jsx)(s.code,{children:"c"}),", ",(0,a.jsx)(s.code,{children:"nc"}),", ",(0,a.jsx)(s.code,{children:"po"}),", ",(0,a.jsx)(s.code,{children:"pe"}),", ",(0,a.jsx)(s.code,{children:"p"}),", or ",(0,a.jsx)(s.code,{children:"m"})]})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsx)(s.td,{children:(0,a.jsx)(s.code,{children:"isexpr()"})}),(0,a.jsxs)(s.td,{children:["The operand is an expression, for example: ",(0,a.jsx)(s.code,{children:"1 + 2"}),", ",(0,a.jsx)(s.code,{children:"#1000"}),", ",(0,a.jsx)(s.code,{children:"myvalue + 23"}),", etc."]})]}),(0,a.jsxs)(s.tr,{children:[(0,a.jsxs)(s.td,{children:[(0,a.jsx)(s.code,{children:"isreg"}),(0,a.jsx)(s.em,{children:(0,a.jsx)(s.code,{children:"<reg>"})}),(0,a.jsx)(s.code,{children:"()"})]}),(0,a.jsxs)(s.td,{children:["The operand is the register as given in ",(0,a.jsx)(s.em,{children:(0,a.jsx)(s.code,{children:"<reg>"})}),". You can use these names: ",(0,a.jsx)(s.code,{children:"a"}),", ",(0,a.jsx)(s.code,{children:"af"}),", ",(0,a.jsx)(s.code,{children:"b"}),", ",(0,a.jsx)(s.code,{children:"c"}),", ",(0,a.jsx)(s.code,{children:"bc"}),", ",(0,a.jsx)(s.code,{children:"d"}),", ",(0,a.jsx)(s.code,{children:"e"}),", ",(0,a.jsx)(s.code,{children:"de"}),", ",(0,a.jsx)(s.code,{children:"h"}),", ",(0,a.jsx)(s.code,{children:"l"}),", ",(0,a.jsx)(s.code,{children:"hl"}),", ",(0,a.jsx)(s.code,{children:"i"}),", ",(0,a.jsx)(s.code,{children:"r"}),", ",(0,a.jsx)(s.code,{children:"xh"}),", ",(0,a.jsx)(s.code,{children:"xl"}),", ",(0,a.jsx)(s.code,{children:"ix"}),", ",(0,a.jsx)(s.code,{children:"yh"}),", ",(0,a.jsx)(s.code,{children:"yl"}),", ",(0,a.jsx)(s.code,{children:"iy"}),", and ",(0,a.jsx)(s.code,{children:"sp"}),". For example, ",(0,a.jsx)(s.code,{children:"isrega()"})," tests if the specified register is ",(0,a.jsx)(s.strong,{children:"A"}),"."]})]})]})]}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.strong,{children:"Note"}),": When you pass ",(0,a.jsx)(s.code,{children:"'c'"})," as a macro argument, both the ",(0,a.jsx)(s.code,{children:"isreg8()"})," and ",(0,a.jsx)(s.code,{children:"iscondition()"})," parse-time functions accept it, as the ",(0,a.jsx)(s.code,{children:"'c'"})," token can be either an 8-bit register or a condition (carry flag is set)."]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"Here is a short sample:"}),"\n",(0,a.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,a.jsxs)(s.code,{children:[(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"MyRegMacro: .macro(arg)"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .if isreg8({{arg}})"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"        ld a,{{arg}}"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .else"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:'        .error "Only 8-bit registers are allowed"'})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:"    .endif"})}),"\n",(0,a.jsx)(s.span,{children:(0,a.jsx)(s.span,{children:".endm"})})]})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"MyRegMacro"})," allows using only an 8-bit register as its argument. If you provide another type of parameter, the macro raises an error."]})]})},"/z80-assembly/macros",{filePath:"pages/z80-assembly/macros.mdx",pageMap:d.v,frontMatter:{},title:"Macros"},"undefined"==typeof RemoteContent?c:RemoteContent.useTOC)},9514:function(e,n,s){"use strict";s.d(n,{v:function(){return a}});let a=[{data:{index:"Introduction","getting-started":"Getting Started","working-with-ide":"Working with the IDE",howto:"How To","z80-assembly":"Klive Z80 Assembler",scripting:"Scripting","command-reference":"Command Reference","machine-types":"Machine Types"}},{name:"command-reference",route:"/command-reference",frontMatter:{sidebarTitle:"Command Reference"}},{name:"getting-started",route:"/getting-started",children:[{data:{installation:"Installing Klive","first-run":"Running Klive",keyboard:"Using the Keyboard",tapes:"Loading from Tape","save-programs":"Saving Files","creating-project":"Creating a Klive Project"}},{name:"creating-project",route:"/getting-started/creating-project",frontMatter:{sidebarTitle:"Creating Project"}},{name:"first-run",route:"/getting-started/first-run",frontMatter:{sidebarTitle:"First Run"}},{name:"installation",route:"/getting-started/installation",frontMatter:{sidebarTitle:"Installation"}},{name:"keyboard",route:"/getting-started/keyboard",frontMatter:{sidebarTitle:"Keyboard"}},{name:"save-programs",route:"/getting-started/save-programs",frontMatter:{sidebarTitle:"Save Programs"}},{name:"tapes",route:"/getting-started/tapes",frontMatter:{sidebarTitle:"Tapes"}}]},{name:"howto",route:"/howto",children:[{data:{"file-extensions":"Changing default file extensions"}},{name:"file-extensions",route:"/howto/file-extensions",frontMatter:{sidebarTitle:"File Extensions"}}]},{name:"index",route:"/",frontMatter:{sidebarTitle:"Index"}},{name:"machine-types",route:"/machine-types",frontMatter:{sidebarTitle:"Machine Types"}},{name:"project-templates",route:"/project-templates",frontMatter:{sidebarTitle:"Project Templates"}},{name:"scripting",route:"/scripting",children:[{data:{overview:"Overview",syntax:"Scripting Syntax"}},{name:"overview",route:"/scripting/overview",frontMatter:{sidebarTitle:"Overview"}},{name:"syntax",route:"/scripting/syntax",frontMatter:{sidebarTitle:"Syntax"}}]},{name:"working-with-ide",route:"/working-with-ide",children:[{data:{"project-explorer":"The Project Explorer","editing-code":"Editing Code","run-debug":"Running & Debugging Code",zxb:"ZXBASIC Integration","ide-settings":"IDE Settings",cpu:"The CPU View",ula:"The ULA View",memory:"The Memory View",disassembly:"The Disassembly View",breakpoints:"The Breakpoints View","system-vars":"The System Variables View",basic:"The BASIC Listing",commands:"Interactive Commands","build-system":"The Build System"}},{name:"basic",route:"/working-with-ide/basic",frontMatter:{sidebarTitle:"Basic"}},{name:"breakpoints",route:"/working-with-ide/breakpoints",frontMatter:{sidebarTitle:"Breakpoints"}},{name:"build-system",route:"/working-with-ide/build-system",frontMatter:{sidebarTitle:"Build System"}},{name:"commands",route:"/working-with-ide/commands",frontMatter:{sidebarTitle:"Commands"}},{name:"cpu",route:"/working-with-ide/cpu",frontMatter:{sidebarTitle:"Cpu"}},{name:"disassembly",route:"/working-with-ide/disassembly",frontMatter:{sidebarTitle:"Disassembly"}},{name:"editing-code",route:"/working-with-ide/editing-code",frontMatter:{sidebarTitle:"Editing Code"}},{name:"ide-settings",route:"/working-with-ide/ide-settings",frontMatter:{sidebarTitle:"Ide Settings"}},{name:"memory",route:"/working-with-ide/memory",frontMatter:{sidebarTitle:"Memory"}},{name:"project-explorer",route:"/working-with-ide/project-explorer",frontMatter:{sidebarTitle:"Project Explorer"}},{name:"run-debug",route:"/working-with-ide/run-debug",frontMatter:{sidebarTitle:"Run Debug"}},{name:"system-vars",route:"/working-with-ide/system-vars",frontMatter:{sidebarTitle:"System Vars"}},{name:"ula",route:"/working-with-ide/ula",frontMatter:{sidebarTitle:"Ula"}},{name:"zxb",route:"/working-with-ide/zxb",frontMatter:{sidebarTitle:"Zxb"}}]},{name:"z80-assembly",route:"/z80-assembly",children:[{data:{"z80-assembler":"Assembler Overview","language-structure":"Language Structure",expressions:"Expressions","z80-instructions":"Z80 Instructions",pragmas:"Pragmas",statements:"Assembler Statements",macros:"Macros",structs:"Structs"}},{name:"expressions",route:"/z80-assembly/expressions",frontMatter:{sidebarTitle:"Expressions"}},{name:"language-structure",route:"/z80-assembly/language-structure",frontMatter:{sidebarTitle:"Language Structure"}},{name:"macros",route:"/z80-assembly/macros",frontMatter:{sidebarTitle:"Macros"}},{name:"pragmas",route:"/z80-assembly/pragmas",frontMatter:{sidebarTitle:"Pragmas"}},{name:"statements",route:"/z80-assembly/statements",frontMatter:{sidebarTitle:"Statements"}},{name:"structs",route:"/z80-assembly/structs",frontMatter:{sidebarTitle:"Structs"}},{name:"z80-assembler",route:"/z80-assembly/z80-assembler",frontMatter:{sidebarTitle:"Z80 Assembler"}},{name:"z80-instructions",route:"/z80-assembly/z80-instructions",frontMatter:{sidebarTitle:"Z80 Instructions"}}]}]}},function(e){e.O(0,[812,888,774,179],function(){return e(e.s=391)}),_N_E=e.O()}]);