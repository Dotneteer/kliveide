(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[215],{4313:function(e,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/z80-assembly/expressions",function(){return n(3970)}])},3970:function(e,s,n){"use strict";n.r(s),n.d(s,{__toc:function(){return c}});var r=n(5893),t=n(2673),i=n(7758),d=n(3911);n(9128);var l=n(2643);let c=[{depth:2,value:"Instant and Late Expression Evaluation",id:"instant-and-late-expression-evaluation"},{depth:2,value:"Operands",id:"operands"},{depth:2,value:"Operators",id:"operators"},{depth:3,value:"Conditional Operator",id:"conditional-operator"},{depth:3,value:"Binary Bitwise Operators",id:"binary-bitwise-operators"},{depth:3,value:"Relational Operators",id:"relational-operators"},{depth:3,value:"Shift Operators",id:"shift-operators"},{depth:3,value:"Basic Arithmetic Operators",id:"basic-arithmetic-operators"},{depth:3,value:"Unary operators",id:"unary-operators"},{depth:2,value:"Functions",id:"functions"},{depth:2,value:"Parse Time Functions",id:"parse-time-functions"},{depth:3,value:"The lreg() and hreg() Parse Time Functions",id:"the-lreg-and-hreg-parse-time-functions"},{depth:3,value:"The textof() Parse Time Function",id:"the-textof-parse-time-function"}];function _createMdxContent(e){let s=Object.assign({h1:"h1",p:"p",code:"code",ul:"ul",li:"li",em:"em",pre:"pre",span:"span",h2:"h2",blockquote:"blockquote",strong:"strong",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,l.a)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{children:"Expressions"}),"\n",(0,r.jsxs)(s.p,{children:["The Klive Assembler has a rich syntax for evaluating expressions. You can use the same syntax with the ",(0,r.jsx)(s.code,{children:"#if"})," directives, the Z80 instructions, and the compiler statements."]}),"\n",(0,r.jsx)(s.p,{children:"You can use operands and operators just like in most programming languages. Nevertheless, the Klive implementation has its particular way of evaluating expressions:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Expressions can be one of these types:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.em,{children:"Booleans"})," (",(0,r.jsx)(s.code,{children:"true"})," or ",(0,r.jsx)(s.code,{children:"false"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.em,{children:"integers"})," (64-bit)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.em,{children:"floating point numbers"})," (64-bit precision)"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.em,{children:"strings"})," (with 8-bit characters)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"The assembler applies implicit conversion whenever it's possible."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Floating point numbers are truncated to integer values."}),"\n",(0,r.jsxs)(s.li,{children:["The ",(0,r.jsx)(s.code,{children:"true"})," Boolean literal is represented with the integer value ",(0,r.jsx)(s.code,{children:"1"}),"; ",(0,r.jsx)(s.code,{children:"false"})," with ",(0,r.jsx)(s.code,{children:"0"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:["When the assembler needs a Boolean value, ",(0,r.jsx)(s.code,{children:"0"})," is considered ",(0,r.jsx)(s.code,{children:"false"}),", and any other values as ",(0,r.jsx)(s.code,{children:"true"}),"."]}),"\n",(0,r.jsx)(s.li,{children:"There is no implicit conversion between strings and any numeric values."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["When the compiler needs a 16-bit value (for example, ",(0,r.jsx)(s.code,{children:"ld hl,NNNN"}),"), it uses the rightmost 16 bits of an expression's value."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["When a Z80 operation (for example, ",(0,r.jsx)(s.code,{children:"ld a,NN"}),") needs an 8-bit value, it utilizes the rightmost 8 bits."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Besides the parentheses — ",(0,r.jsx)(s.code,{children:"("})," and ",(0,r.jsx)(s.code,{children:")"})," — you can use square brackets\n— ",(0,r.jsx)(s.code,{children:"["})," and ",(0,r.jsx)(s.code,{children:"]"})," — to group operations and change operator precedence."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,r.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; This is valid"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld hl,(Offset+#20)*2+BaseAddr"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; Just like this"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld hl,[Offset+#20]*2+BaseAddr"})})]})}),"\n",(0,r.jsx)(s.h2,{id:"instant-and-late-expression-evaluation",children:"Instant and Late Expression Evaluation"}),"\n",(0,r.jsxs)(s.p,{children:["Depending on the context in which an expression is used, the compiler evaluates it instantly or decides to postpone the evaluation. For example, when you use the ",(0,r.jsx)(s.code,{children:".org"})," pragma, the compiler applies immediate evaluation. Let's assume this is your code:"]}),"\n",(0,r.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,r.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Start: .org #8000 + Later"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; code body (omitted)"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Later: .db #ff"})})]})}),"\n",(0,r.jsxs)(s.p,{children:["The value of ",(0,r.jsx)(s.code,{children:"Later"})," depends on the address in ",(0,r.jsx)(s.code,{children:".org"}),", and the ",(0,r.jsx)(s.code,{children:".org"})," address depends on ",(0,r.jsx)(s.code,{children:"Later"}),", so this declaration could not be adequately resolved; it's like a deadlock. The ",(0,r.jsx)(s.code,{children:".org"})," pragma would raise an error to avoid such situations, as at the moment of its evaluation, the ",(0,r.jsx)(s.code,{children:"Later"})," symbol's value is unknown."]}),"\n",(0,r.jsx)(s.p,{children:"For most Z80 instructions, the compiler uses late evaluation:"}),"\n",(0,r.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,r.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Start: .org #6000"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    ld hl,(MyVar)"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    ; code body omitted"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    ret"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"MyVar: .defs 2"})})]})}),"\n",(0,r.jsxs)(s.p,{children:["When the compiler reaches the ",(0,r.jsx)(s.code,{children:"ld hl,(MyVar)"})," instruction, it does not know the value of ",(0,r.jsx)(s.code,{children:"MyVar"}),". Nonetheless, it does not stop with an error but generates the machine code for ",(0,r.jsx)(s.code,{children:"ld hl,(0)"}),", namely #21, #00, and #00;\ntakes a note (it is called a ",(0,r.jsx)(s.em,{children:"fixup"}),") when ",(0,r.jsx)(s.code,{children:"MyVal"})," gets a value, the two #00 bytes generated at address #6001\nshould be updated accordingly."]}),"\n",(0,r.jsx)(s.h2,{id:"operands",children:"Operands"}),"\n",(0,r.jsx)(s.p,{children:"You can use the following operands in expressions:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Boolean, Decimal and hexadecimal literals"}),"\n",(0,r.jsx)(s.li,{children:"Character literals"}),"\n",(0,r.jsx)(s.li,{children:"Identifiers"}),"\n",(0,r.jsx)(s.li,{children:"The current assembly address"}),"\n"]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Note"}),": String literals cannot be used as operands."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"operators",children:"Operators"}),"\n",(0,r.jsx)(s.p,{children:"You can use about a dozen operators, including unary, binary, and ternary. In this section, you will learn about them. They will be introduced in descending order of their precedence."}),"\n",(0,r.jsx)(s.h3,{id:"conditional-operator",children:"Conditional Operator"}),"\n",(0,r.jsx)(s.p,{children:"The assembler supports using only one ternary operator, the conditional operator:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.em,{children:"conditional-expression"})," ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:"?"})})," ",(0,r.jsx)(s.em,{children:"true-value"})," ",(0,r.jsx)(s.strong,{children:(0,r.jsx)(s.code,{children:":"})})," ",(0,r.jsx)(s.em,{children:"false-value"})]}),"\n",(0,r.jsx)(s.p,{children:"This operation results in -1:"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.code,{children:"2 > 3 ? 2 : -1"})}),"\n",(0,r.jsxs)(s.p,{children:["When the ",(0,r.jsx)(s.em,{children:"conditional-expression"})," evaluates to true, the operation results\nin ",(0,r.jsx)(s.em,{children:"true-value"}),"; otherwise in ",(0,r.jsx)(s.em,{children:"false-value"}),"."]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Note"}),": Conditional expressions are evaluated from right to left, unlike binary operators, which use left-to-right evaluation."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"binary-bitwise-operators",children:"Binary Bitwise Operators"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Operator token"}),(0,r.jsx)(s.th,{children:"Precedence"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"`"}),(0,r.jsx)(s.td,{children:"`"}),(0,r.jsx)(s.td,{children:"1"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"^"})}),(0,r.jsx)(s.td,{children:"2"}),(0,r.jsx)(s.td,{children:"Bitwise XOR"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"&"})}),(0,r.jsx)(s.td,{children:"3"}),(0,r.jsx)(s.td,{children:"Bitwise AND — string concatenation with new line"})]})]})]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Note"}),": The ",(0,r.jsx)(s.code,{children:"&"})," operator can be applied to two strings. If you do so, the compiler concatenates the two strings and puts a ",(0,r.jsx)(s.code,{children:"\\r\\n"})," (new line) character pair between them."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"relational-operators",children:"Relational Operators"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Operator token"}),(0,r.jsx)(s.th,{children:"Precedence"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"=="})}),(0,r.jsx)(s.td,{children:"4"}),(0,r.jsx)(s.td,{children:"Equality"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"!="})}),(0,r.jsx)(s.td,{children:"4"}),(0,r.jsx)(s.td,{children:"Non-equality"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"<"})}),(0,r.jsx)(s.td,{children:"5"}),(0,r.jsx)(s.td,{children:"Less than"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"<="})}),(0,r.jsx)(s.td,{children:"5"}),(0,r.jsx)(s.td,{children:"Less than or equal"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:">"})}),(0,r.jsx)(s.td,{children:"5"}),(0,r.jsx)(s.td,{children:"Greater than"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:">="})}),(0,r.jsx)(s.td,{children:"5"}),(0,r.jsx)(s.td,{children:"Greater than or equal"})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"shift-operators",children:"Shift Operators"}),"\n",(0,r.jsx)(s.p,{children:"The bits of the left operand are shifted by the number of bits given by the right operand."}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Operator token"}),(0,r.jsx)(s.th,{children:"Precedence"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"<<"})}),(0,r.jsx)(s.td,{children:"6"}),(0,r.jsx)(s.td,{children:"Shift left"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:">>"})}),(0,r.jsx)(s.td,{children:"6"}),(0,r.jsx)(s.td,{children:"Shift right"})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"basic-arithmetic-operators",children:"Basic Arithmetic Operators"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Operator token"}),(0,r.jsx)(s.th,{children:"Precedence"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"+"})}),(0,r.jsx)(s.td,{children:"7"}),(0,r.jsx)(s.td,{children:"Addition — string concatenation"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"-"})}),(0,r.jsx)(s.td,{children:"7"}),(0,r.jsx)(s.td,{children:"Subtraction"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"*"})}),(0,r.jsx)(s.td,{children:"8"}),(0,r.jsx)(s.td,{children:"Multiplication"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"/"})}),(0,r.jsx)(s.td,{children:"8"}),(0,r.jsx)(s.td,{children:"Division"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"%"})}),(0,r.jsx)(s.td,{children:"8"}),(0,r.jsx)(s.td,{children:"Modulo calculation"})]})]})]}),"\n",(0,r.jsx)(s.h1,{children:"Min-Max operators"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Operator token"}),(0,r.jsx)(s.th,{children:"Precedence"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"<?"})}),(0,r.jsx)(s.td,{children:"9"}),(0,r.jsx)(s.td,{children:"Minimum of the left and right operand"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:">?"})}),(0,r.jsx)(s.td,{children:"9"}),(0,r.jsx)(s.td,{children:"Maximum of the left and right operand"})]})]})]}),"\n",(0,r.jsx)(s.h3,{id:"unary-operators",children:"Unary operators"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Operator token"}),(0,r.jsx)(s.th,{children:"Precedence"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"+"})}),(0,r.jsx)(s.td,{children:"10"}),(0,r.jsx)(s.td,{children:"Unary plus"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"-"})}),(0,r.jsx)(s.td,{children:"10"}),(0,r.jsx)(s.td,{children:"Unary minus"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"~"})}),(0,r.jsx)(s.td,{children:"10"}),(0,r.jsx)(s.td,{children:"Unary bitwise NOT"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"!"})}),(0,r.jsx)(s.td,{children:"10"}),(0,r.jsx)(s.td,{children:"Unary logical NOT"})]})]})]}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsxs)(s.p,{children:["Do not forget, you can change the default precedence with ",(0,r.jsx)(s.code,{children:"("})," and ",(0,r.jsx)(s.code,{children:")"}),", or with ",(0,r.jsx)(s.code,{children:"["})," and ",(0,r.jsx)(s.code,{children:"]"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsxs)(s.p,{children:["The Z80 assembler provides a number of functions that can have zero, one, or more arguments.\nSeveral functions (for example as ",(0,r.jsx)(s.code,{children:"rnd()"}),") have overloads with different signatures. Each\nfunction has a name and a parameter list wrapped into parentheses, the parameters are separated\nby a comma. Of course, parameters can be expressions, and they may invoke other functions, too.\nHere are a few samples:"]}),"\n",(0,r.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,r.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'length("Hello" + " world")'})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"max(value1, value2)"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"sin(pi()/2)"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"sqrt(pear + 3.0)"})})]})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.strong,{children:"Klive"})," support these function signatures:"]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Signature"}),(0,r.jsx)(s.th,{children:"Value"}),(0,r.jsx)(s.th,{children:"Description"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"abs(integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsxs)(s.td,{children:["The absolute value of an ",(0,r.jsx)(s.em,{children:"integer"})," number."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"abs(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsxs)(s.td,{children:["The absolute value of a ",(0,r.jsx)(s.em,{children:"float"})," number."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"acos(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The angle whose cosine is the specified number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"asin(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The angle whose sine is the specified number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"atan(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The angle whose tangent is the specified number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"atan2(float, float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The angle whose tangent is the quotient of two specified numbers."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"attr(integer, integer, boolean, boolean)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsxs)(s.td,{children:["Retrieves the color attribute byte value defined by ",(0,r.jsx)(s.code,{children:"ink"})," (first argument, 0 to 7), ",(0,r.jsx)(s.code,{children:"paper"})," (second argument, 0 to 7), ",(0,r.jsx)(s.code,{children:"bright"})," (third argument, 0 - non-zero), and ",(0,r.jsx)(s.code,{children:"flash"})," (fourth argument, 0 - non-zero). The ",(0,r.jsx)(s.code,{children:"bright"})," and ",(0,r.jsx)(s.code,{children:"flash"})," values are optional."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"attraddr(integer, integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsx)(s.td,{children:"Returns the memory address of the byte specified screen attribute in the given line (first argument, from top to bottom, 0-192) and column (second argument, from left to right, 0-255)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"bright(boolean)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsx)(s.td,{children:"Retrieves the bright flag defined by the attribute (0 - non-zero). It can be ORed to create a color attribute value."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"ceiling(float"}),")"]}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The smallest integral value greater than or equal to the specified number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"cos(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The cosine of the specified angle."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"cosh(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The hyperbolic cosine of the specified angle."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"exp(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.strong,{children:"e"})," raised to the specified power."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"fill(string, integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"string"})}),(0,r.jsx)(s.td,{children:"Creates a new string by concatenating the specified one with the given times."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"flash(boolean)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsx)(s.td,{children:"Retrieves the flash flag defined by the argument (0 - non-zero). It can be ORed to create a color attribute value."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"floor(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The largest integer less than or equal to the specified number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"frac(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The fractional part of the specified number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"high(integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsx)(s.td,{children:"The leftmost 8 bits (MSB) of a 16-bit integer number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"ink(integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsx)(s.td,{children:"Retrieves the three ink bits defined by the color argument (0 to 7). It can be ORed to create a color attribute value."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"int(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsx)(s.td,{children:"The integer part of the specified number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"lcase(string)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"string"})}),(0,r.jsx)(s.td,{children:"The lowercase version of the input string."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"left(string, integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"string"})}),(0,r.jsx)(s.td,{children:"Takes the leftmost characters of the string with the length specified."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"len(string)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsx)(s.td,{children:"The length of the specified string."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"length(string)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsx)(s.td,{children:"The length of the specified string."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"log(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsxs)(s.td,{children:["The natural (base ",(0,r.jsx)(s.strong,{children:"e"}),") logarithm of a specified number."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"log(float, float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The logarithm of a specified number in a specified base."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"log10(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The base 10 logarithm of a specified number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"low(integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsx)(s.td,{children:"The rightmost 8 bits (LSB) of an integer number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"lowercase(string)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"string"})}),(0,r.jsx)(s.td,{children:"The lowercase version of the input string."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"max(integer, integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsxs)(s.td,{children:["The larger of two ",(0,r.jsx)(s.em,{children:"integer"})," numbers."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"max(float, float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsxs)(s.td,{children:["The larger of two ",(0,r.jsx)(s.em,{children:"float"})," numbers."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"min(integer, integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsxs)(s.td,{children:["The smaller of two ",(0,r.jsx)(s.em,{children:"integer"})," numbers."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"min(float, float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsxs)(s.td,{children:["The smaller of two ",(0,r.jsx)(s.em,{children:"float"})," numbers."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"nat()"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsxs)(s.td,{children:["Represents the natural logarithmic base, specified by the constant, ",(0,r.jsx)(s.strong,{children:"e"}),"."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"paper(integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsx)(s.td,{children:"retrieves the three paper bits defined by the argument (0 to 7). It can be ORed to create a color attribute value."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"pi()"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsxs)(s.td,{children:["Represents the ratio of the circumference of a circle to its diameter, specified by the constant, ",(0,r.jsx)(s.strong,{children:"π"}),"."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"pow(float, float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The specified number raised to the specified power."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"right(string, integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"string"})}),(0,r.jsx)(s.td,{children:"Takes the rightmost characters of the string with the length specified."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"round(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsxs)(s.td,{children:["Rounds a ",(0,r.jsx)(s.em,{children:"float"})," value to the nearest integral value."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"round(float, int)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsxs)(s.td,{children:["Rounds a ",(0,r.jsx)(s.em,{children:"float"})," value to a specified number of fractional digits."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"rnd()"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsx)(s.td,{children:"Returns a random 32-bit number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"rnd(integer, integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsx)(s.td,{children:"Returns a random 32-bit integer between the first and second number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"scraddr(integer, integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsx)(s.td,{children:"Retrieves the memory address of the screen pixel byte in the specified line (first argument, from top to bottom, 0-192) and in the specified column (second argument, from left to right, 0-255)."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"sign(integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsxs)(s.td,{children:["Returns an integer that indicates the sign of an ",(0,r.jsx)(s.em,{children:"integer"})," number."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"sign(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsxs)(s.td,{children:["Returns an integer that indicates the sign of a ",(0,r.jsx)(s.em,{children:"float"})," number."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"sin(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The sine of the specified angle."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"sinh(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The hyperbolic sine of the specified angle."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"sqrt(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The square root of a specified number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"str(bool)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"string"})}),(0,r.jsx)(s.td,{children:"Convert the input value to a string."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"str(integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"string"})}),(0,r.jsx)(s.td,{children:"Convert the input value to a string."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"str(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"string"})}),(0,r.jsx)(s.td,{children:"Convert the input value to a string."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"substr(string, integer, integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"string"})}),(0,r.jsx)(s.td,{children:"Takes a substring of the specified string from the given position (zero-based) and length."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"tan(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The tangent of the specified angle."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"tanh(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"float"})}),(0,r.jsx)(s.td,{children:"The hyperbolic tangent of the specified angle."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"truncate(float)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsx)(s.td,{children:"Calculates the integral part of a specified number."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"ucase(string)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"string"})}),(0,r.jsx)(s.td,{children:"The uppercase version of the input string."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"uppercase(string)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"string"})}),(0,r.jsx)(s.td,{children:"The uppercase version of the input string."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"word(integer)"})}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"integer"})}),(0,r.jsx)(s.td,{children:"The rightmost 16 bits of an integer number."})]})]})]}),"\n",(0,r.jsxs)(s.p,{children:["Functions have the same precedence as the unary operators (such as the unary ",(0,r.jsx)(s.code,{children:"+"})," and ",(0,r.jsx)(s.code,{children:"-"}),")."]}),"\n",(0,r.jsx)(s.h2,{id:"parse-time-functions",children:"Parse Time Functions"}),"\n",(0,r.jsxs)(s.p,{children:["The compiler provides a construct, ",(0,r.jsx)(s.em,{children:"parse time functions"}),". These functions can receive a Z80 assembly language token and transform them into other language constructs. As the name suggests, these functions run in the parsing phase before the compiler emits code."]}),"\n",(0,r.jsxs)(s.h3,{id:"the-lreg-and-hreg-parse-time-functions",children:["The ",(0,r.jsx)(s.code,{children:"lreg()"})," and ",(0,r.jsx)(s.code,{children:"hreg()"})," Parse Time Functions"]}),"\n",(0,r.jsxs)(s.p,{children:["These functions accept a 16-bit register pair token (",(0,r.jsx)(s.strong,{children:"BC"}),", ",(0,r.jsx)(s.strong,{children:"DE"}),", ",(0,r.jsx)(s.strong,{children:"HL"}),", ",(0,r.jsx)(s.strong,{children:"IX"}),", or ",(0,r.jsx)(s.strong,{children:"IY"}),") and retrieve the lower\nor higher 8-bit register half of their input. Here is a sample code snippet:"]}),"\n",(0,r.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,r.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld a,lreg(bc)"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld c,hreg(hl)"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld a,lreg(ix)"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld l,hreg(de)"})})]})}),"\n",(0,r.jsx)(s.p,{children:"The compiler sees as if you wrote this:"}),"\n",(0,r.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,r.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld a,c"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld c,h"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld a,ixl"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld l,d"})})]})}),"\n",(0,r.jsxs)(s.h3,{id:"the-textof-parse-time-function",children:["The ",(0,r.jsx)(s.code,{children:"textof()"})," Parse Time Function"]}),"\n",(0,r.jsxs)(s.p,{children:["You can use ",(0,r.jsx)(s.code,{children:"textof()"}),", which accepts these kinds of tokens: mnemonic, register, register indirection, C port, or condition. This function translates these tokens into uppercase string constants that represent them.\nHere is a sample:"]}),"\n",(0,r.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,r.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".dm textof(ldir)"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".dm textof(bc)"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".dm textof((de))"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".dm textof((c))"})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".dm textof(nz)"})})]})}),"\n",(0,r.jsx)(s.p,{children:"The compiler sees as if you wrote this code:"}),"\n",(0,r.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,r.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.dm "LDIR"'})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.dm "BC"'})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.dm "(DE)"'})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.dm "(C)"'})}),"\n",(0,r.jsx)(s.span,{className:"line",children:(0,r.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.dm "NZ"'})})]})})]})}function MDXContent(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,l.a)(),e.components);return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)}let h={MDXContent,pageOpts:{filePath:"pages/z80-assembly/expressions.mdx",route:"/z80-assembly/expressions",pageMap:[{kind:"Meta",data:{index:"Introduction","getting-started":"Getting Started","z80-assembly":"Klive Z80 Assembler"}},{kind:"Folder",name:"getting-started",route:"/getting-started",children:[{kind:"Meta",data:{installation:"Installing Klive"}},{kind:"MdxPage",name:"installation",route:"/getting-started/installation"}]},{kind:"MdxPage",name:"index",route:"/"},{kind:"Folder",name:"z80-assembly",route:"/z80-assembly",children:[{kind:"Meta",data:{"z80-assembler":"Assembler Overview","language-structure":"Language Structure",expressions:"Expressions","z80-instructions":"Z80 Instructions",pragmas:"Pragmas",statements:"Assembler Statements",macros:"Macros",structs:"Structs"}},{kind:"MdxPage",name:"expressions",route:"/z80-assembly/expressions"},{kind:"MdxPage",name:"language-structure",route:"/z80-assembly/language-structure"},{kind:"MdxPage",name:"macros",route:"/z80-assembly/macros"},{kind:"MdxPage",name:"pragmas",route:"/z80-assembly/pragmas"},{kind:"MdxPage",name:"statements",route:"/z80-assembly/statements"},{kind:"MdxPage",name:"structs",route:"/z80-assembly/structs"},{kind:"MdxPage",name:"z80-assembler",route:"/z80-assembly/z80-assembler"},{kind:"MdxPage",name:"z80-instructions",route:"/z80-assembly/z80-instructions"}]}],flexsearch:{codeblocks:!0},title:"Expressions",headings:c},pageNextRoute:"/z80-assembly/expressions",nextraLayout:i.ZP,themeConfig:d.Z};s.default=(0,t.j)(h)},3911:function(e,s,n){"use strict";n.d(s,{Z:function(){return t}});var r=n(5893);n(7294);var t={logo:(0,r.jsx)(()=>(0,r.jsxs)("svg",{width:"118",height:"50",viewBox:"0 0 294 124",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[(0,r.jsx)("rect",{width:"100%",height:"100%",fill:"#000"}),(0,r.jsx)("rect",{width:"100%",height:"100%",stroke:"black",strokeWidth:4}),(0,r.jsx)("rect",{x:12,y:0,width:7,height:"100%",fill:"#007acc"}),(0,r.jsx)("path",{d:"M 293 103 l -21 21 l -21 0 l 42 -42",fill:"#0ff"}),(0,r.jsx)("path",{d:"M 293 82 l -42 42 l -21 0 l 63 -63",fill:"#0f0"}),(0,r.jsx)("path",{d:"M 293 61 l -63 63 l -21 0 l 84 -84",fill:"#ff0"}),(0,r.jsx)("path",{d:"M 293 40 l -84 84 l -21 0 l 105 -105",fill:"#f00"}),(0,r.jsx)("path",{d:"M 41 12 l 0 42 l 7 0 l 0 -42 M 48 26 l 14 0 l 0 7 l -14 0 M 62 19 l 7 0 l 0 7 l -7 0 M 69 12 l 7 0 l 0 7 l -7 0 M 62 33 l 7 0 l 0 7 l -7 0 M 69 40 l 7 0 l 0 7 l -7 0 M 76 47 l 7 0 l 0 7 l -7 0",fill:"#e0e0e0"}),(0,r.jsx)("path",{d:"M 90 12 l 0 42 l 35 0 l 0 -7 l -28 0 l 0 -35",fill:"#e0e0e0"}),(0,r.jsx)("path",{d:"M 139 12 l 35 0 l 0 7 l -14 0 l 0 28 l 14 0 l 0 7 l -35 0 l 0 -7 l 14 0 l 0 -28 l -14 0",fill:"#e0e0e0"}),(0,r.jsx)("path",{d:"M 190 12 l 0 28 l 7 0 l 0 -28 M 195 40 l 7 0 l 0 7 l -7 0 M 202 47 l 14 0 l 0 7 l -14 0 M 216 40 l 7 0 l 0 7 l -7 0 M 223 12 l 0 28 l 7 0 l 0 -28",fill:"#e0e0e0"}),(0,r.jsx)("path",{d:"M 237 12 l 0 42 l 42 0 l 0 -7 l -35 0 l 0 -14 l 28 0 l 0 -7 l -28 0 l 0 -7 l 35 0 l 0 -7",fill:"#e0e0e0"}),(0,r.jsx)("path",{d:"M 56 68 l 7 0 l 0 7 l -7 0 M 49 82 l 14 0 l 0 21 l 7 0 l 0 7 l -21 0 l 0 -7 l 7 0 l 0 -14 l -7 0",fill:"#e0e0e0"}),(0,r.jsx)("path",{d:"M 119 68 l 7 0 l 0 42 l -28 0 l 0 -7 l 21 0 M 119 82 l -21 0 l 0 7 l 21 0 M 98 89 l 0 14 l -7 0 l 0 -14",fill:"#e0e0e0"}),(0,r.jsx)("path",{d:"M 147 75 l 21 0 l 0 7 l -21 0 M 140 82 l 0 21 l 7 0 l 0 -21 M 147 103 l 28 0 l 0 7 l -28 0 M 168 82 l 7 0 l 0 7 l -7 0 M 147 89 l 21 0 l 0 7 l -21 0",fill:"#e0e0e0"}),(0,r.jsx)("defs",{children:(0,r.jsxs)("linearGradient",{id:"paint0_linear_2790_21058",x1:"11.9663",y1:"6.54545",x2:"22.5351",y2:"22.5385",gradientUnits:"userSpaceOnUse",children:[(0,r.jsx)("stop",{stopColor:"#D62400"}),(0,r.jsx)("stop",{offset:"1",stopColor:"#A02020"})]})})]}),{}),logoLink:"https://dotneteer.github.io/kliveide",editLink:{text:null},feedback:{content:null},project:{link:"https://github.com/dotneteer/kliveide"}}}},function(e){e.O(0,[774,546,888,179],function(){return e(e.s=4313)}),_N_E=e.O()}]);