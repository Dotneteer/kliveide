(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3300],{1596:(e,t,s)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/z80-assembly/directives",function(){return s(5256)}])},5256:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>l,useTOC:()=>o});var n=s(7876),a=s(1807),r=s(5736),i=s(9707);function o(e){return[{value:"The #IF Directive",id:"the-if-directive",depth:2},{value:"The #IFDEF and #IFNDEF Directives",id:"the-ifdef-and-ifndef-directives",depth:2},{value:"The #IFMOD and #IFNMOD Directives",id:"the-ifmod-and-ifnmod-directives",depth:2},{value:"The #DEFINE and #UNDEF Directives",id:"the-define-and-undef-directives",depth:2},{value:"The #INCLUDE Directive",id:"the-include-directive",depth:2}]}let l=(0,a.e)(function(e){let{toc:t=o(e)}=e,s={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",span:"span",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{children:"Directives"}),"\n",(0,n.jsxs)(s.p,{children:["The directives of the ",(0,n.jsx)(s.strong,{children:"Klive"})," Z80 Assembler representation are used for preprocessing, similarly to those in the C and C++ programming languages, though their semantics are different."]}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsx)(s.p,{children:"Although you can add comments to the end of directives, they may not have labels."}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:t[0].id,children:t[0].value}),"\n",(0,n.jsxs)(s.p,{children:["You can use this directive for conditional compilation. The argument of the directive is a\nconditional expression, and it determines on which branch the compilation goes on. ",(0,n.jsx)(s.strong,{children:"#IF"}),"\nworks in concert with ",(0,n.jsx)(s.code,{children:"#ELSE"})," and ",(0,n.jsx)(s.code,{children:"#ENDIF"}),":"]}),"\n",(0,n.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,n.jsxs)(s.code,{children:[(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"; Block #1"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#if 2 > 3"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    ld a,b"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#endif"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"}})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"; Block #2;"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#if 2 < 3"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    nop"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#else"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    ld b,c"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#endif"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"}})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"; Block #3"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#if $ > $+2"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    nop"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#else"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    ld b,c"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#endif"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Here, since the condition is false, ",(0,n.jsx)(s.strong,{children:"Block #1"})," does not generate output. ",(0,n.jsx)(s.strong,{children:"Block #2"})," emits a ",(0,n.jsx)(s.code,{children:"nop"}),", as the condition is true. The false condition value in ",(0,n.jsx)(s.strong,{children:"Block #3"})," moves code parsing to the ",(0,n.jsx)(s.code,{children:"#else"})," branch, emitting a ",(0,n.jsx)(s.code,{children:"ld b,c"})," instruction."]}),"\n",(0,n.jsx)(s.h2,{id:t[1].id,children:t[1].value}),"\n",(0,n.jsxs)(s.p,{children:["These directives work similarly to #IF. However, they check if a particular symbol has (",(0,n.jsx)(s.code,{children:"#IFDEF"}),") or has not (",(0,n.jsx)(s.code,{children:"#IFNDEF"}),") been defined. So, their single argument is an identifier name."]}),"\n",(0,n.jsx)(s.h2,{id:t[2].id,children:t[2].value}),"\n",(0,n.jsxs)(s.p,{children:["These directives work similarly to ",(0,n.jsx)(s.code,{children:"#IF"}),". However, these check if the codeâ€™s current model is specified with the identifier following the ",(0,n.jsx)(s.code,{children:"IFMOD"})," or ",(0,n.jsx)(s.code,{children:"IFNMOD"})," pragma. Here is a short sample of using this directive:"]}),"\n",(0,n.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,n.jsxs)(s.code,{children:[(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    .model Spectrum48"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"}})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#ifmod Spectrum128"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    BorderColor: .equ 5"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    RetAddr: .equ #2604"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#else"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    BorderColor: .equ 4"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    RetAddr: .equ #12a2"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#endif"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"}})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"Start:"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"	.org #8000"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    ld a,BorderColor"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    out (#fe),a"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    jp RetAddr"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["You can use only these identifiers with this pragma (case-insensitively): ",(0,n.jsx)(s.code,{children:"SPECTRUM48"}),",\n",(0,n.jsx)(s.code,{children:"SPECTRUM128"}),", ",(0,n.jsx)(s.code,{children:"SPECTRUMP3"}),", ",(0,n.jsx)(s.code,{children:"NEXT"}),"."]}),"\n",(0,n.jsx)(s.h2,{id:t[3].id,children:t[3].value}),"\n",(0,n.jsxs)(s.p,{children:["You can explicitly define a symbol with the ",(0,n.jsx)(s.code,{children:"#DEFINE"})," directive. Such a symbol has no concrete value, just its existence. With ",(0,n.jsx)(s.code,{children:"#UNDEF"}),", you may declare a symbol undefined."]}),"\n",(0,n.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,n.jsxs)(s.code,{children:[(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#define SYMB"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"}})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"; Block #1"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#ifdef SYMB"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    ld a,b"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#endif"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"}})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#undef SYMB"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"}})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"; Block #2;"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#ifdef SYMB"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    nop"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#else"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"    ld b,c"})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:"#endif"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["According to this definition, the first block emits a ",(0,n.jsx)(s.code,{children:"ld, a,b"})," instruction, and the second one emits a ",(0,n.jsx)(s.code,{children:"ld b,c"})," instruction."]}),"\n",(0,n.jsx)(s.h2,{id:t[4].id,children:t[4].value}),"\n",(0,n.jsx)(s.p,{children:"You can use this directive to load and process a source file from within another source file."}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"#INCLUDE"})," accepts a string that names a file with its extension. The file name may contain either an absolute or a relative path. When a relative path is provided, its starting point is always the source file with the ",(0,n.jsx)(s.code,{children:"#INCLUDE"})," directive."]}),"\n",(0,n.jsxs)(s.p,{children:["Assume that this code is in the ",(0,n.jsx)(s.code,{children:"C:\\Work"})," folder:"]}),"\n",(0,n.jsx)(s.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"",children:(0,n.jsxs)(s.code,{children:[(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:'#include "Symbol.z80asm"'})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:'#include "./MyRules.z80asm"'})}),"\n",(0,n.jsx)(s.span,{children:(0,n.jsx)(s.span,{style:{color:"#a4a4a4"},children:'#include "/Common/scroll.z80asm"'})})]})}),"\n",(0,n.jsxs)(s.p,{children:["The compiler will check the ",(0,n.jsx)(s.code,{children:"C:\\Work"})," folder for the first two include files and ",(0,n.jsx)(s.code,{children:"C:\\Work\\Commmon"})," for the third one."]})]})},"/z80-assembly/directives",{filePath:"pages/z80-assembly/directives.mdx",timestamp:1752391909e3,pageMap:r.O,frontMatter:{},title:"Directives"},"undefined"==typeof RemoteContent?o:RemoteContent.useTOC)},5736:(e,t,s)=>{"use strict";s.d(t,{O:()=>n});let n=[{data:{index:"Introduction","getting-started":"Getting Started","working-with-ide":"Working with the IDE",howto:"How To","z80-assembly":"Klive Z80 Assembler",contribute:"Contribute",scripting:"Scripting","commands-reference":"Commands Reference","machine-types":"Machine Types"}},{name:"commands-reference",route:"/commands-reference",frontMatter:{sidebarTitle:"Commands Reference"}},{name:"contribute",route:"/contribute",children:[{data:{"get-source":"Get the source code","improve-docs":"Improve the documentation"}},{name:"get-source",route:"/contribute/get-source",frontMatter:{sidebarTitle:"Get Source"}},{name:"improve-docs",route:"/contribute/improve-docs",frontMatter:{sidebarTitle:"Improve Docs"}}]},{name:"getting-started",route:"/getting-started",children:[{data:{installation:"Installing Klive","first-run":"Running Klive",keyboard:"Using the Keyboard",tapes:"Loading from Tape","save-programs":"Saving Files","creating-project":"Creating a Klive Project"}},{name:"creating-project",route:"/getting-started/creating-project",frontMatter:{sidebarTitle:"Creating Project"}},{name:"first-run",route:"/getting-started/first-run",frontMatter:{sidebarTitle:"First Run"}},{name:"installation",route:"/getting-started/installation",frontMatter:{sidebarTitle:"Installation"}},{name:"keyboard",route:"/getting-started/keyboard",frontMatter:{sidebarTitle:"Keyboard"}},{name:"save-programs",route:"/getting-started/save-programs",frontMatter:{sidebarTitle:"Save Programs"}},{name:"tapes",route:"/getting-started/tapes",frontMatter:{sidebarTitle:"Tapes"}}]},{name:"howto",route:"/howto",children:[{data:{"ide-startup":"IDE startup options",diagnostics:"Diagnostics",shortcuts:"Changing keyboard shortcuts","file-extensions":"Changing default file extensions","instant-screen":"Using the Instant Screen","always-on-top":"Keeping the Emulator always on top","measure-t-states":"Measuring T-states"}},{name:"always-on-top",route:"/howto/always-on-top",frontMatter:{sidebarTitle:"Always on Top"}},{name:"diagnostics",route:"/howto/diagnostics",frontMatter:{sidebarTitle:"Diagnostics"}},{name:"file-extensions",route:"/howto/file-extensions",frontMatter:{sidebarTitle:"File Extensions"}},{name:"ide-startup",route:"/howto/ide-startup",frontMatter:{sidebarTitle:"Ide Startup"}},{name:"instant-screen",route:"/howto/instant-screen",frontMatter:{sidebarTitle:"Instant Screen"}},{name:"measure-t-states",route:"/howto/measure-t-states",frontMatter:{sidebarTitle:"Measure T States"}},{name:"shortcuts",route:"/howto/shortcuts",frontMatter:{sidebarTitle:"Shortcuts"}}]},{name:"index",route:"/",frontMatter:{sidebarTitle:"Index"}},{name:"machine-types",route:"/machine-types",frontMatter:{sidebarTitle:"Machine Types"}},{name:"project-templates",route:"/project-templates",frontMatter:{sidebarTitle:"Project Templates"}},{name:"scripting",route:"/scripting",children:[{data:{overview:"Overview",syntax:"Scripting Syntax"}},{name:"overview",route:"/scripting/overview",frontMatter:{sidebarTitle:"Overview"}},{name:"syntax",route:"/scripting/syntax",frontMatter:{sidebarTitle:"Syntax"}}]},{name:"working-with-ide",route:"/working-with-ide",children:[{data:{"project-explorer":"The Project Explorer","editing-code":"Editing Code","run-debug":"Running & Debugging Code","exporting-code":"Exporting Code",zxb:"ZXBASIC Integration",sjasmp:"SJASMPLUS Integration","ide-settings":"IDE Settings",cpu:"The CPU View",ula:"The ULA View",memory:"The Memory View",disassembly:"The Disassembly View",breakpoints:"The Breakpoints View","system-vars":"The System Variables View",basic:"The BASIC Listing",commands:"Interactive Commands","build-system":"The Build System"}},{name:"basic",route:"/working-with-ide/basic",frontMatter:{sidebarTitle:"Basic"}},{name:"breakpoints",route:"/working-with-ide/breakpoints",frontMatter:{sidebarTitle:"Breakpoints"}},{name:"build-system",route:"/working-with-ide/build-system",frontMatter:{sidebarTitle:"Build System"}},{name:"commands",route:"/working-with-ide/commands",frontMatter:{sidebarTitle:"Commands"}},{name:"cpu",route:"/working-with-ide/cpu",frontMatter:{sidebarTitle:"Cpu"}},{name:"disassembly",route:"/working-with-ide/disassembly",frontMatter:{sidebarTitle:"Disassembly"}},{name:"editing-code",route:"/working-with-ide/editing-code",frontMatter:{sidebarTitle:"Editing Code"}},{name:"exporting-code",route:"/working-with-ide/exporting-code",frontMatter:{sidebarTitle:"Exporting Code"}},{name:"ide-settings",route:"/working-with-ide/ide-settings",frontMatter:{sidebarTitle:"Ide Settings"}},{name:"memory",route:"/working-with-ide/memory",frontMatter:{sidebarTitle:"Memory"}},{name:"project-explorer",route:"/working-with-ide/project-explorer",frontMatter:{sidebarTitle:"Project Explorer"}},{name:"run-debug",route:"/working-with-ide/run-debug",frontMatter:{sidebarTitle:"Run Debug"}},{name:"sjasmp",route:"/working-with-ide/sjasmp",frontMatter:{sidebarTitle:"Sjasmp"}},{name:"system-vars",route:"/working-with-ide/system-vars",frontMatter:{sidebarTitle:"System Vars"}},{name:"ula",route:"/working-with-ide/ula",frontMatter:{sidebarTitle:"Ula"}},{name:"zxb",route:"/working-with-ide/zxb",frontMatter:{sidebarTitle:"Zxb"}}]},{name:"z80-assembly",route:"/z80-assembly",children:[{data:{"z80-assembler":"Assembler Overview","language-structure":"Language Structure",directives:"Directives",expressions:"Expressions","z80-instructions":"Z80 Instructions",pragmas:"Pragmas",statements:"Assembler Statements",macros:"Macros",structs:"Structs"}},{name:"directives",route:"/z80-assembly/directives",frontMatter:{sidebarTitle:"Directives"}},{name:"expressions",route:"/z80-assembly/expressions",frontMatter:{sidebarTitle:"Expressions"}},{name:"language-structure",route:"/z80-assembly/language-structure",frontMatter:{sidebarTitle:"Language Structure"}},{name:"macros",route:"/z80-assembly/macros",frontMatter:{sidebarTitle:"Macros"}},{name:"pragmas",route:"/z80-assembly/pragmas",frontMatter:{sidebarTitle:"Pragmas"}},{name:"statements",route:"/z80-assembly/statements",frontMatter:{sidebarTitle:"Statements"}},{name:"structs",route:"/z80-assembly/structs",frontMatter:{sidebarTitle:"Structs"}},{name:"z80-assembler",route:"/z80-assembly/z80-assembler",frontMatter:{sidebarTitle:"Z80 Assembler"}},{name:"z80-instructions",route:"/z80-assembly/z80-instructions",frontMatter:{sidebarTitle:"Z80 Instructions"}}]}]}},e=>{var t=t=>e(e.s=t);e.O(0,[1807,636,6593,8792],()=>t(1596)),_N_E=e.O()}]);