(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[527],{6858:function(e,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/z80-assembly/pragmas",function(){return a(8624)}])},8624:function(e,s,a){"use strict";a.r(s),a.d(s,{__toc:function(){return o}});var t=a(5893),n=a(2673),l=a(7758),r=a(5034);a(7954);var i=a(2643);let o=[{depth:2,value:"The ORG pragma",id:"the-org-pragma"},{depth:2,value:"The XORG pragma",id:"the-xorg-pragma"},{depth:2,value:"The ENT pragma",id:"the-ent-pragma"},{depth:2,value:"The XENT pragma",id:"the-xent-pragma"},{depth:2,value:"The DISP pragma",id:"the-disp-pragma"},{depth:2,value:"The BANK pragma",id:"the-bank-pragma"},{depth:3,value:"Using BANK without an offset",id:"using-bank-without-an-offset"},{depth:3,value:"Using BANK with an offset",id:"using-bank-with-an-offset"},{depth:3,value:"Using BANK with ORG",id:"using-bank-with-org"},{depth:3,value:"Using BANK with offset and ORG",id:"using-bank-with-offset-and-org"},{depth:3,value:"Using multiple BANK directives",id:"using-multiple-bank-directives"},{depth:3,value:"Restrictions with BANK",id:"restrictions-with-bank"},{depth:2,value:"The EQU pragma",id:"the-equ-pragma"},{depth:2,value:"The VAR pragma",id:"the-var-pragma"},{depth:2,value:"The INJECTOPT pragma",id:"the-injectopt-pragma"},{depth:3,value:"cursork",id:"cursork"},{depth:3,value:"subroutine",id:"subroutine"},{depth:2,value:"The DEFB pragma",id:"the-defb-pragma"},{depth:2,value:"The DEFW pragma",id:"the-defw-pragma"},{depth:2,value:"The DEFM pragma",id:"the-defm-pragma"},{depth:2,value:"The DEFN pragma",id:"the-defn-pragma"},{depth:2,value:"The DEFC pragma",id:"the-defc-pragma"},{depth:2,value:"The DEFH pragma",id:"the-defh-pragma"},{depth:2,value:"The DEFS pragma",id:"the-defs-pragma"},{depth:2,value:"The FILLB pragma",id:"the-fillb-pragma"},{depth:2,value:"The FILLW pragma",id:"the-fillw-pragma"},{depth:2,value:"The SKIP pragma",id:"the-skip-pragma"},{depth:2,value:"The EXTERN pragma",id:"the-extern-pragma"},{depth:2,value:"The MODEL pragma",id:"the-model-pragma"},{depth:2,value:"The ALIGN pragma",id:"the-align-pragma"},{depth:2,value:"The TRACE and TRACEHEX pragmas",id:"the-trace-and-tracehex-pragmas"},{depth:2,value:"The RNDSEED pragma",id:"the-rndseed-pragma"},{depth:2,value:"The DEFGX pragma",id:"the-defgx-pragma"},{depth:2,value:"The DEFG pragma",id:"the-defg-pragma"},{depth:2,value:"The ERROR Pragma",id:"the-error-pragma"},{depth:2,value:"The INCLUDEBIN Pragma",id:"the-includebin-pragma"},{depth:2,value:"The COMPAREBIN pragma",id:"the-comparebin-pragma"}];function c(e){let s=Object.assign({h1:"h1",p:"p",code:"code",strong:"strong",h2:"h2",pre:"pre",span:"span",blockquote:"blockquote",a:"a",h3:"h3",ul:"ul",li:"li",em:"em"},(0,i.a)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{children:"Pragmas"}),"\n",(0,t.jsx)(s.p,{children:"The compiler understands several pragmas that — thought they are not Z80 instructions — they influence the emitted code. Each pragma has two alternative syntax constructs, one with a dot prefix and another without."}),"\n",(0,t.jsxs)(s.p,{children:["For example, you can write ",(0,t.jsx)(s.code,{children:"ORG"})," or ",(0,t.jsx)(s.code,{children:".ORG"})," to use the ",(0,t.jsx)(s.strong,{children:"ORG"})," pragma."]}),"\n",(0,t.jsx)(s.h2,{id:"the-org-pragma",children:"The ORG pragma"}),"\n",(0,t.jsxs)(s.p,{children:["With the ",(0,t.jsx)(s.strong,{children:"ORG"})," pragma, you define where to place the compiled Z80 code when you run it."]}),"\n",(0,t.jsx)(s.p,{children:"For example, the following line sets this location to the 0x6000 address:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".org #6000"})})})}),"\n",(0,t.jsxs)(s.p,{children:["If you do not use ",(0,t.jsx)(s.strong,{children:"ORG"}),", the default address is 0x8000."]}),"\n",(0,t.jsxs)(s.p,{children:["You can apply multiple ",(0,t.jsx)(s.strong,{children:"ORG"})," pragmas in your source code. Each usage creates a new segment in the assembler output. Take a look at this code:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld h,a"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".org #8100"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld d,a"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".org #8200"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld b,a"})})]})}),"\n",(0,t.jsxs)(s.p,{children:["This code generates three output segments, each with one emitted byte representing the corresponding ",(0,t.jsx)(s.code,{children:"LD"})," operation. The first segment will start at 0x8000 (default), the second at 0x8100, and the third at 0x8200."]}),"\n",(0,t.jsx)(s.h2,{id:"the-xorg-pragma",children:"The XORG pragma"}),"\n",(0,t.jsxs)(s.p,{children:["With the ",(0,t.jsx)(s.strong,{children:"XORG"})," pragma, you define the start address of a specific code section (the section started with the previous ",(0,t.jsx)(s.code,{children:".ORG"}),") to use when exporting to Intel HEX format."]}),"\n",(0,t.jsx)(s.p,{children:"For example, the following line sets this location to the 0x0000 address; however, the code section starts at 0x6000."}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".org #6000"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".xorg #0"})})]})}),"\n",(0,t.jsxs)(s.p,{children:["If you try to use multiple ",(0,t.jsx)(s.code,{children:".XORG"})," within a code section, the assembler raises an error:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".org #6000"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".xorg #0"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    ld a,b"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    ; ..."})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".xorg #1000 ; This line will cause an error message"})})]})}),"\n",(0,t.jsx)(s.h2,{id:"the-ent-pragma",children:"The ENT pragma"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"ENT"})," pragma defines the entry code of the program when you start it. If you do not apply ",(0,t.jsx)(s.strong,{children:"ENT"})," in your code, the entry point will be the first address of the very first output code segment. Here's a sample:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".org #6200"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld hl,#4000"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".ent $"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"jp #6100"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".org #6100"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"call MyCode"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"..."})})]})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:".ent $"})," pragma will sign the address of the ",(0,t.jsx)(s.code,{children:"jp #6100"})," instruction as the entry address of the code. Should you omit the ",(0,t.jsx)(s.strong,{children:"ENT"})," pragma from this code, the entry point would be0x6200, as that is the start of the very first output segment, even though there is another segment starting at 0x6100."]}),"\n",(0,t.jsx)(s.h2,{id:"the-xent-pragma",children:"The XENT pragma"}),"\n",(0,t.jsxs)(s.p,{children:["The IDE provides a command, ",(0,t.jsx)(s.strong,{children:"Export Code"}),", which allows you to create a LOAD block that automatically starts the code. When you run the code from the IDE, the address specified with the ",(0,t.jsx)(s.strong,{children:"ENT"})," pragma is used. However, the auto LOAD block uses the ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"RANDOMIZE USR address"})})," pattern, and you may need to define a different entry address that can be closed with a ",(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"RET"})})," statement. The ",(0,t.jsx)(s.strong,{children:"XENT"})," pragma sets this address."]}),"\n",(0,t.jsx)(s.p,{children:"Here's a sample:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"start: "})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"	.org #8000"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"	.ent #8000"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"	call SetBorder"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"	jp #12ac"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"SetBorder:"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"	.xent $"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"	ld a,4"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"	out (#fe),a"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"	ret"})})]})}),"\n",(0,t.jsxs)(s.p,{children:["The IDE will use #8000 — according to the ",(0,t.jsx)(s.code,{children:".ent #8000"})," pragma — when starting the code from the IDE. Nonetheless, the exported code will offer #8006 — according to the ",(0,t.jsx)(s.code,{children:".xent $"})," pragma — as the startup code address."]}),"\n",(0,t.jsx)(s.h2,{id:"the-disp-pragma",children:"The DISP pragma"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"DISP"})," pragma allows you to define a displacement for the code. The value affects the ",(0,t.jsx)(s.code,{children:"$"})," token representing the current assembly address. Your code is placed according to the ",(0,t.jsx)(s.strong,{children:"ORG"})," of the particular output segment, but the assembly address is always displaced with the value according to ",(0,t.jsx)(s.strong,{children:"DISP"}),". Take a look at this sample:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".org #6000"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".disp #1000"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld hl,$"})})]})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"ld hl,$"})," instruction will be placed to the 0x6000 address, but it will be equivalent\nwith the ",(0,t.jsx)(s.code,{children:"ld hl,#7000"})," statement due to the ",(0,t.jsx)(s.code,{children:".disp #1000"})," displacement."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsx)(s.p,{children:"Of course, you can use negative displacement, too."}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"the-bank-pragma",children:"The BANK pragma"}),"\n",(0,t.jsxs)(s.p,{children:["The ZX Spectrum 128K/2A/+2A/+3/+3E models handle 16K memory pages (banks) that can be paged into particular memory slots. (You can find more information about this ",(0,t.jsx)(s.a,{href:"https://www.worldofspectrum.org/faq/reference/128kreference.htm",children:"here"}),".)"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"BANK"})," pragma lets you declare that you want to put the Z80 Assembly code in a specific memory bank. When you export the compiled output, the ",(0,t.jsx)(s.strong,{children:"Export code"})," command of the IDE creates a loader that reads the code and places it on the specified memory page."]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"BANK"})," pragma accepts two parameters. The first is the bank number (so it must be between 0 and 7). The second one is an optional offset value (between 0 and 16383), which indicates the start offset within the bank. If you omit this, the default value is zero. By default, the Klive Assembler assumes that the start address of the code in the bank is ",(0,t.jsx)(s.code,{children:"$C000"}),". Nonetheless, you can specify any other value."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note"}),": You need to apply the ",(0,t.jsx)(s.code,{children:".model Spectrum128"})," pragma at the top of your code so that you can use ",(0,t.jsx)(s.code,{children:".bank"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"using-bank-without-an-offset",children:"Using BANK without an offset"}),"\n",(0,t.jsx)(s.p,{children:"Let's assume you have this code:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".model Spectrum128"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; ..."})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".bank 3"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  call yellow"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ret"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"yellow:"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld a,6"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  out (#fe),a"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ret"})})]})}),"\n",(0,t.jsx)(s.p,{children:"The compiler emits this code (and later, the loader takes care that it goes to bank #3):"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0000: call #C004  ; yellow"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0003: ret"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0004: ld a,#06    ; this is yellow (#C004)"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0006: out (#FE),a"})})]})}),"\n",(0,t.jsx)(s.p,{children:"The offset values at the beginning of the lines show the byte offset within the 16K memory bank."}),"\n",(0,t.jsx)(s.h3,{id:"using-bank-with-an-offset",children:"Using BANK with an offset"}),"\n",(0,t.jsx)(s.p,{children:"Let's modify the previous code by adding an offset value:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".model Spectrum128"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; ..."})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".bank 3, #100"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  call yellow"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ret"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"yellow:"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld a,6"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  out (#fe),a"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ret"})})]})}),"\n",(0,t.jsx)(s.p,{children:"Now, the compiler emits similar code, but its start address is #C100 (#100 away from the default #C000):"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0100: call #C104  ; yellow"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0103: ret"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0104: ld a,#06    ; this is yellow (#C104)"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0106: out (#FE),a"})})]})}),"\n",(0,t.jsxs)(s.p,{children:["Though we're wasting the first 256 bytes of the page, the ",(0,t.jsx)(s.strong,{children:"Export"})," command does not output those bytes. The loader knows that it should load the code from address #C100."]}),"\n",(0,t.jsx)(s.h3,{id:"using-bank-with-org",children:"Using BANK with ORG"}),"\n",(0,t.jsx)(s.p,{children:"Though the default address to compile the code is #C000, you can change it. For example, Bank #2 is paged into the #8000-#BFFF\nmemory range (slot 2), so it seems natural to use the #8000 address like this:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".model Spectrum128"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; ..."})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".bank 2"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".org #8000"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  call yellow"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ret"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"yellow:"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld a,6"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  out (#fe),a"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ret"})})]})}),"\n",(0,t.jsx)(s.p,{children:"As you expect, this is the output:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0000: call #8004  ; yellow"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0003: ret"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0004: ld a,#06    ; this is yellow (#8004)"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0006: out (#FE),a"})})]})}),"\n",(0,t.jsx)(s.h3,{id:"using-bank-with-offset-and-org",children:"Using BANK with offset and ORG"}),"\n",(0,t.jsx)(s.p,{children:"You can combine the offset of the bank with ORG:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".bank 2, #100"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".org #8000"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  call yellow"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ret"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"yellow:"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld a,6"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  out (#fe),a"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ret"})})]})}),"\n",(0,t.jsx)(s.p,{children:"The output is probably different from the one you expect:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0100: call #8004  ; yellow"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0103: ret"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0104: ld a,#06    ; this is yellow (#8004)"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0106: out (#FE),a"})})]})}),"\n",(0,t.jsx)(s.p,{children:"As you can see, the code stream is the same as in the previous case; however, here, the code starts at offset #100."}),"\n",(0,t.jsx)(s.h3,{id:"using-multiple-bank-directives",children:"Using multiple BANK directives"}),"\n",(0,t.jsxs)(s.p,{children:["As you may need multiple memory banks in your program, you can use multiple ",(0,t.jsx)(s.code,{children:"BANK"})," pragmas, like in this example:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".bank 1"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; Here is the code for bank #1"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; ..."})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".bank 3"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; Here is the code for bank #3"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; ..."})})]})}),"\n",(0,t.jsx)(s.h3,{id:"restrictions-with-bank",children:"Restrictions with BANK"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"BANK"})," cannot have a label."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"BANK"})," cannot be used with the ZX Spectrum 48 model type."]}),"\n",(0,t.jsxs)(s.li,{children:["The ",(0,t.jsx)(s.code,{children:"BANK"})," value must be between 0 and 7"]}),"\n",(0,t.jsx)(s.li,{children:"The offset must be between 0 and 16383"}),"\n",(0,t.jsxs)(s.li,{children:["You can use the ",(0,t.jsx)(s.code,{children:"BANK"})," pragma for a particular bank page only once, so, for example, the following code raises\nan error message:"]}),"\n"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".bank 1"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; ..."})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".bank 3"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; ..."})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".bank 1 ; This line raises the error"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; ..."})})]})}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note"}),": This is a temporary restriction. In the future, it may be removed."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"the-equ-pragma",children:"The EQU pragma"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"EQU"})," pragma allows you to assign a value to an identifier. The label before ",(0,t.jsx)(s.strong,{children:"EQU"})," is the name of the identifier (or symbol), and the expression used in ",(0,t.jsx)(s.strong,{children:"EQU"})," is the variable's value. Here is a short example:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"      .org #6200"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"      ld hl,Sym1"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Sym1: .equ #4000"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"      ld bc,Sym2"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Sym2: .equ $+4"})})]})}),"\n",(0,t.jsx)(s.p,{children:"This sample is equivalent to this one:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".org #6200"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld hl,#4000 ; Sym1 <-- #4000"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld bc,#620a ; Sym2 <-- #620a as an ld bc,NNNN operation and"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"                       an ld hl,NNNN each takes 3 bytes"})})]})}),"\n",(0,t.jsx)(s.h2,{id:"the-var-pragma",children:"The VAR pragma"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"VAR"})," pragma works similarly to ",(0,t.jsx)(s.strong,{children:"EQU"}),". However, while ",(0,t.jsx)(s.strong,{children:"EQU"})," does not allow the use of the same symbol with multiple value assignments, ",(0,t.jsx)(s.strong,{children:"VAR"})," assigns a new value to the symbol every time it is used."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note"}),": The VAR pragma accepts extra syntax alternatives: ",(0,t.jsx)(s.code,{children:"="}),", ",(0,t.jsx)(s.code,{children:":="})]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"the-injectopt-pragma",children:"The INJECTOPT pragma"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"INJECTOPT"})," pragma expects an identifier-like option tag after the starting pragma keyword. This keyword identifies an option for injecting the code into an emulated machine. The Klive Assembler supports two options:"]}),"\n",(0,t.jsx)(s.h3,{id:"cursork",children:(0,t.jsx)(s.code,{children:"cursork"})}),"\n",(0,t.jsxs)(s.p,{children:['When you run the ZX Spectrum virtual machine from the IDE, it injects the machine code into the memory and sets up the system as if you started the code from BASIC with the RUN command. By default, it sets the cursor to "L" mode.\nHowever, in several cases, you\'d like to keep the cursor in "K" mode, for example, when you intend to start the code with the\n',(0,t.jsxs)(s.strong,{children:["RANDOMIZE USER ",(0,t.jsx)(s.em,{children:"addr"})]})," command (here, ",(0,t.jsx)(s.em,{children:"addr"})," is the entry address). In this case, you can add the INJECTOP pragma to the code:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".injectopt cursork"})})})}),"\n",(0,t.jsx)(s.h3,{id:"subroutine",children:(0,t.jsx)(s.code,{children:"subroutine"})}),"\n",(0,t.jsxs)(s.p,{children:["This option instructs the IDE to call your code (terminated with ",(0,t.jsx)(s.code,{children:"RET"}),") and not to jump directly to its start address."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note"}),": You can use any other options; the compiler will not raise an exception; it ignores the unknown options."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"the-defb-pragma",children:"The DEFB pragma"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"DEFB"})," pragma emits 8-bit expressions (bytes) from the current assembly position. Here is a sample:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".org #6000"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".defb #01, #02, $, #04"})})]})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"DEFB"})," pragma will emit these four bytes starting at 0x6000: 0x01, 0x02, 0x03, 0x04.\nThe ",(0,t.jsx)(s.code,{children:"$"})," expression will emit 0x03, because, at the emission point, the current assembly address is 0x6003. The ",(0,t.jsx)(s.strong,{children:"DEFB"})," program considers only the rightmost 8 bits of any expression: this is how ",(0,t.jsx)(s.code,{children:"$"})," results in 0x03."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"DEFB"})," has extra syntax variants: ",(0,t.jsx)(s.code,{children:"db"}),", ",(0,t.jsx)(s.code,{children:".db"}),", ",(0,t.jsx)(s.code,{children:"DB"}),", and ",(0,t.jsx)(s.code,{children:".DB"})," are accepted, too."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"the-defw-pragma",children:"The DEFW pragma"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"DEFW"})," pragma is similar to ",(0,t.jsx)(s.strong,{children:"DEFB"}),", but it emits 16-bit values with LSB, MSB order."]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".defw #1234, #abcd"})})})}),"\n",(0,t.jsx)(s.p,{children:"This simple code above will emit these four bytes: 0x34, 0x12, 0xcd, 0xab."}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"DEFW"})," has extra syntax variants: ",(0,t.jsx)(s.code,{children:"dw"}),", ",(0,t.jsx)(s.code,{children:".dw"}),", ",(0,t.jsx)(s.code,{children:"DW"}),", and ",(0,t.jsx)(s.code,{children:".DW"})," are accepted, too."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"the-defm-pragma",children:"The DEFM pragma"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"DEFM"})," pragma emits the byte-array representation of a string. Each character in the string is replaced with the corresponding byte. Take a look at this code:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.defm "\\C by me"'})})})}),"\n",(0,t.jsxs)(s.p,{children:["Here, the ",(0,t.jsx)(s.strong,{children:"DEFM"})," pragma emits 7 bytes for the seven characters (the first escape sequence represents the copyright sign): 0x7f, 0x20, 0x62, 0x69, 0x20, 0x6d, 0x65."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"DEFM"})," has extra syntax variants: ",(0,t.jsx)(s.code,{children:"dm"}),", ",(0,t.jsx)(s.code,{children:".dm"}),", ",(0,t.jsx)(s.code,{children:"DM"}),", and ",(0,t.jsx)(s.code,{children:".DM"})," are accepted, too."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"the-defn-pragma",children:"The DEFN pragma"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"DEFN"})," pragma works just like the ",(0,t.jsx)(s.code,{children:"DEFM"})," pragma, but it emits an additional ",(0,t.jsx)(s.code,{children:"0x00"})," byte to terminate the string. Look at this code:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.defn "\\C by me"'})})})}),"\n",(0,t.jsxs)(s.p,{children:["Here, the ",(0,t.jsx)(s.strong,{children:"DEFN"})," pragma emits 8 bytes for the seven characters (the first escape sequence represents the copyright sign) plus the terminating zero: 0x7f, 0x20, 0x62, 0x69, 0x20, 0x6d, 0x65, 0x00."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note"}),": ",(0,t.jsx)(s.strong,{children:"DEFN"})," has extra syntax variants: ",(0,t.jsx)(s.code,{children:"dn"}),", ",(0,t.jsx)(s.code,{children:".dn"}),", ",(0,t.jsx)(s.code,{children:"DN"}),", and ",(0,t.jsx)(s.code,{children:".DN"})," are also accepted."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"the-defc-pragma",children:"The DEFC pragma"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"DEFC"})," pragma works just like the ",(0,t.jsx)(s.code,{children:"DEFM"})," pragma, but it sets Bit 7 of the last emitted character. Look at this code:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.defc "\\C by me"'})})})}),"\n",(0,t.jsxs)(s.p,{children:["Here, the ",(0,t.jsx)(s.strong,{children:"DEFC"})," pragma emits 7 bytes for the seven characters (the first escape sequence represents the copyright sign) with Bit 7 of the last character (0x65) set (so it becomes 0xE5): 0x7f, 0x20, 0x62, 0x69, 0x20, 0x6d, 0xE5."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note"}),": ",(0,t.jsx)(s.strong,{children:"DEFC"})," has extra syntax variants: ",(0,t.jsx)(s.code,{children:"dc"}),", ",(0,t.jsx)(s.code,{children:".dc"}),", ",(0,t.jsx)(s.code,{children:"DC"}),", and ",(0,t.jsx)(s.code,{children:".DC"})," are also accepted."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"the-defh-pragma",children:"The DEFH pragma"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"DEFH"})," pragma uses a string with an even number of hexadecimal digits to emit a byte-array representation of the input. Each character pair in the string is replaced with the corresponding byte. Take a look at this code:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.defh "12E4afD2"'})})})}),"\n",(0,t.jsxs)(s.p,{children:["Here, the ",(0,t.jsx)(s.strong,{children:"DEFH"})," pragma emits 4 bytes: 0x12, 0xe4, 0xaf, 0xd2."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note"}),": ",(0,t.jsx)(s.strong,{children:"DEFH"})," has extra aliases: ",(0,t.jsx)(s.code,{children:"dh"}),", ",(0,t.jsx)(s.code,{children:".dh"}),", ",(0,t.jsx)(s.code,{children:"DH"}),", and ",(0,t.jsx)(s.code,{children:".DH"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"the-defs-pragma",children:"The DEFS pragma"}),"\n",(0,t.jsxs)(s.p,{children:["You can emit zero (",(0,t.jsx)(s.code,{children:"0x00"}),") bytes with this pragma. It accepts a single argument, the number of zeros to emit. This code sends 16 zeros to the generated output:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".defs 16"})})})}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note"}),": ",(0,t.jsx)(s.strong,{children:"DEFS"})," has extra syntax variants: ",(0,t.jsx)(s.code,{children:"ds"}),", ",(0,t.jsx)(s.code,{children:".ds"}),", ",(0,t.jsx)(s.code,{children:"DS"}),", and ",(0,t.jsx)(s.code,{children:".DS"})," are also accepted."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"the-fillb-pragma",children:"The FILLB pragma"}),"\n",(0,t.jsxs)(s.p,{children:["With ",(0,t.jsx)(s.strong,{children:"FILLB"}),", you can emit a particular count of a specific byte. The first argument of the pragma sets the count, and the second specifies the byte to emit. This code emits 24 bytes of ",(0,t.jsx)(s.code,{children:"#A5"})," values:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".fillb 24,#a5"})})})}),"\n",(0,t.jsx)(s.h2,{id:"the-fillw-pragma",children:"The FILLW pragma"}),"\n",(0,t.jsxs)(s.p,{children:["With ",(0,t.jsx)(s.strong,{children:"FILLW"}),", you can emit a particular count of a 16-bit word. The first argument of the pragma sets the count, and the second specifies the word to emit. This code emits 8 words (16 bytes) of ",(0,t.jsx)(s.code,{children:"#12A5"})," values:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".fillw 8,#12a5"})})})}),"\n",(0,t.jsx)(s.p,{children:"Of course, the bytes of a word are emitted in LSB/MSB order."}),"\n",(0,t.jsx)(s.h2,{id:"the-skip-pragma",children:"The SKIP pragma"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"SKIP"})," pragma, as its name suggests, skips the number of bytes from the current address to that specified in the first argument. It fills up the skipped bytes with 0xFF by default, but the fill value can be set with the second argument:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".skip $+#05      ; fills next 5 bytes with 0xFF"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".skip $+#04, #3a ; fills next 4 bytes with 0x3A"})})]})}),"\n",(0,t.jsx)(s.h2,{id:"the-extern-pragma",children:"The EXTERN pragma"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.strong,{children:"EXTERN"})," pragma is kept for future extension. The current compiler accepts it but does not act when observing this pragma."]}),"\n",(0,t.jsx)(s.h2,{id:"the-model-pragma",children:"The MODEL pragma"}),"\n",(0,t.jsxs)(s.p,{children:["This pragma is used when you run or debug your Z80 code within the emulator. With Spectrum 128K, Spectrum +3, and Spectrum Next models, you can run the Z80 code in different contexts. The ",(0,t.jsx)(s.strong,{children:"MODEL"})," pragma lets you specify which model to run the code. You can use the ",(0,t.jsx)(s.code,{children:"SPECTRUM48"}),", ",(0,t.jsx)(s.code,{children:"SPECTRUM128"}),", ",(0,t.jsx)(s.code,{children:"SPECTRUMP3"}),", or ",(0,t.jsx)(s.code,{children:"NEXT"})," identifiers to choose the model (identifiers are case-insensitive):"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".model Spectrum48"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".model Spectrum128"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".model SpectrumP3"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".model Next"})})]})}),"\n",(0,t.jsxs)(s.p,{children:["For example, when you create code for Spectrum 128K, and add the ",(0,t.jsx)(s.code,{children:".model Spectrum48"})," pragma to the code, the ",(0,t.jsx)(s.strong,{children:"Run"})," command will start the virtual machine, turn the machine into Spectrum 48K mode, and ignite the code just after that."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note"}),": With the ",(0,t.jsx)(s.code,{children:"#ifmod"})," and ",(0,t.jsx)(s.code,{children:"#ifnmod"})," directives, you can check the model type. For example, the following Z80 code results in a green background on Spectrum 48K and cyan on Spectrum 128K:"]}),"\n"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    .model Spectrum48"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"#ifmod Spectrum128"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    BorderColor: .equ 5"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    RetAddr: .equ #2604"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"#else"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    BorderColor: .equ 4"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    RetAddr: .equ #12a2"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"#endif"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Start:"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    .org #8000"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    ld a,BorderColor"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    out (#fe),a"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    jp RetAddr"})})]})}),"\n",(0,t.jsx)(s.h2,{id:"the-align-pragma",children:"The ALIGN pragma"}),"\n",(0,t.jsx)(s.p,{children:"This pragma allows you to align the current assembly counter to the specified byte boundary. You can use this pragma with an optional expression. Look at these samples:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".org #8000"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    nop"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".align 4"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"    nop"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".align"})})]})}),"\n",(0,t.jsxs)(s.p,{children:["The first pragma aligns the assembly counter to #8004, the next 4-byte boundary. With no value specified, ",(0,t.jsx)(s.code,{children:".align"})," uses #100, and thus the second ",(0,t.jsx)(s.code,{children:".align"})," in the sample sets the current assembly counter to the next page boundary, #8100."]}),"\n",(0,t.jsx)(s.h2,{id:"the-trace-and-tracehex-pragmas",children:"The TRACE and TRACEHEX pragmas"}),"\n",(0,t.jsxs)(s.p,{children:["These pragmas send trace information to the assembler output. In the Visual Studio IDE, these messages are displayed in the Z80 Build Output pane. List one or more expressions separated by a comma after the ",(0,t.jsx)(s.code,{children:".trace"})," token. TRACEHEX works like TRACE, but it displays integer numbers and strings in hexadecimal format."]}),"\n",(0,t.jsx)(s.p,{children:"Let's assume you add these lines to the source code:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.trace "Hello, this is: ", 42'})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.tracehex "Hello, this is: ", 42'})})]})}),"\n",(0,t.jsx)(s.p,{children:"When you compile the source, the lines above display these messages:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"TRACE: Hello, this is: 42"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"TRACE: 48656C6C6F2C20746869732069733A20002A"})})]})}),"\n",(0,t.jsx)(s.h2,{id:"the-rndseed-pragma",children:"The RNDSEED pragma"}),"\n",(0,t.jsxs)(s.p,{children:["With the ",(0,t.jsx)(s.code,{children:"rnd()"})," function, you can generate random numbers. The RNDSEED pragma sets the seed value to use for random number generation. If you use this pragma with an integer expression,\nthe seed is set to the value of that expression. If you do not provide the expression, the compiler uses the system clock to set up the seed."]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".rndseed ; sets the seed according to the system clock"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".rndseed 123 ; sets the seed to 123"})})]})}),"\n",(0,t.jsx)(s.h2,{id:"the-defgx-pragma",children:"The DEFGX pragma"}),"\n",(0,t.jsx)(s.p,{children:"This pragma helps you define bitmaps in the code. This pragma excepts a string expression and utilizes that string as a pattern to generate bytes for the bitmap."}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note"}),": ",(0,t.jsx)(s.strong,{children:"DEFGX"})," has extra syntax variants: ",(0,t.jsx)(s.code,{children:"dgx"}),", ",(0,t.jsx)(s.code,{children:".dgx"}),", ",(0,t.jsx)(s.code,{children:"DGX"}),", and ",(0,t.jsx)(s.code,{children:".DGX"})," are accepted, too."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["If the very first character of the string pattern is ",(0,t.jsx)(s.code,{children:"<"}),", the pattern is left aligned and starts with the second character. Should the first character be ",(0,t.jsx)(s.code,{children:">"}),", the pattern is right aligned and starts with the second character. By default (if no ",(0,t.jsx)(s.code,{children:"<"})," or ",(0,t.jsx)(s.code,{children:">"})," is used) the pattern is left-aligned."]}),"\n",(0,t.jsx)(s.p,{children:"Spaces within the pattern are ignored and considered helpers. Other characters are converted into bits one by one."}),"\n",(0,t.jsx)(s.p,{children:"Before the conversion, the pragma checks if the pattern constitutes multiples of 8 bits. If not, it uses zeros as prefixes (right-aligned) or zeros as suffixes (left-aligned), so the pattern would be adjusted to contain entire bytes."}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"."})," (dot), ",(0,t.jsx)(s.code,{children:"-"})," (dash), and ",(0,t.jsx)(s.code,{children:"_"})," (underscore) sign 0, and any other characters stand for 1. Every 8 bits in the pattern emit a byte."]}),"\n",(0,t.jsx)(s.p,{children:"Here are a few samples:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.dgx "....OOOO"         ; #0F'})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.dgx ">....OOOO"        ; #0F'})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.dgx "<----OOOO"        ; #0F'})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.dgx "___OOOO"          ; #1E'})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.dgx "....OOOO ..OO"    ; #0F, #30'})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.dgx ">....OO OO..OOOO" ; #03, #CF'})})]})}),"\n",(0,t.jsx)(s.h2,{id:"the-defg-pragma",children:"The DEFG pragma"}),"\n",(0,t.jsxs)(s.p,{children:["This pragma helps you define bitmaps in the code. This pragma excepts a string pattern (",(0,t.jsx)(s.em,{children:"note: not a string expression!"}),")\nand utilizes that string as a pattern to generate bytes for the bitmap."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note"}),": ",(0,t.jsx)(s.strong,{children:"DEFG"})," has extra syntax variants: ",(0,t.jsx)(s.code,{children:"dg"}),", ",(0,t.jsx)(s.code,{children:".dg"}),", ",(0,t.jsx)(s.code,{children:"DG"}),", and ",(0,t.jsx)(s.code,{children:".DG"})," are also accepted."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Spaces within the pattern are ignored and considered helpers. Other characters are converted into bits one by one. The pixels in a byte are planted with the LSB as the most significant bit, and multiple bytes are planted LSB byte first."}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"."})," (dot), ",(0,t.jsx)(s.code,{children:"-"})," (dash), and ",(0,t.jsx)(s.code,{children:"_"})," (underscore) sign 0, and any other characters stand for 1. Every 8 bits in the pattern emit a byte."]}),"\n",(0,t.jsx)(s.p,{children:"Here are a few samples:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".dg ....OOOO        ; #0F"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".dg ___OOOO         ; #1E"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.dg ....OOOO ..OO"  ; #0F, #30'})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".dg ....OO OO..OOOO ; #0F, #3C"})})]})}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note"}),": Unlike in the pattern used with ",(0,t.jsx)(s.code,{children:"DEFGX"}),", here, the leading ",(0,t.jsx)(s.code,{children:">"})," and ",(0,t.jsx)(s.code,{children:"<"})," characters are taken as bit 1. They do not specify bit alignment."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"the-error-pragma",children:"The ERROR Pragma"}),"\n",(0,t.jsxs)(s.p,{children:["You can raise custom error messages with this pragma. ",(0,t.jsx)(s.strong,{children:"ERROR"})," accepts an expression and displays an error message with code ",(0,t.jsx)(s.code,{children:"Z0500"})," using your provided text. Here is a sample:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.error "The value must be greater than" + str(minvalue)'})})})}),"\n",(0,t.jsx)(s.h2,{id:"the-includebin-pragma",children:"The INCLUDEBIN Pragma"}),"\n",(0,t.jsxs)(s.p,{children:["You can include a binary file into the source code to emit all bytes as if you used the ",(0,t.jsx)(s.code,{children:".defb"})," pragma. You can include the entire file or a single segment of it. The pragma has a mandatory argument, the name of the binary file to include, and two optional ones, the start offset of the segment and its length, respectively. Let's see a few examples:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.includebin "./myfile.bin"'})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.includebin "./myfile.bin" 2'})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.includebin "./myfile.bin" 2, 3'})})]})}),"\n",(0,t.jsxs)(s.p,{children:["This snippet loads the ",(0,t.jsx)(s.code,{children:"myfile.bin"})," file from the same directory that contains the source\nwith the ",(0,t.jsx)(s.code,{children:".includebin"})," directive."]}),"\n",(0,t.jsxs)(s.p,{children:["Let's assume that ",(0,t.jsx)(s.code,{children:"myfile.bin"})," contains these bytes:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"#00, #01, #02, #03, #04, #05, #06, #07 "})})})}),"\n",(0,t.jsx)(s.p,{children:"The three lines of code above are the same as if we had written these code lines:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.defb #00, #01, #02, #03, #04, #05, #06, #07 ; .includebin "./myfile.bin"'})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.defb #02, #03, #04, #05, #06, #07           ; .includebin "./myfile.bin" 2'})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.defb #02, #03, #04                          ; .includebin "./myfile.bin" 2, 3'})})]})}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note"}),": The compiler does not allow negative file offset or length. It else raises an error if you define a segment that does not fit into the binary file. You can use an alternative syntax for ",(0,t.jsx)(s.code,{children:".includebin"}),". The compiler accepts these tokens and their uppercase versions, too: ",(0,t.jsx)(s.code,{children:"includebin"}),", ",(0,t.jsx)(s.code,{children:".include_bin"}),", and ",(0,t.jsx)(s.code,{children:"include_bin"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"the-comparebin-pragma",children:"The COMPAREBIN pragma"}),"\n",(0,t.jsxs)(s.p,{children:["When re-engineering a Z80 program from an exported disassembly, it is good to know that you do not break the original code. The ",(0,t.jsx)(s.code,{children:".comparebin"})," pragma helps you to check that you still compile what you expect. It loads a binary file and compares that file with the output of the current code segment."]}),"\n",(0,t.jsx)(s.p,{children:"The pragma has a mandatory argument, the name of the binary file to include, and two optional ones, the start offset of the segment and its length, respectively. Let's see a few examples:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.comparebin "./myfile.bin"'})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.comparebin "./myfile.bin" 2'})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'.comparebin "./myfile.bin" 2, 3'})})]})}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Note"}),": The compiler does not allow negative file offset or length. It also raises an error if you define a segment that does not fit into the binary file. You can use alternative syntax for ",(0,t.jsx)(s.code,{children:".comparebin"}),". The compiler accepts these tokens, too: ",(0,t.jsx)(s.code,{children:"comparebin"}),", ",(0,t.jsx)(s.code,{children:".COMPAREBIN"}),", and ",(0,t.jsx)(s.code,{children:"COMPAREBIN"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["When you compile the code, every ",(0,t.jsx)(s.code,{children:".org"})," pragma opens a new segment that starts from the point defined by ",(0,t.jsx)(s.code,{children:".org"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["You can put it into the code in as many places as you want. As the compiler parses the code, it records the positions of ",(0,t.jsx)(s.code,{children:".comparebin"})," pragmas, the current output segment, and its length at the point where ",(0,t.jsx)(s.code,{children:".comparebin"})," is used. When the code compilation is ready, and there are no errors, the compiler executes a check. This check compares the emitted bytes with the recorded length to the bytes in the binary file."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"If the length of the segment is greater than the size of the file, the compiler raises an error."}),"\n",(0,t.jsx)(s.li,{children:"The comparison checks only the as many bytes as are in the output segment; if more are in the binary file, the remaining data is ignored."}),"\n",(0,t.jsx)(s.li,{children:"If the compared data do not match, the assembler raises an error with the first unmatching position."}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Let's assume we have the ",(0,t.jsx)(s.code,{children:"origin.bin"})," file that contains these six bytes:"]}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"#00, #01, #02, #03, #04, #05"})})})}),"\n",(0,t.jsx)(s.p,{children:"Take a look at this code:"}),"\n",(0,t.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,t.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .org #8000"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .defb #00, #01, #02"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'  .comparebin "origin.bin"'})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .org #8100"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  .defb #03, #04, #05"})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'  .comparebin "origin.bin"'})}),"\n",(0,t.jsx)(s.span,{className:"line",children:(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'  .comparebin "origin.bin", 3'})})]})}),"\n",(0,t.jsxs)(s.p,{children:["This code contains two segments (it has two ",(0,t.jsx)(s.code,{children:".org"})," pragmas) and three ",(0,t.jsx)(s.code,{children:".comparebin"}),"."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Though ",(0,t.jsx)(s.code,{children:"origin.bin"})," has six bytes, the first comparison succeeds, utilizing only the three bytes emitted in the first segment."]}),"\n",(0,t.jsx)(s.li,{children:"The second comparison fails, as the file starts with #00, #01, #02, while the segment emits #03, #04, and #05."}),"\n",(0,t.jsx)(s.li,{children:"The third comparison succeeds, as it starts the examination from the 4th byte (offset 3) of the binary file."}),"\n"]})]})}let d={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,i.a)(),e.components);return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)},pageOpts:{filePath:"pages/z80-assembly/pragmas.mdx",route:"/z80-assembly/pragmas",pageMap:[{kind:"Meta",data:{index:"Introduction","getting-started":"Getting Started","working-with-ide":"Working with the IDE","z80-assembly":"Klive Z80 Assembler"}},{kind:"Folder",name:"getting-started",route:"/getting-started",children:[{kind:"Meta",data:{installation:"Installing Klive","first-run":"Running Klive",keyboard:"Using the Keyboard",tapes:"Loading from Tape","save-programs":"Saving Files","creating-project":"Creating a Klive Project"}},{kind:"MdxPage",name:"creating-project",route:"/getting-started/creating-project"},{kind:"MdxPage",name:"first-run",route:"/getting-started/first-run"},{kind:"MdxPage",name:"installation",route:"/getting-started/installation"},{kind:"MdxPage",name:"keyboard",route:"/getting-started/keyboard"},{kind:"MdxPage",name:"save-programs",route:"/getting-started/save-programs"},{kind:"MdxPage",name:"tapes",route:"/getting-started/tapes"}]},{kind:"MdxPage",name:"index",route:"/"},{kind:"Folder",name:"working-with-ide",route:"/working-with-ide",children:[{kind:"Meta",data:{"project-explorer":"The Project Explorer","editing-code":"Editing Code","run-debug":"Running & Debugging Code",zxb:"ZX BASIC Integration","ide-settings":"IDE Settings",cpu:"The CPU View",ula:"The ULA View",memory:"The Memory View",disassembly:"The Disassembly View",breakpoints:"The Breakpoints View","system-vars":"The System Variables View",basic:"The BASIC Listing",commands:"Interactive Commands"}},{kind:"MdxPage",name:"basic",route:"/working-with-ide/basic"},{kind:"MdxPage",name:"breakpoints",route:"/working-with-ide/breakpoints"},{kind:"MdxPage",name:"commands",route:"/working-with-ide/commands"},{kind:"MdxPage",name:"cpu",route:"/working-with-ide/cpu"},{kind:"MdxPage",name:"disassembly",route:"/working-with-ide/disassembly"},{kind:"MdxPage",name:"editing-code",route:"/working-with-ide/editing-code"},{kind:"MdxPage",name:"ide-settings",route:"/working-with-ide/ide-settings"},{kind:"MdxPage",name:"memory",route:"/working-with-ide/memory"},{kind:"MdxPage",name:"project-explorer",route:"/working-with-ide/project-explorer"},{kind:"MdxPage",name:"run-debug",route:"/working-with-ide/run-debug"},{kind:"MdxPage",name:"system-vars",route:"/working-with-ide/system-vars"},{kind:"MdxPage",name:"ula",route:"/working-with-ide/ula"},{kind:"MdxPage",name:"zxb",route:"/working-with-ide/zxb"}]},{kind:"Folder",name:"z80-assembly",route:"/z80-assembly",children:[{kind:"Meta",data:{"z80-assembler":"Assembler Overview","language-structure":"Language Structure",expressions:"Expressions","z80-instructions":"Z80 Instructions",pragmas:"Pragmas",statements:"Assembler Statements",macros:"Macros",structs:"Structs"}},{kind:"MdxPage",name:"expressions",route:"/z80-assembly/expressions"},{kind:"MdxPage",name:"language-structure",route:"/z80-assembly/language-structure"},{kind:"MdxPage",name:"macros",route:"/z80-assembly/macros"},{kind:"MdxPage",name:"pragmas",route:"/z80-assembly/pragmas"},{kind:"MdxPage",name:"statements",route:"/z80-assembly/statements"},{kind:"MdxPage",name:"structs",route:"/z80-assembly/structs"},{kind:"MdxPage",name:"z80-assembler",route:"/z80-assembly/z80-assembler"},{kind:"MdxPage",name:"z80-instructions",route:"/z80-assembly/z80-instructions"}]}],flexsearch:{codeblocks:!0},title:"Pragmas",headings:o},pageNextRoute:"/z80-assembly/pragmas",nextraLayout:l.ZP,themeConfig:r.Z};s.default=(0,n.j)(d)},5034:function(e,s,a){"use strict";a.d(s,{Z:function(){return n}});var t=a(5893),n={logo:(0,t.jsxs)("div",{style:{display:"flex",alignItems:"center"},children:[(0,t.jsx)(e=>{let{width:s=50,height:a=50}=e;return(0,t.jsxs)("svg",{width:s,height:a,viewBox:"0 0 200 200",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[(0,t.jsx)("rect",{width:"100%",height:"100%",fill:"#000"}),(0,t.jsx)("path",{d:"M 200 149 l 0 -20 l -70 70 l 20 0",fill:"#0ff"}),(0,t.jsx)("path",{d:"M 200 129 l 0 -20 l -90 90 l 20 0",fill:"#0f0"}),(0,t.jsx)("path",{d:"M 200 109 l 0 -20 l -110 110 l 20 0",fill:"#ff0"}),(0,t.jsx)("path",{d:"M 200 89 l 0 -20 l -130 130 l 20 0",fill:"#f00"}),(0,t.jsx)("path",{d:"M 0 0 l 200 0 l 0 8 l -200 0",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 0 200 l 200 0 l 0 -8 l -200 0",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 0 0 l 0 200 l 8 0 l 0 -200",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 192 0 l 0 200 l 8 0 l 0 -200",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 40 40 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 40 60 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 40 80 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 40 100 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 40 120 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 40 140 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 60 80 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 80 80 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 100 100 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 120 120 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 140 140 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 100 60 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,t.jsx)("path",{d:"M 120 40 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"})," "]})},{}),(0,t.jsx)("span",{style:{marginLeft:12,fontWeight:"bold",fontSize:"2em"},children:"Klive IDE"})]}),logoLink:"https://dotneteer.github.io/kliveide",editLink:{text:null},feedback:{content:null},project:{link:"https://github.com/dotneteer/kliveide"},sidebar:{autoCollape:!0,defaultMenuCollapseLevel:1},footer:{text:(0,t.jsx)("div",{children:(0,t.jsxs)("span",{children:[(0,t.jsx)("strong",{children:"Klive IDE"})," is an open-source project (MIT) developed by ",(0,t.jsx)("em",{children:"Istvan Novak"})," (2016-2023)."]})})}}}},function(e){e.O(0,[686,888,774,179],function(){return e(e.s=6858)}),_N_E=e.O()}]);