(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[772],{4329:function(e,s,l){(window.__NEXT_P=window.__NEXT_P||[]).push(["/z80-assembly/language-structure",function(){return l(6907)}])},6907:function(e,s,l){"use strict";l.r(s),l.d(s,{__toc:function(){return c}});var n=l(5893),a=l(2673),t=l(7758),i=l(3662);l(9128);var r=l(2643);let c=[{depth:2,value:"Syntax Basics",id:"syntax-basics"},{depth:2,value:"Comments",id:"comments"},{depth:2,value:"Literals",id:"literals"},{depth:2,value:"Identifiers",id:"identifiers"},{depth:2,value:"Scoped Identifiers",id:"scoped-identifiers"},{depth:2,value:"Characters and Strings",id:"characters-and-strings"},{depth:2,value:"Labels and Symbols",id:"labels-and-symbols"},{depth:3,value:"Label and Symbol Declarations",id:"label-and-symbol-declarations"},{depth:3,value:"Temporary Labels",id:"temporary-labels"}];function _createMdxContent(e){let s=Object.assign({h1:"h1",p:"p",ul:"ul",li:"li",em:"em",code:"code",h2:"h2",pre:"pre",span:"span",blockquote:"blockquote",strong:"strong",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",br:"br",h3:"h3"},(0,r.a)(),e.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{children:"Klive Z80 Assembly Language Structure"}),"\n",(0,n.jsx)(s.p,{children:"Each line of the source code is a declaration unit and is parsed in its context. Such a source code line can be one of these constructs:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["A Z80 ",(0,n.jsx)(s.em,{children:"instruction"}),", which can be directly compiled to binary code (such as ",(0,n.jsx)(s.code,{children:"ld bc,#12AC"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:["A ",(0,n.jsx)(s.em,{children:"directive"})," that is used by the compiler's preprocessor (e.g. ",(0,n.jsx)(s.code,{children:"#include"}),", ",(0,n.jsx)(s.code,{children:"#if"}),", etc.)"]}),"\n",(0,n.jsxs)(s.li,{children:["A ",(0,n.jsx)(s.em,{children:"pragma"})," that emits binary output or instructs the compiler about code emission (",(0,n.jsx)(s.code,{children:".org"}),", ",(0,n.jsx)(s.code,{children:".defb"}),", etc.)"]}),"\n",(0,n.jsxs)(s.li,{children:["A ",(0,n.jsx)(s.em,{children:"compiler statement"})," (or shortly, a ",(0,n.jsx)(s.em,{children:"statement"}),") that implements control flow operations for the compiler (e.g., ",(0,n.jsx)(s.code,{children:".loop"}),", ",(0,n.jsx)(s.code,{children:".repeat"}),"..",(0,n.jsx)(s.code,{children:".until"}),", ",(0,n.jsx)(s.code,{children:".if"}),"..",(0,n.jsx)(s.code,{children:".elif"}),"..",(0,n.jsx)(s.code,{children:".else"}),"..",(0,n.jsx)(s.code,{children:".endif"}),")"]}),"\n",(0,n.jsxs)(s.li,{children:["A ",(0,n.jsx)(s.em,{children:"comment"})," that helps the understanding of the code."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"syntax-basics",children:"Syntax Basics"}),"\n",(0,n.jsx)(s.p,{children:"The assembler language uses a unique way of case sensitivity. You can write reserved words (such as assembly instructions, pragmas, or directives) with lowercase or uppercase letters, but you cannot mix these cases. For example, these instructions use the proper syntax:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"LD c,A"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"JP #12ac"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ldir"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"djnz MyLabel"})})]})}),"\n",(0,n.jsx)(s.p,{children:"However, in these samples, character cases are mixed, and the compiler will refuse them:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Ld c,A"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Jp #12ac"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ldIR"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"djNZ MyLabel"})})]})}),"\n",(0,n.jsx)(s.p,{children:"In symbolic names (labels, identifiers, etc.), you can mix lowercase and uppercase letters. Nonetheless, the compiler applies case-insensitive comparison when matching symbolic names. So, these statement pairs are equivalent to each other:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"jp MainEx"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"jp MAINEX"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"djnz mylabel"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"djnz MyLabel"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld hl,ErrNo"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ld hl,errNo"})})]})}),"\n",(0,n.jsx)(s.h2,{id:"comments",children:"Comments"}),"\n",(0,n.jsxs)(s.p,{children:["The language supports two types of comments: ",(0,n.jsx)(s.em,{children:"end-of-line"})," and ",(0,n.jsx)(s.em,{children:"block"})," comments."]}),"\n",(0,n.jsxs)(s.p,{children:["En-of-line comments start with a semicolon (",(0,n.jsx)(s.code,{children:";"}),") or double forward slash (",(0,n.jsx)(s.code,{children:"//"}),"). The compiler takes the rest of the line into account as the body of the comment. This sample illustrates this concept:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; This line is a comment-only line"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Wait:   ld b,8     ; Set the counter"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Wait1:  djnz Wait1 // wait while the counter reaches zero"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["Block comments can be put anywhere within an instruction line between ",(0,n.jsx)(s.code,{children:"/*"})," and ",(0,n.jsx)(s.code,{children:"*/"})," tokens until they do not break other tokens. Nonetheless, block comments cannot span multiple lines; they must start and end within the same source code line. All of the block comments in this code snippet are correct:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"SetAttr:"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"	ld b,32"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"fill:"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  /* block */"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  /* b2 */ ld (hl),a"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  inc /* b3 */ hl"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  djnz /* b4 */ fill /* b5 */"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ret"})})]})}),"\n",(0,n.jsx)(s.p,{children:"However, this will result in a syntax error:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"/* "})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  This block comment spans multiple lines,"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  and thus, it is invalid"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"*/"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"SetAttr:"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"	ld b,32"})})]})}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Note"}),": If you need multi-line comments, you can add single-line comments after each other. The Z80 assembly does not have separate multi-line comment syntax."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"literals",children:"Literals"}),"\n",(0,n.jsx)(s.p,{children:"The language syntax provides these types of literals:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Boolean values."})," The following tokens represent Booleans: ",(0,n.jsx)(s.code,{children:".false"}),", ",(0,n.jsx)(s.code,{children:"false"}),", ",(0,n.jsx)(s.code,{children:".true"}),", and ",(0,n.jsx)(s.code,{children:"true"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Decimal numbers."})," You can use up to 5 digits (0..9) to declare a decimal number. For example: ",(0,n.jsx)(s.code,{children:"16"}),", ",(0,n.jsx)(s.code,{children:"32768"}),", ",(0,n.jsx)(s.code,{children:"2354"}),"."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Floating point numbers."})," You can use the same notation for floating point numbers as in C/C++/Java/C#. Here are a few samples:"]}),"\n"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:".25"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"123.456"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"12.45E34"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"12.45e-12"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"3e+4"})})]})}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Hexadecimal numbers."})," You can use up to 4 hexadecimal digits (0..9, a..f or A..F) to declare a hexadecimal literal. The compiler looks for a ",(0,n.jsx)(s.code,{children:"#"}),", ",(0,n.jsx)(s.code,{children:"0x"}),", or ",(0,n.jsx)(s.code,{children:"$"})," prefix or one of the ",(0,n.jsx)(s.code,{children:"h"})," or ",(0,n.jsx)(s.code,{children:"H"})," suffixes to recognize them as hexadecimal. If you use the ",(0,n.jsx)(s.code,{children:"h"})," or ",(0,n.jsx)(s.code,{children:"H"})," suffixes, the hexadecimal number should start with a decimal digit ",(0,n.jsx)(s.code,{children:"0"}),"...",(0,n.jsx)(s.code,{children:"9"}),"; otherwise, the assembler interprets it as an identifier (label). Here are a few samples:"]}),"\n"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"#12AC"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0x12ac"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"$12Ac"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"12ACh"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"12acH"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0AC34H"})})]})}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Binary numbers."})," Literals starting with one of the ",(0,n.jsx)(s.code,{children:"%"}),", or ",(0,n.jsx)(s.code,{children:"0b"})," prefixes (or with the ",(0,n.jsx)(s.code,{children:"b"})," or ",(0,n.jsx)(s.code,{children:"B"})," suffix) are considered binary literals. You can follow the prefix with up to 16 ",(0,n.jsx)(s.code,{children:"0"})," or ",(0,n.jsx)(s.code,{children:"1"})," digits. To make them more readable, you can separate adjacent digits with the underscore (",(0,n.jsx)(s.code,{children:"_"}),") or single quote (",(0,n.jsx)(s.code,{children:"'"}),") character. These are all valid binary literals:"]}),"\n"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"%01011111"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0b01011111"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0b_0101_1111"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0101_1111b"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"0b'0101'1111"})})]})}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Octal numbers."})," You can use up to 6 digits (0..7) with an ",(0,n.jsx)(s.code,{children:"o"}),", ",(0,n.jsx)(s.code,{children:"O"})," (letter O), ",(0,n.jsx)(s.code,{children:"q"}),", or ",(0,n.jsx)(s.code,{children:"Q"})," suffix to declare an octal number. Examples: ",(0,n.jsx)(s.code,{children:"16o"}),", ",(0,n.jsx)(s.code,{children:"327q"}),", ",(0,n.jsx)(s.code,{children:"2354Q"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Note"}),": You can use negative numbers with the minus sign in front of them. The sign is not part of the numeric literal; it is an operator."]}),"\n"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Characters"}),". You can put a character between single quotes (for example: ",(0,n.jsx)(s.code,{children:"'Q'"}),")."]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Strings"}),". You can put a series of characters between double quotes (for example: ",(0,n.jsx)(s.code,{children:'"Sinclair"'}),")."]}),"\n"]}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Note"}),": You can use escape sequences to define non-visible or control characters, as you will learn soon."]}),"\n"]}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsxs)(s.strong,{children:["The ",(0,n.jsx)(s.code,{children:"$"}),", ",(0,n.jsx)(s.code,{children:"*"})," or ",(0,n.jsx)(s.code,{children:"."})," tokens"]}),". These literals are equivalent; all represent the current assembly address."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"identifiers",children:"Identifiers"}),"\n",(0,n.jsxs)(s.p,{children:["You can use identifiers to refer to labels and other constants. Identifiers must start with a letter (a...z or A...Z) or with one of these characters: ",(0,n.jsx)(s.code,{children:"`"})," (backtick), ",(0,n.jsx)(s.code,{children:"_"})," (underscore), ",(0,n.jsx)(s.code,{children:"@"}),", ",(0,n.jsx)(s.code,{children:"!"}),", ",(0,n.jsx)(s.code,{children:"?"}),", or ",(0,n.jsx)(s.code,{children:"#"}),". The subsequent ones can be digits and any start characters except backtick. Here are a few examples:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"MyCycle"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"ERR_NO"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Cycle_4_Wait"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"`MyTemp"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"@ModLocal"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"IsLastLine?"})})]})}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Note"}),": Some strings can be identifiers or hexadecimal literals with the ",(0,n.jsx)(s.code,{children:"H"})," or ",(0,n.jsx)(s.code,{children:"h"})," suffix, like ",(0,n.jsx)(s.code,{children:"AC0Fh"}),", or ",(0,n.jsx)(s.code,{children:"FADH"}),". The assembler considers such strings as identifiers. To sign a hexadecimal literal, use a ",(0,n.jsx)(s.code,{children:"0"})," prefix: ",(0,n.jsx)(s.code,{children:"0FADH"})," is a hexadecimal literal, while ",(0,n.jsx)(s.code,{children:"FADH"})," is an identifier."]}),"\n"]}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Note"}),": Theoretically, you can use arbitrary long identifiers. I suggest you make them no longer than 32 characters so readers can read your code easily."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"scoped-identifiers",children:"Scoped Identifiers"}),"\n",(0,n.jsx)(s.p,{children:"As you will later learn, the Klive Assembler supports modules like namespaces in other languages (Java, C#, C++, etc.) to encapsulate labels and symbols. To access symbols within modules, you can use scoped identifiers with this syntax:"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"::"}),"? ",(0,n.jsx)(s.em,{children:"identifier"})," (",(0,n.jsx)(s.code,{children:"."})," ",(0,n.jsx)(s.em,{children:"identifier"}),")*"]}),"\n",(0,n.jsxs)(s.p,{children:["The optional ",(0,n.jsx)(s.code,{children:"::"})," token means the name should start in the outermost (global) scope. The module and identifier segments are separated with a dot. Examples:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"::FirstLevelModule.Routine1"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"NestedModule.ClearScreen"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"FirstLevelModule.NestedModule.ClearScreen"})})]})}),"\n",(0,n.jsx)(s.h2,{id:"characters-and-strings",children:"Characters and Strings"}),"\n",(0,n.jsx)(s.p,{children:"You have already learned that you can utilize character and string literals (wrapped into single or double quotes, respectively), such as in these samples:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'"This is a string. The next sample is a single character:"'})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"'c'"})})]})}),"\n",(0,n.jsx)(s.p,{children:"ZX Spectrum has a character set with special control characters such as AT, INK, PAPER, etc. The Assembler allows you to define these with special escape sequences:"}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"Escape"}),(0,n.jsx)(s.th,{children:"Code"}),(0,n.jsx)(s.th,{children:"Character"})]})}),(0,n.jsxs)(s.tbody,{children:[(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"\\i"})}),(0,n.jsx)(s.td,{children:"0x10"}),(0,n.jsx)(s.td,{children:"INK"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"\\p"})}),(0,n.jsx)(s.td,{children:"0x11"}),(0,n.jsx)(s.td,{children:"PAPER"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"\\f"})}),(0,n.jsx)(s.td,{children:"0x12"}),(0,n.jsx)(s.td,{children:"FLASH"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"\\b"})}),(0,n.jsx)(s.td,{children:"0x13"}),(0,n.jsx)(s.td,{children:"BRIGHT"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"\\I"})}),(0,n.jsx)(s.td,{children:"0x14"}),(0,n.jsx)(s.td,{children:"INVERSE"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"\\o"})}),(0,n.jsx)(s.td,{children:"0x15"}),(0,n.jsx)(s.td,{children:"OVER"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"\\a"})}),(0,n.jsx)(s.td,{children:"0x16"}),(0,n.jsx)(s.td,{children:"AT"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"\\t"})}),(0,n.jsx)(s.td,{children:"0x17"}),(0,n.jsx)(s.td,{children:"TAB"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"\\P"})}),(0,n.jsx)(s.td,{children:"0x60"}),(0,n.jsx)(s.td,{children:"pound sign"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"\\C"})}),(0,n.jsx)(s.td,{children:"0x7F"}),(0,n.jsx)(s.td,{children:"copyright sign"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"\\\\"})}),(0,n.jsx)(s.td,{children:"0x5C"}),(0,n.jsx)(s.td,{children:"backslash"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"\\'"})}),(0,n.jsx)(s.td,{children:"0x27"}),(0,n.jsx)(s.td,{children:"single quote"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:'\\"'})}),(0,n.jsx)(s.td,{children:"0x22"}),(0,n.jsx)(s.td,{children:"double quote"})]}),(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:(0,n.jsx)(s.code,{children:"\\0"})}),(0,n.jsx)(s.td,{children:"0x00"}),(0,n.jsx)(s.td,{children:"binary zero"})]})]})]}),"\n",(0,n.jsxs)(s.blockquote,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Note"}),": Some of these sequences have different values than their corresponding pairs in other languages, such as C, C++, C#, or Java."]}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["To declare a character by its binary code, you can use the ",(0,n.jsx)(s.code,{children:"\\xH"})," or",(0,n.jsx)(s.br,{}),"\n",(0,n.jsx)(s.code,{children:"\\xHH"})," sequences (",(0,n.jsx)(s.code,{children:"H"})," is a hexadecimal digit). For example, these\nescape sequence pairs are equivalent:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'"\\i"'})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'"\\x10"'})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'"\\C by me"'})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:'"\\x7f \\x62y me"'})})]})}),"\n",(0,n.jsx)(s.h2,{id:"labels-and-symbols",children:"Labels and Symbols"}),"\n",(0,n.jsx)(s.p,{children:"In Klive Z80 Assembly, you can define labels and symbols. Both constructs are syntactically the same, but there is some difference in their semantics. While we define labels to mark addresses (code points) in the program so that we can jump to those addresses and read or write their contents, symbols are not as specific; they just store values we intend to use."}),"\n",(0,n.jsx)(s.p,{children:'From now on, I will mention "label" for both constructs and do otherwise only when the context requires it.'}),"\n",(0,n.jsx)(s.p,{children:"When you write a Klive Assembly instruction, you can start the line with a label:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"MyStart: ld hl,0"})})})}),"\n",(0,n.jsxs)(s.p,{children:["Here, in this sample, ",(0,n.jsx)(s.code,{children:"MyStart"})," is a label. The assembler allows you to omit the colon after the label name, so this line is valid:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsx)(s.code,{"data-language":"text","data-theme":"default",children:(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"MyStart ld hl,0"})})})}),"\n",(0,n.jsxs)(s.p,{children:["Some developers like to put a label in a separate line from the instruction to which it belongs. You can use the same hanging label style within Klive. In this case, the label should go ",(0,n.jsx)(s.em,{children:"before"})," its instruction. Take a look at this code snippet:"]}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"MyStart:"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld hl,0"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"MyNext"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ; Use B as a counter"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld b,32"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["This code is entirely correct. Note the ",(0,n.jsx)(s.code,{children:"ld b,32"})," instruction belongs to the ",(0,n.jsx)(s.code,{children:"MyNext"})," label. As you see from the sample, the colon character is optional for hanging labels, too. You can have multiple line breaks between a label and its instruction, and the space can include comments."]}),"\n",(0,n.jsx)(s.h3,{id:"label-and-symbol-declarations",children:"Label and Symbol Declarations"}),"\n",(0,n.jsxs)(s.p,{children:["As you will learn later, you can define symbols with the ",(0,n.jsx)(s.code,{children:".EQU"})," or ",(0,n.jsx)(s.code,{children:".VAR"})," pragmas. While ",(0,n.jsx)(s.code,{children:".EQU"})," allows you to assign a constant value to a symbol, it cannot change its value after the declaration. ",(0,n.jsx)(s.code,{children:".VAR"})," lets you re-assign the initial value."]}),"\n",(0,n.jsxs)(s.p,{children:["Klive supports the idea of lexical scopes. When you create the program, it starts with a global (outermost) lexical scope. Particular language elements, such a ",(0,n.jsx)(s.em,{children:"statements"})," create their nested lexical scope. Labels and symbols are always created within the current lexical scope. Nonetheless, when resolving them, the assembler starts with the innermost scope and goes through all outer scopes until it finds the label declaration."]}),"\n",(0,n.jsx)(s.p,{children:"This mechanism means that you can declare labels within a nested scope so that those hide labels and symbols in outer scopes."}),"\n",(0,n.jsx)(s.p,{children:"Klive also supports modules, which allow you to use namespace-like constructs."}),"\n",(0,n.jsx)(s.h3,{id:"temporary-labels",children:"Temporary Labels"}),"\n",(0,n.jsx)(s.p,{children:"The assembler considers labels that start with a backtick (`) character as temporary labels. Their scope is the area between the last persistent label preceding the temporary one and the first persistent label following the temporary one."}),"\n",(0,n.jsx)(s.p,{children:"This code snippet demonstrates this concept:"}),"\n",(0,n.jsx)(s.pre,{"data-language":"text","data-theme":"default",children:(0,n.jsxs)(s.code,{"data-language":"text","data-theme":"default",children:[(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"SetPixels:        ; Persistent label"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld hl, #4000"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld a,#AA"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld b,#20"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"`loop:            ; Temporary label (scope #1)"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld (hl),a"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  inc hl"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  djnz `loop"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"SetAttr:          ; Persistent label, scope #1 disposed here"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld hl,#5800"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld a,#32"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld b,#20"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"`loop:            ; Temporary label (scope #2)"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld (hl),a"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  inc hl"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  djnz `loop"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ret"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"}})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; scope #2 still lives here"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"; ..."})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"Another: ; Persistent label, scope #2 disposed here"})}),"\n",(0,n.jsx)(s.span,{className:"line",children:(0,n.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:"  ld a,b"})})]})}),"\n",(0,n.jsxs)(s.p,{children:["As you see, the two occurrences of ",(0,n.jsx)(s.code,{children:" `loop"}),"  belong to two separate temporary scopes. The first scope is the one between ",(0,n.jsx)(s.code,{children:"SetPixels"})," and ",(0,n.jsx)(s.code,{children:"SetAttr"}),", the second one between ",(0,n.jsx)(s.code,{children:"SetAttr"})," and ",(0,n.jsx)(s.code,{children:"Another"}),"."]})]})}function MDXContent(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,r.a)(),e.components);return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(_createMdxContent,{...e})}):_createMdxContent(e)}let o={MDXContent,pageOpts:{filePath:"pages/z80-assembly/language-structure.mdx",route:"/z80-assembly/language-structure",pageMap:[{kind:"Meta",data:{index:"Introduction","getting-started":"Getting Started","z80-assembly":"Klive Z80 Assembler"}},{kind:"Folder",name:"getting-started",route:"/getting-started",children:[{kind:"Meta",data:{installation:"Installing Klive","first-run":"Running Klive",keyboard:"Using the Keyboard",tapes:"Loading from Tape","save-programs":"Saving Files","creating-project":"Creating a Klive Project"}},{kind:"MdxPage",name:"creating-project",route:"/getting-started/creating-project"},{kind:"MdxPage",name:"first-run",route:"/getting-started/first-run"},{kind:"MdxPage",name:"installation",route:"/getting-started/installation"},{kind:"MdxPage",name:"keyboard",route:"/getting-started/keyboard"},{kind:"MdxPage",name:"save-programs",route:"/getting-started/save-programs"},{kind:"MdxPage",name:"tapes",route:"/getting-started/tapes"}]},{kind:"MdxPage",name:"index",route:"/"},{kind:"Folder",name:"z80-assembly",route:"/z80-assembly",children:[{kind:"Meta",data:{"z80-assembler":"Assembler Overview","language-structure":"Language Structure",expressions:"Expressions","z80-instructions":"Z80 Instructions",pragmas:"Pragmas",statements:"Assembler Statements",macros:"Macros",structs:"Structs"}},{kind:"MdxPage",name:"expressions",route:"/z80-assembly/expressions"},{kind:"MdxPage",name:"language-structure",route:"/z80-assembly/language-structure"},{kind:"MdxPage",name:"macros",route:"/z80-assembly/macros"},{kind:"MdxPage",name:"pragmas",route:"/z80-assembly/pragmas"},{kind:"MdxPage",name:"statements",route:"/z80-assembly/statements"},{kind:"MdxPage",name:"structs",route:"/z80-assembly/structs"},{kind:"MdxPage",name:"z80-assembler",route:"/z80-assembly/z80-assembler"},{kind:"MdxPage",name:"z80-instructions",route:"/z80-assembly/z80-instructions"}]}],flexsearch:{codeblocks:!0},title:"Klive Z80 Assembly Language Structure",headings:c},pageNextRoute:"/z80-assembly/language-structure",nextraLayout:t.ZP,themeConfig:i.Z};s.default=(0,a.j)(o)},3662:function(e,s,l){"use strict";l.d(s,{Z:function(){return a}});var n=l(5893);l(7294);var a={logo:(0,n.jsxs)("div",{style:{display:"flex",alignItems:"center"},children:[(0,n.jsx)(e=>{let{width:s=50,height:l=50}=e;return(0,n.jsxs)("svg",{width:s,height:l,viewBox:"0 0 200 200",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[(0,n.jsx)("rect",{width:"100%",height:"100%",fill:"#000"}),(0,n.jsx)("path",{d:"M 200 149 l 0 -20 l -70 70 l 20 0",fill:"#0ff"}),(0,n.jsx)("path",{d:"M 200 129 l 0 -20 l -90 90 l 20 0",fill:"#0f0"}),(0,n.jsx)("path",{d:"M 200 109 l 0 -20 l -110 110 l 20 0",fill:"#ff0"}),(0,n.jsx)("path",{d:"M 200 89 l 0 -20 l -130 130 l 20 0",fill:"#f00"}),(0,n.jsx)("path",{d:"M 0 0 l 200 0 l 0 8 l -200 0",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 0 200 l 200 0 l 0 -8 l -200 0",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 0 0 l 0 200 l 8 0 l 0 -200",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 192 0 l 0 200 l 8 0 l 0 -200",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 40 40 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 40 60 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 40 80 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 40 100 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 40 120 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 40 140 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 60 80 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 80 80 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 100 100 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 120 120 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 140 140 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 100 60 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"}),(0,n.jsx)("path",{d:"M 120 40 l 20 0 l 0 20 l -20 0 l 0 -20",fill:"#00B4CC"})," "]})},{}),(0,n.jsx)("span",{style:{marginLeft:12,fontWeight:"bold",fontSize:"2em"},children:"Klive IDE"})]}),logoLink:"https://dotneteer.github.io/kliveide",editLink:{text:null},feedback:{content:null},project:{link:"https://github.com/dotneteer/kliveide"}}}},function(e){e.O(0,[774,546,888,179],function(){return e(e.s=4329)}),_N_E=e.O()}]);