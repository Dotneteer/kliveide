{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "/kliveide",
  "redirects": [
    {
      "source": "/kliveide",
      "destination": "/kliveide/",
      "basePath": false,
      "internal": true,
      "statusCode": 308,
      "regex": "^/kliveide$"
    },
    {
      "source": "/:file((?!\\.well-known(?:/.*)?)(?:[^/]+/)*[^/]+\\.\\w+)/",
      "destination": "/:file",
      "internal": true,
      "missing": [
        {
          "type": "header",
          "key": "x-nextjs-data"
        }
      ],
      "statusCode": 308,
      "regex": "^(?:/((?!\\.well-known(?:/.*)?)(?:[^/]+/)*[^/]+\\.\\w+))/$"
    },
    {
      "source": "/:notfile((?!\\.well-known(?:/.*)?)(?:[^/]+/)*[^/\\.]+)",
      "destination": "/:notfile/",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?!\\.well-known(?:/.*)?)(?:[^/]+/)*[^/\\.]+))$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_mdx-components",
      "regex": "^/_mdx\\-components(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_mdx\\-components(?:/)?$"
    },
    {
      "page": "/_meta",
      "regex": "^/_meta(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_meta(?:/)?$"
    },
    {
      "page": "/commands-reference",
      "regex": "^/commands\\-reference(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/commands\\-reference(?:/)?$"
    },
    {
      "page": "/contribute/_meta",
      "regex": "^/contribute/_meta(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contribute/_meta(?:/)?$"
    },
    {
      "page": "/contribute/get-source",
      "regex": "^/contribute/get\\-source(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contribute/get\\-source(?:/)?$"
    },
    {
      "page": "/contribute/improve-docs",
      "regex": "^/contribute/improve\\-docs(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/contribute/improve\\-docs(?:/)?$"
    },
    {
      "page": "/getting-started/_meta",
      "regex": "^/getting\\-started/_meta(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/getting\\-started/_meta(?:/)?$"
    },
    {
      "page": "/getting-started/creating-project",
      "regex": "^/getting\\-started/creating\\-project(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/getting\\-started/creating\\-project(?:/)?$"
    },
    {
      "page": "/getting-started/first-run",
      "regex": "^/getting\\-started/first\\-run(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/getting\\-started/first\\-run(?:/)?$"
    },
    {
      "page": "/getting-started/installation",
      "regex": "^/getting\\-started/installation(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/getting\\-started/installation(?:/)?$"
    },
    {
      "page": "/getting-started/keyboard",
      "regex": "^/getting\\-started/keyboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/getting\\-started/keyboard(?:/)?$"
    },
    {
      "page": "/getting-started/save-programs",
      "regex": "^/getting\\-started/save\\-programs(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/getting\\-started/save\\-programs(?:/)?$"
    },
    {
      "page": "/getting-started/tapes",
      "regex": "^/getting\\-started/tapes(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/getting\\-started/tapes(?:/)?$"
    },
    {
      "page": "/howto/_meta",
      "regex": "^/howto/_meta(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/howto/_meta(?:/)?$"
    },
    {
      "page": "/howto/always-on-top",
      "regex": "^/howto/always\\-on\\-top(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/howto/always\\-on\\-top(?:/)?$"
    },
    {
      "page": "/howto/diagnostics",
      "regex": "^/howto/diagnostics(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/howto/diagnostics(?:/)?$"
    },
    {
      "page": "/howto/file-extensions",
      "regex": "^/howto/file\\-extensions(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/howto/file\\-extensions(?:/)?$"
    },
    {
      "page": "/howto/ide-startup",
      "regex": "^/howto/ide\\-startup(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/howto/ide\\-startup(?:/)?$"
    },
    {
      "page": "/howto/instant-screen",
      "regex": "^/howto/instant\\-screen(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/howto/instant\\-screen(?:/)?$"
    },
    {
      "page": "/howto/measure-t-states",
      "regex": "^/howto/measure\\-t\\-states(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/howto/measure\\-t\\-states(?:/)?$"
    },
    {
      "page": "/howto/shortcuts",
      "regex": "^/howto/shortcuts(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/howto/shortcuts(?:/)?$"
    },
    {
      "page": "/machine-types",
      "regex": "^/machine\\-types(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/machine\\-types(?:/)?$"
    },
    {
      "page": "/project-templates",
      "regex": "^/project\\-templates(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/project\\-templates(?:/)?$"
    },
    {
      "page": "/scripting/_meta",
      "regex": "^/scripting/_meta(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/scripting/_meta(?:/)?$"
    },
    {
      "page": "/scripting/overview",
      "regex": "^/scripting/overview(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/scripting/overview(?:/)?$"
    },
    {
      "page": "/scripting/syntax",
      "regex": "^/scripting/syntax(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/scripting/syntax(?:/)?$"
    },
    {
      "page": "/working-with-ide/_meta",
      "regex": "^/working\\-with\\-ide/_meta(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/_meta(?:/)?$"
    },
    {
      "page": "/working-with-ide/basic",
      "regex": "^/working\\-with\\-ide/basic(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/basic(?:/)?$"
    },
    {
      "page": "/working-with-ide/breakpoints",
      "regex": "^/working\\-with\\-ide/breakpoints(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/breakpoints(?:/)?$"
    },
    {
      "page": "/working-with-ide/build-system",
      "regex": "^/working\\-with\\-ide/build\\-system(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/build\\-system(?:/)?$"
    },
    {
      "page": "/working-with-ide/commands",
      "regex": "^/working\\-with\\-ide/commands(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/commands(?:/)?$"
    },
    {
      "page": "/working-with-ide/cpu",
      "regex": "^/working\\-with\\-ide/cpu(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/cpu(?:/)?$"
    },
    {
      "page": "/working-with-ide/disassembly",
      "regex": "^/working\\-with\\-ide/disassembly(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/disassembly(?:/)?$"
    },
    {
      "page": "/working-with-ide/editing-code",
      "regex": "^/working\\-with\\-ide/editing\\-code(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/editing\\-code(?:/)?$"
    },
    {
      "page": "/working-with-ide/exporting-code",
      "regex": "^/working\\-with\\-ide/exporting\\-code(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/exporting\\-code(?:/)?$"
    },
    {
      "page": "/working-with-ide/ide-settings",
      "regex": "^/working\\-with\\-ide/ide\\-settings(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/ide\\-settings(?:/)?$"
    },
    {
      "page": "/working-with-ide/memory",
      "regex": "^/working\\-with\\-ide/memory(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/memory(?:/)?$"
    },
    {
      "page": "/working-with-ide/project-explorer",
      "regex": "^/working\\-with\\-ide/project\\-explorer(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/project\\-explorer(?:/)?$"
    },
    {
      "page": "/working-with-ide/run-debug",
      "regex": "^/working\\-with\\-ide/run\\-debug(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/run\\-debug(?:/)?$"
    },
    {
      "page": "/working-with-ide/sjasmp",
      "regex": "^/working\\-with\\-ide/sjasmp(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/sjasmp(?:/)?$"
    },
    {
      "page": "/working-with-ide/system-vars",
      "regex": "^/working\\-with\\-ide/system\\-vars(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/system\\-vars(?:/)?$"
    },
    {
      "page": "/working-with-ide/ula",
      "regex": "^/working\\-with\\-ide/ula(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/ula(?:/)?$"
    },
    {
      "page": "/working-with-ide/zxb",
      "regex": "^/working\\-with\\-ide/zxb(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/working\\-with\\-ide/zxb(?:/)?$"
    },
    {
      "page": "/z80-assembly/_meta",
      "regex": "^/z80\\-assembly/_meta(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/z80\\-assembly/_meta(?:/)?$"
    },
    {
      "page": "/z80-assembly/directives",
      "regex": "^/z80\\-assembly/directives(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/z80\\-assembly/directives(?:/)?$"
    },
    {
      "page": "/z80-assembly/expressions",
      "regex": "^/z80\\-assembly/expressions(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/z80\\-assembly/expressions(?:/)?$"
    },
    {
      "page": "/z80-assembly/language-structure",
      "regex": "^/z80\\-assembly/language\\-structure(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/z80\\-assembly/language\\-structure(?:/)?$"
    },
    {
      "page": "/z80-assembly/macros",
      "regex": "^/z80\\-assembly/macros(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/z80\\-assembly/macros(?:/)?$"
    },
    {
      "page": "/z80-assembly/pragmas",
      "regex": "^/z80\\-assembly/pragmas(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/z80\\-assembly/pragmas(?:/)?$"
    },
    {
      "page": "/z80-assembly/statements",
      "regex": "^/z80\\-assembly/statements(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/z80\\-assembly/statements(?:/)?$"
    },
    {
      "page": "/z80-assembly/structs",
      "regex": "^/z80\\-assembly/structs(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/z80\\-assembly/structs(?:/)?$"
    },
    {
      "page": "/z80-assembly/z80-assembler",
      "regex": "^/z80\\-assembly/z80\\-assembler(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/z80\\-assembly/z80\\-assembler(?:/)?$"
    },
    {
      "page": "/z80-assembly/z80-instructions",
      "regex": "^/z80\\-assembly/z80\\-instructions(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/z80\\-assembly/z80\\-instructions(?:/)?$"
    }
  ],
  "dataRoutes": [
    {
      "page": "/_meta",
      "dataRouteRegex": "^/_next/data/Jxon0DN0dXYVVFcCORy4G/_meta\\.json$"
    },
    {
      "page": "/contribute/_meta",
      "dataRouteRegex": "^/_next/data/Jxon0DN0dXYVVFcCORy4G/contribute/_meta\\.json$"
    },
    {
      "page": "/getting-started/_meta",
      "dataRouteRegex": "^/_next/data/Jxon0DN0dXYVVFcCORy4G/getting-started/_meta\\.json$"
    },
    {
      "page": "/howto/_meta",
      "dataRouteRegex": "^/_next/data/Jxon0DN0dXYVVFcCORy4G/howto/_meta\\.json$"
    },
    {
      "page": "/scripting/_meta",
      "dataRouteRegex": "^/_next/data/Jxon0DN0dXYVVFcCORy4G/scripting/_meta\\.json$"
    },
    {
      "page": "/working-with-ide/_meta",
      "dataRouteRegex": "^/_next/data/Jxon0DN0dXYVVFcCORy4G/working-with-ide/_meta\\.json$"
    },
    {
      "page": "/z80-assembly/_meta",
      "dataRouteRegex": "^/_next/data/Jxon0DN0dXYVVFcCORy4G/z80-assembly/_meta\\.json$"
    }
  ],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": {
    "beforeFiles": [
      {
        "source": "/kliveide//_next/:path+",
        "destination": "/kliveide/_next/:path+",
        "regex": "^/kliveide//_next(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))(?:/)?$"
      }
    ],
    "afterFiles": [],
    "fallback": []
  }
}