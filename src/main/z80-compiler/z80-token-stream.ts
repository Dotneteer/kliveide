import { InputStream } from "../compiler-common/input-stream";
import {
  commonResolverHash,
  CommonTokens,
} from "@main/compiler-common/common-tokens";
import { CommonTokenStream } from "@main/compiler-common/common-token-stream";

/**
 * This class implements the tokenizer (lexer) of the assembler
 */
export class Z80TokenStream extends CommonTokenStream<Z80TokenType> {
  /**
   * Initializes the tokenizer with the input stream
   * @param input Input source code stream
   */
  constructor(public readonly input: InputStream) {
    super(input);
  }

  /**
   * Gets the resolver hash for the current token stream
   */
  getResolverHash(): Record<string, number> {
    return resolverHash;
  }

  /**
   * Gets the escape characters for the current token stream
   */
  get escapeChars(): string[] {
    return ["i", "p", "f", "b", "I", "o", "a", "t", "P", "C", "'", '"', "\\", "0"];
  }

}

/**
 * This enumeration defines the token types
 */
export const Z80Tokens = {
  ...CommonTokens,

  A: 1000,
  B: 1001,
  C: 1002,
  D: 1003,
  E: 1004,
  H: 1005,
  L: 1006,
  I: 1007,
  R: 1008,
  XL: 1009,
  XH: 1010,
  YL: 1011,
  YH: 1012,
  BC: 1013,
  DE: 1014,
  HL: 1015,
  SP: 1016,
  IX: 1017,
  IY: 1018,
  AF: 1019,
  AF_: 1020,
  Z: 1021,
  NZ: 1022,
  NC: 1023,
  PO: 1024,
  PE: 1025,
  P: 1026,
  M: 1027,

  Nop: 1028,
  Rlca: 1029,
  Rrca: 1030,
  Rla: 1031,
  Rra: 1032,
  Daa: 1033,
  Cpl: 1034,
  Scf: 1035,
  Ccf: 1036,
  Halt: 1037,
  Ret: 1038,
  Exx: 1039,
  Di: 1040,
  Ei: 1041,
  Neg: 1042,
  Retn: 1043,
  Reti: 1044,
  Rld: 1045,
  Rrd: 1046,
  Ldi: 1047,
  Cpi: 1048,
  Ini: 1049,
  Outi: 1050,
  Ldd: 1051,
  Cpd: 1052,
  Ind: 1053,
  Outd: 1054,
  Ldir: 1055,
  Cpir: 1056,
  Inir: 1057,
  Otir: 1058,
  Lddr: 1059,
  Cpdr: 1060,
  Indr: 1061,
  Otdr: 1062,

  Ld: 1063,
  Inc: 1064,
  Dec: 1065,
  Ex: 1066,
  Add: 1067,
  Adc: 1068,
  Sub: 1069,
  Sbc: 1070,
  And: 1071,
  Xor: 1072,
  Or: 1073,
  Cp: 1074,
  Djnz: 1075,
  Jr: 1076,
  Jp: 1077,
  Call: 1078,
  Rst: 1079,
  Push: 1080,
  Pop: 1081,
  In: 1082,
  Out: 1083,
  Im: 1084,
  Rlc: 1085,
  Rrc: 1086,
  Rl: 1087,
  Rr: 1088,
  Sla: 1089,
  Sra: 1090,
  Sll: 1091,
  Srl: 1092,
  Bit: 1093,
  Res: 1094,
  Set: 1095,

  Swapnib: 1096,
  Mirror: 1097,
  Test: 1098,
  Bsla: 1099,
  Bsra: 1100,
  Bsrl: 1101,
  Bsrf: 1102,
  Brlc: 1103,
  Mul: 1104,
  OutInB: 1105,
  NextReg: 1106,
  PixelDn: 1107,
  PixelAd: 1108,
  SetAE: 1109,
  Ldix: 1110,
  Ldws: 1111,
  Lddx: 1112,
  Ldirx: 1113,
  Ldpirx: 1114,
  Lddrx: 1115,

  Macro: 1116,
  Endm: 1117,
  Proc: 1118,
  Endp: 1119,
  Loop: 1120,
  Endl: 1121,
  Repeat: 1122,
  Until: 1123,
  While: 1124,
  Endw: 1125,
  If: 1126,
  IfUsed: 1127,
  IfNUsed: 1128,
  Elif: 1129,
  Else: 1130,
  Endif: 1131,
  For: 1132,
  To: 1133,
  Step: 1134,
  Next: 1135,
  Break: 1136,
  Continue: 1137,
  Module: 1138,
  EndModule: 1139,
  Struct: 1140,
  Ends: 1141,

  HReg: 1142,
  LReg: 1143,
  IsReg8: 1144,
  IsReg8Std: 1145,
  IsReg8Spec: 1146,
  IsReg8Idx: 1147,
  IsReg16: 1148,
  IsReg16Std: 1149,
  IsReg16Idx: 1150,
  IsRegIndirect: 1151,
  IsCPort: 1152,
  IsIndexedAddr: 1153,
  IsCondition: 1154,
  IsExpr: 1155,
  IsRegA: 1156,
  IsRegAf: 1157,
  IsRegB: 1158,
  IsRegC: 1159,
  IsRegBc: 1160,
  IsRegD: 1161,
  IsRegE: 1162,
  IsRegDe: 1163,
  IsRegH: 1164,
  IsRegL: 1165,
  IsRegHl: 1166,
  IsRegI: 1167,
  IsRegR: 1168,
  IsRegXh: 1169,
  IsRegXl: 1170,
  IsRegIx: 1171,
  IsRegYh: 1172,
  IsRegYl: 1173,
  IsRegIy: 1174,
  IsRegSp: 1175
};

export type Z80TokenType = (typeof Z80Tokens)[keyof typeof Z80Tokens];

// A hash of keyword-like tokens starting with a dot
const resolverHash: Record<string, Z80TokenType> = {
  ...commonResolverHash,
  a: Z80Tokens.A,
  A: Z80Tokens.A,
  b: Z80Tokens.B,
  B: Z80Tokens.B,
  c: Z80Tokens.C,
  C: Z80Tokens.C,
  d: Z80Tokens.D,
  D: Z80Tokens.D,
  e: Z80Tokens.E,
  E: Z80Tokens.E,
  h: Z80Tokens.H,
  H: Z80Tokens.H,
  l: Z80Tokens.L,
  L: Z80Tokens.L,
  i: Z80Tokens.I,
  I: Z80Tokens.I,
  r: Z80Tokens.R,
  R: Z80Tokens.R,
  xl: Z80Tokens.XL,
  XL: Z80Tokens.XL,
  ixl: Z80Tokens.XL,
  IXL: Z80Tokens.XL,
  IXl: Z80Tokens.XL,
  yl: Z80Tokens.YL,
  YL: Z80Tokens.YL,
  iyl: Z80Tokens.YL,
  IYL: Z80Tokens.YL,
  IYl: Z80Tokens.YL,
  xh: Z80Tokens.XH,
  XH: Z80Tokens.XH,
  ixh: Z80Tokens.XH,
  IXH: Z80Tokens.XH,
  IXh: Z80Tokens.XH,
  yh: Z80Tokens.YH,
  YH: Z80Tokens.YH,
  iyh: Z80Tokens.YH,
  IYH: Z80Tokens.YH,
  IYh: Z80Tokens.YH,

  bc: Z80Tokens.BC,
  BC: Z80Tokens.BC,
  de: Z80Tokens.DE,
  DE: Z80Tokens.DE,
  hl: Z80Tokens.HL,
  HL: Z80Tokens.HL,
  sp: Z80Tokens.SP,
  SP: Z80Tokens.SP,
  ix: Z80Tokens.IX,
  IX: Z80Tokens.IX,
  iy: Z80Tokens.IY,
  IY: Z80Tokens.IY,
  af: Z80Tokens.AF,
  AF: Z80Tokens.AF,
  "af'": Z80Tokens.AF_,
  "AF'": Z80Tokens.AF_,

  z: Z80Tokens.Z,
  Z: Z80Tokens.Z,
  nz: Z80Tokens.NZ,
  NZ: Z80Tokens.NZ,
  nc: Z80Tokens.NC,
  NC: Z80Tokens.NC,
  po: Z80Tokens.PO,
  PO: Z80Tokens.PO,
  pe: Z80Tokens.PE,
  PE: Z80Tokens.PE,
  p: Z80Tokens.P,
  P: Z80Tokens.P,
  m: Z80Tokens.M,
  M: Z80Tokens.M,

  nop: Z80Tokens.Nop,
  NOP: Z80Tokens.Nop,
  rlca: Z80Tokens.Rlca,
  RLCA: Z80Tokens.Rlca,
  rrca: Z80Tokens.Rrca,
  RRCA: Z80Tokens.Rrca,
  rla: Z80Tokens.Rla,
  RLA: Z80Tokens.Rla,
  rra: Z80Tokens.Rra,
  RRA: Z80Tokens.Rra,
  daa: Z80Tokens.Daa,
  DAA: Z80Tokens.Daa,
  cpl: Z80Tokens.Cpl,
  CPL: Z80Tokens.Cpl,
  scf: Z80Tokens.Scf,
  SCF: Z80Tokens.Scf,
  ccf: Z80Tokens.Ccf,
  CCF: Z80Tokens.Ccf,
  halt: Z80Tokens.Halt,
  HALT: Z80Tokens.Halt,
  ret: Z80Tokens.Ret,
  RET: Z80Tokens.Ret,
  exx: Z80Tokens.Exx,
  EXX: Z80Tokens.Exx,
  di: Z80Tokens.Di,
  DI: Z80Tokens.Di,
  ei: Z80Tokens.Ei,
  EI: Z80Tokens.Ei,
  neg: Z80Tokens.Neg,
  NEG: Z80Tokens.Neg,
  retn: Z80Tokens.Retn,
  RETN: Z80Tokens.Retn,
  reti: Z80Tokens.Reti,
  RETI: Z80Tokens.Reti,
  rld: Z80Tokens.Rld,
  RLD: Z80Tokens.Rld,
  rrd: Z80Tokens.Rrd,
  RRD: Z80Tokens.Rrd,
  ldi: Z80Tokens.Ldi,
  LDI: Z80Tokens.Ldi,
  cpi: Z80Tokens.Cpi,
  CPI: Z80Tokens.Cpi,
  ini: Z80Tokens.Ini,
  INI: Z80Tokens.Ini,
  outi: Z80Tokens.Outi,
  OUTI: Z80Tokens.Outi,
  ldd: Z80Tokens.Ldd,
  LDD: Z80Tokens.Ldd,
  cpd: Z80Tokens.Cpd,
  CPD: Z80Tokens.Cpd,
  ind: Z80Tokens.Ind,
  IND: Z80Tokens.Ind,
  outd: Z80Tokens.Outd,
  OUTD: Z80Tokens.Outd,
  ldir: Z80Tokens.Ldir,
  LDIR: Z80Tokens.Ldir,
  cpir: Z80Tokens.Cpir,
  CPIR: Z80Tokens.Cpir,
  inir: Z80Tokens.Inir,
  INIR: Z80Tokens.Inir,
  otir: Z80Tokens.Otir,
  OTIR: Z80Tokens.Otir,
  lddr: Z80Tokens.Lddr,
  LDDR: Z80Tokens.Lddr,
  cpdr: Z80Tokens.Cpdr,
  CPDR: Z80Tokens.Cpdr,
  indr: Z80Tokens.Indr,
  INDR: Z80Tokens.Indr,
  otdr: Z80Tokens.Otdr,
  OTDR: Z80Tokens.Otdr,

  ld: Z80Tokens.Ld,
  LD: Z80Tokens.Ld,
  inc: Z80Tokens.Inc,
  INC: Z80Tokens.Inc,
  dec: Z80Tokens.Dec,
  DEC: Z80Tokens.Dec,
  ex: Z80Tokens.Ex,
  EX: Z80Tokens.Ex,
  add: Z80Tokens.Add,
  ADD: Z80Tokens.Add,
  adc: Z80Tokens.Adc,
  ADC: Z80Tokens.Adc,
  sub: Z80Tokens.Sub,
  SUB: Z80Tokens.Sub,
  sbc: Z80Tokens.Sbc,
  SBC: Z80Tokens.Sbc,
  and: Z80Tokens.And,
  AND: Z80Tokens.And,
  xor: Z80Tokens.Xor,
  XOR: Z80Tokens.Xor,
  or: Z80Tokens.Or,
  OR: Z80Tokens.Or,
  cp: Z80Tokens.Cp,
  CP: Z80Tokens.Cp,
  djnz: Z80Tokens.Djnz,
  DJNZ: Z80Tokens.Djnz,
  jr: Z80Tokens.Jr,
  JR: Z80Tokens.Jr,
  jp: Z80Tokens.Jp,
  JP: Z80Tokens.Jp,
  call: Z80Tokens.Call,
  CALL: Z80Tokens.Call,
  rst: Z80Tokens.Rst,
  RST: Z80Tokens.Rst,
  push: Z80Tokens.Push,
  PUSH: Z80Tokens.Push,
  pop: Z80Tokens.Pop,
  POP: Z80Tokens.Pop,
  in: Z80Tokens.In,
  IN: Z80Tokens.In,
  out: Z80Tokens.Out,
  OUT: Z80Tokens.Out,
  im: Z80Tokens.Im,
  IM: Z80Tokens.Im,
  rlc: Z80Tokens.Rlc,
  RLC: Z80Tokens.Rlc,
  rrc: Z80Tokens.Rrc,
  RRC: Z80Tokens.Rrc,
  rl: Z80Tokens.Rl,
  RL: Z80Tokens.Rl,
  rr: Z80Tokens.Rr,
  RR: Z80Tokens.Rr,
  sla: Z80Tokens.Sla,
  SLA: Z80Tokens.Sla,
  sra: Z80Tokens.Sra,
  SRA: Z80Tokens.Sra,
  sll: Z80Tokens.Sll,
  SLL: Z80Tokens.Sll,
  srl: Z80Tokens.Srl,
  SRL: Z80Tokens.Srl,
  bit: Z80Tokens.Bit,
  BIT: Z80Tokens.Bit,
  set: Z80Tokens.Set,
  SET: Z80Tokens.Set,
  res: Z80Tokens.Res,
  RES: Z80Tokens.Res,

  swapnib: Z80Tokens.Swapnib,
  SWAPNIB: Z80Tokens.Swapnib,
  swap: Z80Tokens.Swapnib,
  SWAP: Z80Tokens.Swapnib,
  mirror: Z80Tokens.Mirror,
  MIRROR: Z80Tokens.Mirror,
  mirr: Z80Tokens.Mirror,
  MIRR: Z80Tokens.Mirror,
  test: Z80Tokens.Test,
  TEST: Z80Tokens.Test,
  bsla: Z80Tokens.Bsla,
  BSLA: Z80Tokens.Bsla,
  bsra: Z80Tokens.Bsra,
  BSRA: Z80Tokens.Bsra,
  bsrl: Z80Tokens.Bsrl,
  BSRL: Z80Tokens.Bsrl,
  bsrf: Z80Tokens.Bsrf,
  BSRF: Z80Tokens.Bsrf,
  brlc: Z80Tokens.Brlc,
  BRLC: Z80Tokens.Brlc,
  mul: Z80Tokens.Mul,
  MUL: Z80Tokens.Mul,
  outinb: Z80Tokens.OutInB,
  OUTINB: Z80Tokens.OutInB,
  otib: Z80Tokens.OutInB,
  OTIB: Z80Tokens.OutInB,
  nextreg: Z80Tokens.NextReg,
  NEXTREG: Z80Tokens.NextReg,
  nreg: Z80Tokens.NextReg,
  NREG: Z80Tokens.NextReg,
  pixeldn: Z80Tokens.PixelDn,
  PIXELDN: Z80Tokens.PixelDn,
  pxdn: Z80Tokens.PixelDn,
  PXDN: Z80Tokens.PixelDn,
  pixelad: Z80Tokens.PixelAd,
  PIXELAD: Z80Tokens.PixelAd,
  pxad: Z80Tokens.PixelAd,
  PXAD: Z80Tokens.PixelAd,
  setae: Z80Tokens.SetAE,
  SETAE: Z80Tokens.SetAE,
  stae: Z80Tokens.SetAE,
  STAE: Z80Tokens.SetAE,
  ldix: Z80Tokens.Ldix,
  LDIX: Z80Tokens.Ldix,
  ldws: Z80Tokens.Ldws,
  LDWS: Z80Tokens.Ldws,
  lddx: Z80Tokens.Lddx,
  LDDX: Z80Tokens.Lddx,
  ldirx: Z80Tokens.Ldirx,
  LDIRX: Z80Tokens.Ldirx,
  lirx: Z80Tokens.Ldirx,
  LIRX: Z80Tokens.Ldirx,
  ldpirx: Z80Tokens.Ldpirx,
  LDPIRX: Z80Tokens.Ldpirx,
  lprx: Z80Tokens.Ldpirx,
  LPRX: Z80Tokens.Ldpirx,
  lddrx: Z80Tokens.Lddrx,
  LDDRX: Z80Tokens.Lddrx,
  ldrx: Z80Tokens.Lddrx,
  LDRX: Z80Tokens.Lddrx,

  hreg: Z80Tokens.HReg,
  HREG: Z80Tokens.HReg,

  lreg: Z80Tokens.LReg,
  LREG: Z80Tokens.LReg,

  isreg8: Z80Tokens.IsReg8,
  ISREG8: Z80Tokens.IsReg8,

  isreg8std: Z80Tokens.IsReg8Std,
  ISREG8STD: Z80Tokens.IsReg8Std,

  isreg8spec: Z80Tokens.IsReg8Spec,
  ISREG8SPEC: Z80Tokens.IsReg8Spec,

  isreg8idx: Z80Tokens.IsReg8Idx,
  ISREG8IDX: Z80Tokens.IsReg8Idx,

  isreg16: Z80Tokens.IsReg16,
  ISREG16: Z80Tokens.IsReg16,

  isreg16std: Z80Tokens.IsReg16Std,
  ISREG16STD: Z80Tokens.IsReg16Std,

  isreg16idx: Z80Tokens.IsReg16Idx,
  ISREG16IDX: Z80Tokens.IsReg16Idx,

  isregindirect: Z80Tokens.IsRegIndirect,
  ISREGINDIRECT: Z80Tokens.IsRegIndirect,

  iscport: Z80Tokens.IsCPort,
  ISCPORT: Z80Tokens.IsCPort,

  iscondition: Z80Tokens.IsCondition,
  ISCONDITION: Z80Tokens.IsCondition,

  isexpr: Z80Tokens.IsExpr,
  ISEXPR: Z80Tokens.IsExpr,

  isrega: Z80Tokens.IsRegA,
  ISREGA: Z80Tokens.IsRegA,
  isregaf: Z80Tokens.IsRegAf,
  ISREGAF: Z80Tokens.IsRegAf,
  isregb: Z80Tokens.IsRegB,
  ISREGB: Z80Tokens.IsRegB,
  isregc: Z80Tokens.IsRegC,
  ISREGC: Z80Tokens.IsRegC,
  isregbc: Z80Tokens.IsRegBc,
  ISREGBC: Z80Tokens.IsRegBc,
  isregd: Z80Tokens.IsRegD,
  ISREGD: Z80Tokens.IsRegD,
  isrege: Z80Tokens.IsRegE,
  ISREGE: Z80Tokens.IsRegE,
  isregde: Z80Tokens.IsRegDe,
  ISREGDE: Z80Tokens.IsRegDe,
  isregh: Z80Tokens.IsRegH,
  ISREGH: Z80Tokens.IsRegH,
  isregl: Z80Tokens.IsRegL,
  ISREGL: Z80Tokens.IsRegL,
  isreghl: Z80Tokens.IsRegHl,
  ISREGHL: Z80Tokens.IsRegHl,
  isregi: Z80Tokens.IsRegI,
  ISREGI: Z80Tokens.IsRegI,
  isregr: Z80Tokens.IsRegR,
  ISREGR: Z80Tokens.IsRegR,
  isregxh: Z80Tokens.IsRegXh,
  ISREGXH: Z80Tokens.IsRegXh,
  isregxl: Z80Tokens.IsRegXl,
  ISREGXL: Z80Tokens.IsRegXl,
  isregix: Z80Tokens.IsRegIx,
  ISREGIX: Z80Tokens.IsRegIx,
  isregyh: Z80Tokens.IsRegYh,
  ISREGYH: Z80Tokens.IsRegYh,
  isregyl: Z80Tokens.IsRegYl,
  ISREGYL: Z80Tokens.IsRegYl,
  isregiy: Z80Tokens.IsRegIy,
  ISREGIY: Z80Tokens.IsRegIy,
  isregsp: Z80Tokens.IsRegSp,
  ISREGSP: Z80Tokens.IsRegSp
};
