import { MonacoAwareCustomLanguageInfo } from "../../abstractions/CustomLanguageInfo";

/**
 * Language provider for the .asm.z80 extension
 */
export const asm6510LanguageProvider: MonacoAwareCustomLanguageInfo = {
  id: "6510-asm",
  extensions: [".6510.asm"],
  icon: "file-6510-asm",
  allowBuildRoot: true,
  supportsKlive: true,
  options: {
    comments: {
      lineComment: ";"
    }
  },
  supportsBreakpoints: true,
  fullLineBreakpoints: true,
  instantSyntaxCheck: true,
  compiler: "M6510Compiler",
  languageDef: {
    keywords: [
      "brk",
      "BRK",
      "ora",
      "ORA",
      "jam",
      "JAM",
      "slo",
      "SLO",
      "dop",
      "DOP",
      "asl",
      "ASL",
      "php",
      "PHP",
      "aac",
      "AAC",
      "top",
      "TOP",
      "bpl",
      "BPL",
      "clc",
      "CLC",
      "jsr",
      "JSR",
      "and",
      "AND",
      "rla",
      "RLA",
      "bit",
      "BIT",
      "rol",
      "ROL",
      "plp",
      "PLP",
      "bmi",
      "BMI",
      "sec",
      "SEC",
      "rti",
      "RTI",
      "eor",
      "EOR",
      "sre",
      "SRE",
      "lsr",
      "LSR",
      "pha",
      "PHA",
      "asr",
      "ASR",
      "jmp",
      "JMP",
      "bvc",
      "BVC",
      "cli",
      "CLI",
      "rts",
      "RTS",
      "adc",
      "ADC",
      "rra",
      "RRA",
      "ror",
      "ROR",
      "pla",
      "PLA",
      "arr",
      "ARR",
      "bvs",
      "BVS",
      "sei",
      "SEI",
      "sta",
      "STA",
      "sax",
      "SAX",
      "sty",
      "STY",
      "stx",
      "STX",
      "dey",
      "DEY",
      "txa",
      "TXA",
      "xaa",
      "XAA",
      "XAA",
      "bcc",
      "BCC",
      "axa",
      "AXA",
      "tya",
      "TYA",
      "txs",
      "TXS",
      "sxa",
      "SXA",
      "sya",
      "SYA",
      "ldy",
      "LDY",
      "lda",
      "LDA",
      "ldx",
      "LDX",
      "lax",
      "LAX",
      "tay",
      "TAY",
      "tax",
      "TAX",
      "atx",
      "ATX",
      "bcs",
      "BCS",
      "clv",
      "CLV",
      "tsx",
      "TSX",
      "lar",
      "LAR",
      "cpy",
      "CPY",
      "cmp",
      "CMP",
      "dcp",
      "DCP",
      "dec",
      "DEC",
      "inc",
      "INC",
      "iny",
      "INY",
      "dex",
      "DEX",
      "axs",
      "AXS",
      "bne",
      "BNE",
      "cld",
      "CLD",
      "cpx",
      "CPX",
      "sbc",
      "SBC",
      "isc",
      "ISC",
      "inx",
      "INX",
      "nop",
      "NOP",
      "beq",
      "BEQ",
      "sed",
      "SED",
      "xas",
      "XAS",
      "kil",
      "KIL",
      "hlt",
      "HLT"
    ],

    registers: ["a", "A", "x", "X", "y", "Y"],

    directives: [
      "#ifdef",
      "#ifndef",
      "#define",
      "#undef",
      "#ifmod",
      "#ifnmod",
      "#endif",
      "#else",
      "#if",
      "#include",
      "#line"
    ],

    pragmas: [
      ".org",
      ".ORG",
      "org",
      "ORG",
      ".bank",
      ".BANK",
      "bank",
      "BANK",
      ".xorg",
      ".XORG",
      "xorg",
      "XORG",
      ".ent",
      ".ENT",
      "ent",
      "ENT",
      ".xent",
      ".XENT",
      "xent",
      "XENT",
      ".equ",
      ".EQU",
      "equ",
      "EQU",
      ".var",
      ".VAR",
      "var",
      "VAR",
      ".disp",
      ".DISP",
      "disp",
      "DISP",
      ".defb",
      ".DEFB",
      "defb",
      "DEFB",
      ".db",
      ".DB",
      "db",
      "DB",
      ".defw",
      ".DEFW",
      "defw",
      "DEFW",
      ".dw",
      ".DW",
      "dw",
      "DW",
      ".defm",
      ".DEFM",
      "defm",
      "DEFM",
      ".dm",
      ".DM",
      "dm",
      "DM",
      ".defn",
      ".DEFN",
      "defn",
      "DEFN",
      ".dn",
      ".DN",
      "dn",
      "DN",
      ".defh",
      ".DEFH",
      "defh",
      "DEFH",
      ".dh",
      ".DH",
      "dh",
      "DH",
      ".defs",
      ".DEFS",
      "defs",
      "DEFS",
      ".ds",
      ".DS",
      "ds",
      "DS",
      ".defc",
      ".DEFC",
      "defc",
      "DEFC",
      ".dc",
      ".DC",
      "dc",
      "DC",
      ".defg",
      ".DEFG",
      "defg",
      "DEFG",
      ".dg",
      ".DG",
      "dg",
      "DG",
      ".defgx",
      ".DEFGX",
      "defgx",
      "DEFGX",
      ".dgx",
      ".DGX",
      "dgx",
      "DGX",
      ".skip",
      ".SKIP",
      "skip",
      "SKIP",
      ".extern",
      ".EXTERN",
      "extern",
      "EXTERN",
      ".fillb",
      ".FILLB",
      "fillb",
      "FILLB",
      "\\.fillw",
      ".FILLW",
      "fillw",
      "FILLW",
      ".model",
      ".MODEL",
      "model",
      "MODEL",
      ".injectopt",
      ".INJECTOPT",
      "injectopt",
      "INJECTOPT",
      ".align",
      ".ALIGN",
      "align",
      "ALIGN",
      ".trace",
      ".TRACE",
      "trace",
      "TRACE",
      ".tracehex",
      ".TRACEHEX",
      "tracehex",
      "TRACEHEX",
      ".rndseed",
      ".RNDSEED",
      "rndseed",
      "RNDSEED",
      ".error",
      ".ERROR",
      "error",
      "ERROR",
      ".includebin",
      ".INCLUDEBIN",
      "includebin",
      "INCLUDEBIN",
      ".include_bin",
      ".INCLUDE_BIN",
      "include_bin",
      "INCLUDE_BIN",
      ".incbin",
      ".INCBIN",
      "incbin",
      "INCBIN",
      ".comparebin",
      ".COMPAREBIN",
      "comparebin",
      "COMPAREBIN",
      ".zxbasic",
      ".ZXBASIC",
      "zxbasic",
      "ZXBASIC",
      ".onsuccess",
      ".ONSUCCESS",
      "onsuccess",
      "ONSUCCESS"
    ],

    boolLiterals: ["true", "TRUE", "false", "FALSE", ".false", ".FALSE", ".true", ".TRUE"],

    operators: [
      ":",
      "::",
      ":=",
      "=",
      "==",
      "===",
      "?",
      "+",
      "-",
      "*",
      "/",
      "|",
      "^",
      "!",
      "!=",
      "!==",
      ">",
      "<",
      "<=",
      ">=",
      "~",
      "%",
      "&",
      "<<",
      "<?",
      ">>",
      ">?"
    ],

    statements: [
      ".macro",
      ".MACRO",
      "macro",
      "MACRO",
      ".mend",
      ".MEND",
      "mend",
      "MEND",
      ".proc",
      ".PROC",
      "proc",
      "PROC",
      ".endp",
      ".ENDP",
      "endp",
      "ENDP",
      ".pend",
      ".PEND",
      "pend",
      "PEND",
      ".loop",
      ".LOOP",
      "loop",
      "LOOP",
      ".endl",
      ".ENDL",
      "endl",
      "ENDL",
      ".lend",
      ".LEND",
      "lend",
      "LEND",
      ".repeat",
      ".REPEAT",
      "repeat",
      "REPEAT",
      ".until",
      ".UNTIL",
      "until",
      "UNTIL",
      ".while",
      ".WHILE",
      "while",
      "WHILE",
      ".endw",
      ".ENDW",
      "endw",
      "ENDW",
      ".wend",
      ".WEND",
      "wend",
      "WEND",
      ".ifused",
      ".IFUSED",
      "ifused",
      "IFUSED",
      ".ifnused",
      ".IFNUSED",
      "ifnused",
      "IFNUSED",
      ".if",
      ".IF",
      "if",
      "IF",
      ".elif",
      ".ELIF",
      "elif",
      "ELIF",
      ".else",
      ".ELSE",
      "else",
      "ELSE",
      ".endif",
      ".ENDIF",
      "endif",
      "ENDIF",
      ".for",
      ".FOR",
      "for",
      "FOR",
      ".to",
      ".TO",
      "to",
      "TO",
      ".step",
      ".STEP",
      "step",
      "STEP",
      ".next",
      ".NEXT",
      "next",
      "NEXT",
      ".break",
      ".BREAK",
      "break",
      "BREAK",
      ".continue",
      ".CONTINUE",
      "continue",
      "CONTINUE",
      ".endmodule",
      ".ENDMODULE",
      "endmodule",
      "ENDMODULE",
      ".endscope",
      ".ENDSCOPE",
      "endscope",
      "ENDSCOPE",
      ".moduleend",
      ".MODULEEND",
      "moduleend",
      "MODULEEND",
      ".scopeend",
      ".SCOPEEND",
      "scopeend",
      "SCOPEEND",
      ".struct",
      ".STRUCT",
      "struct",
      "STRUCT",
      ".ends",
      ".END",
      "ends",
      "ENDS",
      ".local",
      ".LOCAL",
      "local",
      "LOCAL",
      "Local",
      ".endm",
      ".ENDM",
      "endm",
      "ENDM",
      ".module",
      ".MODULE",
      "module",
      "MODULE",
      ".scope",
      ".SCOPE",
      "scope",
      "SCOPE"
    ],

    functions: [
      "textof",
      "TEXTOF",
      "ltextof",
      "LTEXTOF",
      "def",
      "DEF",
      "isregx",
      "ISREGX",
      "isregy",
      "ISREGY",
      "isindexedaddr",
      "ISINDEXEDADDR",
      "isexpr",
      "ISEXPR",
      ".cnt",
      ".CNT"
    ],

    escapes: /\\(?:[nsRr\\"']|x[0-9A-Fa-f]{2})/,

    symbols: /[:,?+-\/*=><!~&|\/\^%]+/,

    tokenizer: {
      root: [
        // --- Character literal
        [/'.'/, "string"],

        // --- Special functions
        [/\$cnt|\$CNT/, "identifier"],

        // --- Special registers
        [/af'|AF'/, "register"],

        // --- Hexadecimal literal
        // see Directives action, for additinal case
        [/(?:(0x|\$)[0-9A-Fa-f]{1,4}|[0-9][0-9A-Fa-f]{0,3}[Hh])/, "number"],

        // --- Real literal
        [/[0-9]*(\.[0-9]+)([eE][+-]?[0-9]+)?/, "number"],

        // --- Directives
        [
          /#[0-9A-Za-z_]+/,
          {
            cases: {
              "@directives": "keyword",
              "#[0-9A-Fa-f]{1,4}": "number",
              "@default": "identifier"
            }
          }
        ],

        // --- Keyword-like tokens
        [
          /[\._@`A-Za-z][_@!?\.0-9A-Za-z]*/,
          {
            cases: {
              "@keywords": "keyword",
              "@pragmas": "pragma",
              "@registers": "register",
              "@boolLiterals": "number",
              "@statements": "statement",
              "@functions": "function",
              "@default": "identifier"
            }
          }
        ],

        // --- Whitespace
        { include: "@whitespace" },

        // --- Binary literal
        [/%[01_]+/, "number"],

        // --- Octal literal
        [/[0-7]{1,6}(o|O|q|Q)/, "number"],

        // --- Decimal literal
        [/[0-9]+/, "number"],

        // --- Delimiters
        [/[()\[\]]/, "@brackets"],

        // --- Various operators
        [/@symbols/, { cases: { "@operators": "operator", "@default": "" } }],

        // --- Macro parameter
        [/{{/, { token: "macroparam", next: "@macroParam", log: "mp-beg" }],

        // strings
        [/"([^"\\]|\\.)*$/, "string.invalid"], // non-teminated string
        [/"/, { token: "string.quote", bracket: "@open", next: "@string" }]
      ],

      comment: [
        [/\*\//, "comment", "@pop"],
        [/[^\/*]+$/, "comment", "@pop"],
        [/[^\/*]+/, "comment"],
        [/[\/*]$/, "comment", "@pop"],
        [/[\/*]/, "comment"]
      ],

      string: [
        [/[^\\"]+/, "string"],
        [/@escapes/, "escape"],
        [/\\./, "string.escape.invalid"],
        [/"/, { token: "string.quote", bracket: "@close", next: "@pop" }]
      ],

      whitespace: [
        [/[ \t\r\n]+/, "white"],
        [/\/\*/, "comment", "@comment"],
        [/\/\/.*$/, "comment"],
        [/;.*$/, "comment"]
      ],

      macroParam: [
        [/}}/, "macroparam", "@pop"],
        [/[\._@`a-zA-Z][_@!?\.0-9A-Za-z]*$/, "macroparam", "@pop"],
        [/[\._@`a-zA-Z][_@!?\.0-9A-Za-z]*/, "macroparam"],
        [/}[^}]/, "", "@pop"],
        [/}/, "macroparam"]
      ],

      specialReg: [[/af'|AF'/, "register"]]
    }
  },
  darkTheme: {
    rules: [
      {
        token: "comment",
        foreground: "6a9955"
      },
      {
        token: "keyword",
        foreground: "569cd6",
        fontStyle: "bold"
      },
      {
        token: "statement",
        foreground: "c586c0",
        fontStyle: "bold"
      },
      {
        token: "pragma",
        foreground: "c586c0"
      },
      {
        token: "identifier",
        foreground: "dcdcaa"
      },
      {
        token: "register",
        foreground: "9cdcfe"
      },
      {
        token: "function",
        foreground: "4fc1ff"
      },
      {
        token: "macroparam",
        foreground: "c586c0",
        fontStyle: "italic"
      },
      {
        token: "escape",
        foreground: "d7ba7d"
      }
    ],
    colors: {}
  },
  lightTheme: {
    rules: [
      {
        token: "comment",
        foreground: "6a9955"
      },
      {
        token: "keyword",
        foreground: "569cd6",
        fontStyle: "bold"
      },
      {
        token: "statement",
        foreground: "c586c0",
        fontStyle: "bold"
      },
      {
        token: "pragma",
        foreground: "c586c0"
      },
      {
        token: "identifier",
        foreground: "dcdcaa"
      },
      {
        token: "register",
        foreground: "9cdcfe"
      },
      {
        token: "function",
        foreground: "4fc1ff"
      },
      {
        token: "macroparam",
        foreground: "c586c0",
        fontStyle: "italic"
      },
      {
        token: "escape",
        foreground: "d7ba7d"
      }
    ],
    colors: {}
  }
};
