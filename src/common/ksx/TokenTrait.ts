import { TokenType } from "./TokenType";

/**
 * Describes the special traits of a token
 */ 
type TokenTrait = {
  expressionStart?: boolean;
  isAssignment?: boolean;
  canBeUnary?: boolean;
  keywordLike?: boolean;
};

/**
 * Individual traits of tokens
 */
export const tokenTraits: Record<TokenType, TokenTrait> = {
  [TokenType.Eof]: {},
  [TokenType.Ws]: {},
  [TokenType.BlockComment]: {},
  [TokenType.EolComment]: {},
  [TokenType.Unknown]: {},
  [TokenType.LParent]: { expressionStart: true },
  [TokenType.RParent]: {},
  [TokenType.Identifier]: { expressionStart: true, keywordLike: true },
  [TokenType.Exponent]: {},
  [TokenType.Divide]: {},
  [TokenType.Multiply]: {},
  [TokenType.Remainder]: {},
  [TokenType.Plus]: { expressionStart: true, canBeUnary: true },
  [TokenType.Minus]: { expressionStart: true, canBeUnary: true },
  [TokenType.BitwiseXor]: {},
  [TokenType.BitwiseOr]: {},
  [TokenType.LogicalOr]: {},
  [TokenType.BitwiseAnd]: {},
  [TokenType.LogicalAnd]: {},
  [TokenType.Assignment]: { isAssignment: true },
  [TokenType.AddAssignment]: { isAssignment: true },
  [TokenType.SubtractAssignment]: { isAssignment: true },
  [TokenType.ExponentAssignment]: { isAssignment: true },
  [TokenType.MultiplyAssignment]: { isAssignment: true },
  [TokenType.DivideAssignment]: { isAssignment: true },
  [TokenType.RemainderAssignment]: { isAssignment: true },
  [TokenType.ShiftLeftAssignment]: { isAssignment: true },
  [TokenType.ShiftRightAssignment]: { isAssignment: true },
  [TokenType.SignedShiftRightAssignment]: { isAssignment: true },
  [TokenType.BitwiseAndAssignment]: { isAssignment: true },
  [TokenType.BitwiseXorAssignment]: { isAssignment: true },
  [TokenType.BitwiseOrAssignment]: { isAssignment: true },
  [TokenType.LogicalAndAssignment]: { isAssignment: true },
  [TokenType.LogicalOrAssignment]: { isAssignment: true },
  [TokenType.NullCoalesceAssignment]: { isAssignment: true },
  [TokenType.Semicolon]: {},
  [TokenType.Comma]: {},
  [TokenType.Colon]: {},
  [TokenType.LSquare]: { expressionStart: true },
  [TokenType.RSquare]: {},
  [TokenType.QuestionMark]: {},
  [TokenType.NullCoalesce]: {},
  [TokenType.OptionalChaining]: {},
  [TokenType.BinaryNot]: { expressionStart: true, canBeUnary: true },
  [TokenType.LBrace]: { expressionStart: true },
  [TokenType.RBrace]: {},
  [TokenType.Equal]: {},
  [TokenType.StrictEqual]: {},
  [TokenType.LogicalNot]: { expressionStart: true, canBeUnary: true },
  [TokenType.NotEqual]: {},
  [TokenType.StrictNotEqual]: {},
  [TokenType.LessThan]: {},
  [TokenType.LessThanOrEqual]: {},
  [TokenType.ShiftLeft]: {},
  [TokenType.GreaterThan]: {},
  [TokenType.GreaterThanOrEqual]: {},
  [TokenType.ShiftRight]: {},
  [TokenType.SignedShiftRight]: {},
  [TokenType.Dot]: {},
  [TokenType.Spread]: { expressionStart: true },
  [TokenType.Global]: { expressionStart: true },
  [TokenType.DecimalLiteral]: { expressionStart: true },
  [TokenType.HexadecimalLiteral]: { expressionStart: true },
  [TokenType.BinaryLiteral]: { expressionStart: true },
  [TokenType.RealLiteral]: { expressionStart: true },
  [TokenType.StringLiteral]: { expressionStart: true },
  [TokenType.IncOp]: { expressionStart: true },
  [TokenType.DecOp]: { expressionStart: true },
  [TokenType.Infinity]: { expressionStart: true, keywordLike: true },
  [TokenType.NaN]: { expressionStart: true, keywordLike: true },
  [TokenType.True]: { expressionStart: true, keywordLike: true },
  [TokenType.False]: { expressionStart: true, keywordLike: true },
  [TokenType.Typeof]: { expressionStart: true, canBeUnary: true, keywordLike: true },
  [TokenType.Null]: { expressionStart: true, keywordLike: true },
  [TokenType.Undefined]: { expressionStart: true, keywordLike: true },
  [TokenType.In]: { keywordLike: true },
  [TokenType.Let]: { keywordLike: true },
  [TokenType.Const]: { keywordLike: true },
  [TokenType.If]: { keywordLike: true },
  [TokenType.Else]: { keywordLike: true },
  [TokenType.Arrow]: { keywordLike: true },
  [TokenType.Return]: { keywordLike: true },
  [TokenType.Break]: { keywordLike: true },
  [TokenType.Continue]: { keywordLike: true },
  [TokenType.Do]: { keywordLike: true },
  [TokenType.While]: { keywordLike: true },
  [TokenType.For]: { keywordLike: true },
  [TokenType.Of]: { keywordLike: true },
  [TokenType.Throw]: { keywordLike: true },
  [TokenType.Try]: { keywordLike: true },
  [TokenType.Catch]: { keywordLike: true },
  [TokenType.Finally]: { keywordLike: true },
  [TokenType.Switch]: { keywordLike: true },
  [TokenType.Case]: { keywordLike: true },
  [TokenType.Default]: { keywordLike: true },
  [TokenType.Delete]: { expressionStart: true, canBeUnary: true, keywordLike: true },
  [TokenType.Function]: { keywordLike: true },
  [TokenType.Export]: { keywordLike: true },
  [TokenType.Import]: { keywordLike: true },
  [TokenType.As]: { keywordLike: true },
  [TokenType.From]: { keywordLike: true },
  [TokenType.RegExp]: { expressionStart: true },
};
