// ============================================================================
// Cambridge Z88 interrupt device
// ============================================================================

// ----------------------------------------------------------------------------
// Interrupt constants and variables

const u8 INT_KWAIT = 0x80; // Bit 7, If set, reading the keyboard will Snooze
const u8 INT_A19 = 0x40;   // Bit 6, If set, an active high on A19 will exit Coma
const u8 INT_FLAP = 0x20;  // Bit 5, If set, flap interrupts are enabled
const u8 INT_UART = 0x10;  // Bit 4, If set, UART interrupts are enabled
const u8 INT_BTL = 0x08;   // Bit 3, If set, battery low interrupts are enabled
const u8 INT_KEY = 0x04;   // Bit 2, If set, keyboard interrupts (Snooze or Coma) are enabl.
const u8 INT_TIME = 0x02;  // Bit 1, If set, RTC interrupts are enabled
const u8 INT_GINT = 0x01;  // Bit 0, If clear, no interrupts get out of blink

const u8 STA_FLAPOPEN = 0x80;  // Bit 7, If set, flap open, else flap closed
const u8 STA_A19 = 0x40;       // Bit 6, If set, high level on A19 occurred during coma
const u8 STA_FLAP = 0x20;      // Bit 5, If set, positive edge has occurred on FLAPOPEN
const u8 STA_UART = 0x10;      // Bit 4, If set, an enabled UART interrupt is active
const u8 STA_BTL = 0x08;       // Bit 3, If set, battery low pin is active
const u8 STA_KEY = 0x04;       // Bit 2, If set, a column has gone low in snooze (or coma)
const u8 STA_TIME = 0x01;      // Bit 0, If set, an enabled TSTA interrupt is active
const u8 STA_TIME_MASK = 0xfe; // Bit 0 reset mask

// Main Blink Interrrupts (INT).
global u32 INT;

// Main Blink Interrupt Status (STA)
global u32 STA;

// Signs if interrupt is active
global bool interruptSignalActive;

// Set the value of STA
void setSTA(u32 v) {
  STA = v;
  checkMaskableInterruptRequested();
}

// Tests if the maskable interrupt has been requested
void checkMaskableInterruptRequested() {
  // --- Is the BM_INTGINT flag set?
  if (INT & INT_GINT) {
    if (INT & STA) {
      interruptSignalActive = true;
      return;
    }
  }
  // --- No interrupt
  interruptSignalActive = false;
}

// Sets the value of the TACK register
void setTACK(u32 v) {
  if (v & TSTA_TICK) {
    // --- Reset BM_TSTATICK
    TSTA &= 0xfe;
  }

  if (v & TSTA_SEC) {
    // --- Reset BM_TSTASEC
    TSTA &= 0xfd;
  }

  if (v & TSTA_MIN) {
    // --- Reset BM_TSTAMIN
    TSTA &= 0xfb;
  }

  if (!TSTA) {
    setSTA(STA & 0xfe);
  }
}

// Set the value of the ACK register
void setACK(u32 v) {
  setSTA(STA & ((v & 0xff) ^ 0xff));
}

// Checks if the interrupt signal should be set
i32 shouldRaiseInterrupt(u32 tact) {
  return interruptSignalActive;
}
