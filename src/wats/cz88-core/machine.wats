// ============================================================================
// Cambridge Z88 machine-specific routines
// ============================================================================

// ----------------------------------------------------------------------------
// Virtual machine memory map:

// Block 0: 0x00'0000 - 0x00'1fff (ROM 0, lower 8K)
// Block 1: 0x00'2000 - 0x00'3fff (ROM 0, upper 8K)
// Block 2: 0x00'4000 - 0x00'5fff (RAM 0x4000-5fff, contended)
// Block 3: 0x00'6000 - 0x00'7fff (RAM 0x6000-7fff, contended)
// Block 4: 0x00'8000 - 0x00'9fff (RAM 0x8000-9fff)
// Block 5: 0x00'a000 - 0x00'bfff (RAM 0xa000-bfff)
// Block 6: 0x00'c000 - 0x00'dfff (RAM 0xc000-dfff)
// Block 7: 0x00'e000 - 0x00'ffff (RAM 0xe000-ffff)

// Unused: 0x01'0000 - 0xff'ffff

type z88MachineState = struct {
  // --- Blink device state
  u8 COM,
  u8 EPR,

  // --- Machine modes
  bool shiftsReleased,
  bool isInSleepMode,

  // --- Interrupt
  u8 INT,
  u8 STA,
  bool interruptSignalActive,

  // --- Memory
  u8[4] segmentRegs,
  u8[6] chipMasks,

  // --- RTC
  u8 TIM0,
  u8 TIM1,
  u8 TIM2,
  u8 TIM3,
  u8 TIM4,
  u8 TSTA,
  u8 TMK,

  // --- Screen
  u16 PB0,
  u16 PB1,
  u16 PB2,
  u16 PB3,
  u16 SBR,
  u8 SCW,
  u8 SCH,
  u32 screenFrameCount,
  bool flashPhase,
  bool textFlashPhase,
  bool lcdWentOff,
  u16 screenWidth,
  u16 screenLines,

  // --- Audio device state
  u32 audioSampleRate,
  u32 audioSampleLength,
  u32 audioLowerGate,
  u32 audioUpperGate,
  u32 audioGateValue,
  u32 audioNextSampleTact,
  u32 audioSampleCount,
  bool beeperLastEarBit,

  // --- Keyboard
  u8[8] keyboardLines
};

// Transfer buffer for machine state
z88MachineState z88MachineStateBuffer { VM_STATE_PLACEHOLDER };

// ----------------------------------------------------------------------------
// Public routines

// Sets up the ZX Spectrum machine
export void setupMachine () {
  // --- CPU
  baseClockFrequency = 3'276'800;
  clockMultiplier = defaultClockMultiplier;

  // --- Screen
  screenLines = 64;
  screenWidth = 640;
  tactsInFrame = 16384;

  // --- Blink setup
  resetBlink();
  resetKeyboard();

  // --- Reset beeper state
  audioGateValue = 0;
  audioNextSampleTact = 0;
  audioSampleCount = 0;
  beeperLastEarBit = 0;

  // --- Reset debugging state
  stepOutStackDepth = 0;
}

// Copies the virtual machine state to the memory buffer
export void getMachineState() {
  // --- Blink device state
  z88MachineStateBuffer.COM = COM;
  z88MachineStateBuffer.EPR = EPR;

  // --- Machine modes
  z88MachineStateBuffer.shiftsReleased = shiftsReleased;
  z88MachineStateBuffer.isInSleepMode = isInSleepMode;

  // --- Interrupt
  z88MachineStateBuffer.INT = INT;
  z88MachineStateBuffer.STA = STA;
  z88MachineStateBuffer.interruptSignalActive = interruptSignalActive;

  // --- Memory
  z88MachineStateBuffer.segmentRegs[0] = segmentRegs[0];
  z88MachineStateBuffer.segmentRegs[1] = segmentRegs[1];
  z88MachineStateBuffer.segmentRegs[2] = segmentRegs[2];
  z88MachineStateBuffer.segmentRegs[3] = segmentRegs[3];
  z88MachineStateBuffer.chipMasks[0] = chipMasks[0];
  z88MachineStateBuffer.chipMasks[1] = chipMasks[1];
  z88MachineStateBuffer.chipMasks[2] = chipMasks[2];
  z88MachineStateBuffer.chipMasks[3] = chipMasks[3];
  z88MachineStateBuffer.chipMasks[4] = chipMasks[4];

  // --- RTC
  z88MachineStateBuffer.TIM0 = TIM0;
  z88MachineStateBuffer.TIM1 = TIM1;
  z88MachineStateBuffer.TIM2 = TIM2;
  z88MachineStateBuffer.TIM3 = TIM3;
  z88MachineStateBuffer.TIM4 = TIM4;
  z88MachineStateBuffer.TSTA = TSTA;
  z88MachineStateBuffer.TMK = TMK;

  // --- Screen
  z88MachineStateBuffer.PB0 = PB0;
  z88MachineStateBuffer.PB1 = PB1;
  z88MachineStateBuffer.PB2 = PB2;
  z88MachineStateBuffer.PB3 = PB3;
  z88MachineStateBuffer.SBR = SBR;
  z88MachineStateBuffer.SCW = SCW;
  z88MachineStateBuffer.SCH = SCH;
  z88MachineStateBuffer.screenFrameCount = screenFrameCount;
  z88MachineStateBuffer.flashPhase = flashPhase;
  z88MachineStateBuffer.textFlashPhase = textFlashPhase;
  z88MachineStateBuffer.lcdWentOff = lcdWentOff;
  z88MachineStateBuffer.screenWidth = screenWidth;
  z88MachineStateBuffer.screenLines = screenLines;

  // --- Audio
  z88MachineStateBuffer.audioSampleRate = audioSampleRate;
  z88MachineStateBuffer.audioSampleLength = audioSampleLength;
  z88MachineStateBuffer.audioLowerGate = audioLowerGate;
  z88MachineStateBuffer.audioUpperGate = audioUpperGate;
  z88MachineStateBuffer.audioGateValue = audioGateValue;
  z88MachineStateBuffer.audioNextSampleTact = audioNextSampleTact;
  z88MachineStateBuffer.audioSampleCount = audioSampleCount;
  z88MachineStateBuffer.beeperLastEarBit = beeperLastEarBit;

  // --- Keyboard
  z88MachineStateBuffer.keyboardLines[0] = keyboardLines[0];
  z88MachineStateBuffer.keyboardLines[1] = keyboardLines[1];
  z88MachineStateBuffer.keyboardLines[2] = keyboardLines[2];
  z88MachineStateBuffer.keyboardLines[3] = keyboardLines[3];
  z88MachineStateBuffer.keyboardLines[4] = keyboardLines[4];
  z88MachineStateBuffer.keyboardLines[5] = keyboardLines[5];
  z88MachineStateBuffer.keyboardLines[6] = keyboardLines[6];
  z88MachineStateBuffer.keyboardLines[7] = keyboardLines[7];
}

// ----------------------------------------------------------------------------
// I/O port handling

// Reads a byte from the specified I/O port
u8 readPort(u16 port) {
  local u8 addr8 = port;

  if (addr8 == 0xb0) {
    // --- Machine Identification (MID)
    // --- $01: F88
    // --- $80: ZVM
    // --- $FF: Z88 (Blink on Cambridge Z88 does not implement read operation, and returns $FF)
    return 0x80;
  }

  // --- Read STA
  if (addr8 == 0xb1) {
    return STA;
  }

  // --- Read keyboard status
  if (addr8 == 0xb2) {
    if (INT & INT_KWAIT) {
      if (!isKeypressed) {
        snoozeCpu();
        return 0xff;
      }
    }
    return getKeyLineStatus(port >> 8);
  }

  // --- Read TSTA
  if (addr8 == 0xb5) {
    return TSTA;
  }

  // --- Read TIM0
  if (addr8 == 0xd0) {
    return TIM0;
  }

  // --- Read TIM1
  if (addr8 == 0xd1) {
    return TIM1;
  }

  // --- Read TIM2
  if (addr8 == 0xd2) {
    return TIM2;
  }

  // --- Read TIM3
  if (addr8 == 0xd3) {
    return TIM3;
  }

  // --- Read TIM4
  if (addr8 == 0xd4) {
    return TIM4;
  }

  // --- Read SCW
  if (addr8 == 0x70) {
    return SCW;
  }

  // --- Read SCH
  if (addr8 == 0x71) {
    return SCH;
  }

  // --- Read RxD (not implemented yet)
  if (addr8 == 0xe0) {
    return 0x00;
  }

  // --- Read RxE (not implemented yet)
  if (addr8 == 0xe1) {
    return 0x00;
  }

  // --- Read UIT, UART Int status, always ready to receive... (not implemented yet)
  if (addr8 == 0xe5) {
    return 0x10;
  }

  // --- Return the default port value
  return 0xff;
}

// Writes a byte to the specified I/O port
void writePort(u16 port, u8 value) {
  local u8 addr8 = port;

  // --- No ports below address 0x70 are handled
  if (addr8 < 0x70) {
    return;
  }

  // --- Check for screen ports (0x70..0x74)
  if (addr8 <= 0x74) {
    // --- This is a screen port, calculate the register value
    local u16 screenRegVal = (port & 0xff00) | value;

    // --- Dispatch according to port
    if (addr8 == 0x70) {
      PB0 = screenRegVal;
      return;
    }
    if (addr8 == 0x71) {
      PB1 = screenRegVal;
      return;
    }
    if (addr8 == 0x72) {
      PB2 = screenRegVal;
      return;
    }
    if (addr8 == 0x73) {
      PB3 = screenRegVal;
      return;
    }
    SBR = screenRegVal;
    return;
  }

  if (addr8 == 0xd0) {
    setSR0(value);
  }

  if (addr8 == 0xd1) {
    setSR1(value);
  }

  if (addr8 == 0xd2) {
    setSR2(value);
  }

  if (addr8 == 0xd3) {
    setSR3(value);
  }

  if (addr8 == 0xb0) {
    setCOM(value);
  }

  if (addr8 == 0xb1) {
    setINT(value);
  }

  if (addr8 == 0xb3) {
    EPR = value;
  }

  if (addr8 == 0xb4) {
    setTACK(value);
  }

  if (addr8 == 0xb5) {
    TMK = value;
  }

  if (addr8 == 0xb6) {
    setACK(value);
  }
  
  // 0xe2: RXC, UART Receiver Control (not yet implemented)
  // 0xe3: TXD, UART Transmit Data (not yet implemented)
  // 0xe4: TXC, UART Transmit Control (not yet implemented)
  // 0xe5: UMK, UART Int. mask (not yet implemented)
  // 0xe6 UAK, UART acknowledge int. mask (not yet implemented)
}

// ----------------------------------------------------------------------------
// Functions used for testing

export void writePortCz88(u16 port, u8 value) {
  writePort(port, value);
}

export u8 testReadCz88Memory(u16 addr) {
  return readMemory(addr);
}

export void testWriteCz88Memory(u16 addr, u8 v) {
  writeMemory(addr,v);
}
