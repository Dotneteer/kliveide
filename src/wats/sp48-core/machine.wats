// ============================================================================
// ZX Spectrum 48K machine-specific routines
// ============================================================================

// ----------------------------------------------------------------------------
// Virtual machine memory map:

// Block 0: 0x00'0000 - 0x00'1fff (ROM 0, lower 8K)
// Block 1: 0x00'2000 - 0x00'3fff (ROM 0, upper 8K)
// Block 2: 0x00'4000 - 0x00'5fff (RAM 0x4000-5fff, contended)
// Block 3: 0x00'6000 - 0x00'7fff (RAM 0x6000-7fff, contended)
// Block 4: 0x00'8000 - 0x00'9fff (RAM 0x8000-9fff)
// Block 5: 0x00'a000 - 0x00'bfff (RAM 0xa000-bfff)
// Block 6: 0x00'c000 - 0x00'dfff (RAM 0xc000-dfff)
// Block 7: 0x00'e000 - 0x00'ffff (RAM 0xe000-ffff)

// Unused: 0x01'0000 - 0xff'ffff

// ----------------------------------------------------------------------------
// Public routines

// Sets up the ZX Spectrum machine
export void setupMachine () {
  // --- Let's use ULA issue 3 by default
  ulaIssue = 3;

  // --- CPU configuration
  baseClockFrequency = 3'500'000;
  clockMultiplier = defaultClockMultiplier;
  resetCpu(true);
  
  // --- Memory configuration
  numberOfRoms = 1;
  ramBanks = 0;
  memoryScreenOffset = 0x4000;

  // --- Set up block lookup table
  setMemoryBlockEntry(0, 0x0000, false, true);
  setMemoryBlockEntry(1, 0x2000, false, true);
  setMemoryBlockEntry(2, 0x4000, true, false);
  setMemoryBlockEntry(3, 0x6000, true, false);
  setMemoryBlockEntry(4, 0x8000, false, false);
  setMemoryBlockEntry(5, 0xa000, false, false);
  setMemoryBlockEntry(6, 0xc000, false, false);
  setMemoryBlockEntry(7, 0xe000, false, false);

  // --- Rom configuration
  memorySelectedRom = 0;
  spectrumRomIndex = 0;

  // --- Set the initial state of a ZX Spectrum machine
  resetMachine();

  // --- Screen frame configuration
  setInterruptTact(0);
  verticalSyncLines = 8;
  nonVisibleBorderTopLines = 8;
  borderTopLines = 48;
  borderBottomLines = 48;
  nonVisibleBorderBottomLines = 8;
  displayLines = 192;
  borderLeftTime = 24;
  borderRightTime = 24;
  displayLineTime = 128;
  horizontalBlankingTime = 40;
  nonVisibleBorderRightTime = 8;
  pixelDataPrefetchTime = 2;
  attributeDataPrefetchTime = 1;

  calcScreenAttributes();
  initRenderingTactTable();

  // --- Tape device data
  tapeLoadBytesRoutine = 0x056c;
  tapeLoadBytesInvalidHeader = 0x056b;
  tapeLoadBytesResume = 0x05e2;
  tapeSaveBytesRoutine = 0x04c2;
}

// ----------------------------------------------------------------------------
// I/O port handling

// Reads a byte from the specified I/O port
u8 readPort(u16 port) {
  // --- Handle the contention delay
  applyIOContentionDelay(port);

  // --- Handle the 0xfe port
  if (!(port & 0x0001)) {
    local u8 value = readPortFE(port);
    tacts += 4;
    return value;
  }

  // --- Handle the Kempston port
  if (!(port & 0x00e0)) {
    tacts += 4;
    // TODO: Implement Kempston port handling
    return 0xff;
  }
  
  // --- Floating port handling
  // --- Get the rendering table entry of the current ULA tact
  emulateFloatingPort();
  local *renderingTactEntry tactItem = &(renderingTactTable[tacts/clockMultiplier]);
  local u8 phase = (*tactItem).phase;

  if (phase == 2) {
    return vmMemory[memoryScreenOffset + (*tactItem).pixelAddress];
  } else if (phase == 3) {
    return vmMemory[memoryScreenOffset + (*tactItem).attrAddress];
  } else if (phase == 5) {
    return vmMemory[memoryScreenOffset + (*tactItem).pixelAddress];
  } else if (phase == 6) {
    return vmMemory[memoryScreenOffset + (*tactItem).attrAddress];
  } else if (phase == 8) {
    return vmMemory[memoryScreenOffset + (*tactItem).pixelAddress];
  } else if (phase == 9) {
    return vmMemory[memoryScreenOffset + (*tactItem).attrAddress];
  }

  // --- Return the default port value
  tacts += 4;
  return 0xff;
}

// Writes a byte to the specified I/O port
void writePort(u16 port, u8 value) {
  applyIOContentionDelay(port);
  if (!(port & 0x0001)) {
    writePortFE(port, value);
  }
}

// We need to render the latest chunk of pixels to emulate
// the floating port
void emulateFloatingPort() {
  renderScreen(tacts / clockMultiplier);
}
