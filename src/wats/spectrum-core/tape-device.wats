// ============================================================================
// Tape device for ZX Spectrum 48/128
// ============================================================================

// ----------------------------------------------------------------------------
// Tape constants

// Pilot pulse length
const u64 PILOT_PULSE = 2168;

// Pilot pulses in the header bloсk
const u64 HEADER_PILOT_COUNT = 8063;

// Pilot pulses in the data block
const u64 DATA_PILOT_COUNT = 3223;

// Sync 1 pulse length
const u64 SYNC_1_PULSE = 667;

// Sync 2 pulse length
const u64 SYNC_2_PULSE = 735;

// Bit 0 pulse length
const u64 BIT_0_PULSE = 855;

// Bit 1 pulse length
const u64 BIT_1_PULSE = 1710;

// Terminating sync pulse length
const u64 TERM_SYNC = 947;

// Too long pause while saving
const u64 TOO_LONG_PAUSE = 10'500'000;

// Tape modes
const u32 TM_PASSIVE = 0;
const u32 TM_LOAD = 1;
const u32 TM_SAVE = 2;

// The playing phase of the current block
const u32 PP_NONE = 0;
const u32 PP_PILOT = 1;
const u32 PP_SYNC = 2;
const u32 PP_DATA = 3;
const u32 PP_TERM = 4;
const u32 PP_PAUSE = 5;
const u32 PP_COMPLETED = 6;

// The current SAVE phase
const u32 SP_NONE = 0;
const u32 SP_PILOT = 1;
const u32 SP_SYNC1 = 2;
const u32 SP_SYNC2 = 3;
const u32 SP_DATA = 4;
const u32 SP_ERROR = 5;

// Pulses
const u32 PL_NONE = 0;
const u32 PL_TOO_SHORT = 1;
const u32 PL_TOO_LONG = 2;
const u32 PL_PILOT = 3;
const u32 PL_SYNC_1 = 4;
const u32 PL_SYNC_2 = 5;
const u32 PL_BIT_0 = 6;
const u32 PL_BIT_1 = 7;
const u32 PL_TERM = 8;

// ----------------------------------------------------------------------------
// Tape device state

global u32 tapeMode;

// The address of the Load Bytes routine in the ZX Spectrum 48 ROM
global u16 tapeLoadBytesRoutine;

// The address of the Load Bytes Resume routine in the ZX Spectrum 48 ROM
global u16 tapeLoadBytesResume;

// The address of the Load Bytes Invalid Header routine in the ZX Spectrum 48 ROM
global u16 tapeLoadBytesInvalidHeader;

// The address of the Save Bytes routine in the ZX Spectrum 48 ROM
global u16 tapeSaveBytesRoutine;

// The number of tape blocks to play
global u16 tapeBlocksToPlay;

// Is the entire tape played back?
global bool tapeEof;

// The current byte in the tape data buffer
*u8 tapeBufferPtr;

// The address of the next block to play
*u8 tapeNextBlockPtr;

// The type of tape block being read
global u8 blockType;

// The length of optional block information
global u8 blockInfoLength;

// The playing phase of the current block
global u32 tapePlayPhase;

// The start tact of the current block
global u64 tapeStartTact;

// End tact of the current pilot
global u64 tapePilotEndPos;

// End tact of the current sync 1 pulse
global u64 tapeSync1EndPos;

// End tact of the current sync 2 pulse
global u64 tapeSync2EndPos;

// Start tact of the current bit
global u64 tapeBitStartPos;

// Start tact of the current bit
global u64 tapeBitPulseLen;

// Current tape bit mask
global u32 tapeBitMask;

// Fast load?
global bool tapeFastLoad;

// Tape termination position
global u64 tapeTermEndPos;

// Tape pause position
global u64 tapePauseEndPos;

// Last MIC bit activity tact
global u64 tapeLastMicBitTact;

// Last MIC bit state
global u32 tapeLastMicBit;

// The current SAVE phase
global u32 tapeSavePhase;

// Number of pilot pulses
global u32 tapePilotPulseCount;

// Number of saved data blocks
global u32 tapeDataBlockCount;

// Previous data pulse received
global u32 tapePrevDataPulse;

// Lenght of the data saved so far
global u32 tapeSaveDataLen;

// Offset of the bit being saved
global u32 tapeBitOffs;

// Data byte being saved
global u32 tapeDataByte;

// --------------------------------------------------------------------------
// Tap device memory variables

// Buffer for LOAD data
u8[0x4'0000] tapeDataBuffer;

// Buffer for SAVE data
u8[0x1'0000] tapeSaveBuffer;

// ==========================================================================
// Tape device routines

// Sets the value of the fast load flag
export void setFastLoad(u32 mode) {
  tapeFastLoad = mode;
}

// Initializes the tape device
export void initTape (u32 blocks) {
  tapeBlocksToPlay = blocks;

  // --- Rewind to the first data block to play
  tapeBufferPtr = &tapeDataBuffer;
  tapeEof = false;
}

// Checks if tape device hook should be applied
void checkTapeHooks() {
  if (tapeMode == TM_PASSIVE) {
    // --- PASSIVE mode, check for load and save routines
    if (pc == tapeLoadBytesRoutine) {
      if (memorySelectedRom == spectrumRomIndex) {
        // --- Turn on LOAD mode
        tapeMode = TM_LOAD;
        nextTapeBlock();
        if (tapeFastLoad) {
          fastLoad();
          tapeMode = TM_PASSIVE;
        }
        return;
      }
    }

    if (pc == tapeSaveBytesRoutine) {
      // --- Turn on SAVE mode
      tapeMode = TM_SAVE;
      tapeLastMicBitTact = getCurrentTactAsI64();
      tapeLastMicBit = 0x07;
      tapeSavePhase = SP_NONE;
      tapePilotPulseCount = 0;
      tapeDataBlockCount = 0;
      tapePrevDataPulse = 0;
      tapeSaveDataLen = 0;
    }
    return;
  }

  if (tapeMode == TM_LOAD) {
    // --- Tape EOF?
    if (tapeEof) {
      tapeMode = TM_PASSIVE;
      return;
    }
  }

  // --- Tape Error?
  if (pc == 0x0008 | (getCurrentTactAsI64() - tapeLastMicBitTact) > TOO_LONG_PAUSE) {
    tapeMode = TM_PASSIVE;
  }
}

// Move to the next block to play
void nextTapeBlock() {
  // --- Stop playing if no more blocks
  if (tapeEof) {
    return;
  }

  // --- Is there any blocks left?
  if (!tapeBlocksToPlay) {
    // No, stop playing
    tapeEof = true;
    return;
  }

  // --- Current block completed?
  if (tapePlayPhase == PP_COMPLETED) {
    return;
  }

  // --- OK, move to the next block, get the length of the next block
  local *u16 lengthPtr = tapeBufferPtr;
  tapeBufferPtr += 2;
  blockType = *tapeBufferPtr;
  tapeBufferPtr += 1;
  blockInfoLength = *tapeBufferPtr;
  tapeBufferPtr += blockInfoLength + 1;
  tapeNextBlockPtr = tapeBufferPtr + (*lengthPtr);

  // --- Decrement the number of remaining blocks
  tapeBlocksToPlay -= 1;

  // --- Reset playing the current block
  tapePlayPhase = PP_PILOT;
  tapeStartTact = getCurrentTactAsI64();
  tapePilotEndPos = PILOT_PULSE * (((*tapeBufferPtr) & 0x80)
    ? DATA_PILOT_COUNT
    : HEADER_PILOT_COUNT);
  tapeSync1EndPos = tapePilotEndPos + SYNC_1_PULSE;
  tapeSync2EndPos = tapeSync1EndPos + SYNC_2_PULSE;
  tapeBitMask = 0x80;
}

// Gets the current ear bit for the tape
bool getTapeEarBit() {
  // --- Calculate the current position
  local u64 pos = getCurrentTactAsI64() - tapeStartTact;

  // --- PILOT or SYNC phase?
  if (tapePlayPhase <= PP_SYNC) {
    // --- Generate appropriate pilot or sync EAR bit
    if (pos <= tapePilotEndPos) {
      // --- Alternating pilot pulses
      return !((pos/PILOT_PULSE) % 2);
    }

    // --- Test SYNC_1 position
    if (pos <= tapeSync1EndPos) {
      // --- Turn to SYNC phase
      tapePlayPhase = PP_SYNC;
      return false; // => Low EAR bit
    }

    // --- Test SYNC_2 position
    if (pos <= tapeSync2EndPos) {
      tapePlayPhase = PP_SYNC;
      return true; // => High EAR bit
    }

    // --- Now, we're ready to change to Data phase
    tapePlayPhase = PP_DATA;
    tapeBitStartPos = tapeSync2EndPos;

    // --- Select the bit pulse length of the first bit of the data byte
    tapeBitPulseLen = (*tapeBufferPtr) & tapeBitMask
      ? BIT_1_PULSE
      : BIT_0_PULSE;
  }

  // --- Data phase?
  if (tapePlayPhase == PP_DATA) {
    // --- Generate current bit pulse
    local u64 bitPos = pos - tapeBitStartPos;
    // --- First pulse?
    if (bitPos < tapeBitPulseLen) {
      return false; // => Low EAR bit
    }
    if (bitPos < tapeBitPulseLen * 2) {
      return true; // => High EAR bit
    }

    // --- Move to the next bit
    tapeBitMask >>= 1;
    if (!tapeBitMask) {
      // --- Move to the next byte
      tapeBitMask = 0x80;
      tapeBufferPtr += 1;
    }


    // --- Do we have more bits to play?
    if (tapeBufferPtr < tapeNextBlockPtr) {
      // --- Prepare to the next bit
      tapeBitStartPos += 2 * tapeBitPulseLen;

      // --- Select the bit pulse length of the next bit
      tapeBitPulseLen = (*tapeBufferPtr) & tapeBitMask
        ? BIT_1_PULSE
        : BIT_0_PULSE;

      // --- We're in the first pulse of the next bit
      return false; // => Low EAR bit
    }

    // --- We've played all data bytes, let's send the terminating pulse
    tapePlayPhase = PP_TERM;

    // --- Prepare to the terminating sync
    tapeTermEndPos = tapeBitStartPos + 2 * tapeBitPulseLen + TERM_SYNC;
    return false;
  }

  // --- Termination sync?
  if (tapePlayPhase == PP_TERM) {
    if (pos < tapeTermEndPos) {
      return false; // => Low EAR bit
    }

    // --- We terminated the data, it's pause time 
    tapePlayPhase = PP_PAUSE;
    tapePauseEndPos = tapeTermEndPos + baseClockFrequency * clockMultiplier;
    return true; // => High EAR bit
  }

  // --- Completion? Move to the next block
  if (pos > tapePauseEndPos) {
    nextTapeBlock();
  }

  // --- Return with a high bit
  return true;
}

// Fast load of the tape contents
void fastLoad() {
  local bool isVerify;

  // --- Stop playing if no more blocks
  if (tapeEof) {
    return;
  }

  // -- Move AF' to AF
  af = af_;

  // -- Check if it is a VERIFY
  isVerify = (af & 0xff01) == 0xff00;

  // --- At this point IX contains the address to load the data, 
  // --- DE shows the #of bytes to load. A contains 0x00 for header, 
  // --- 0xFF for data block
  if (*tapeBufferPtr != a) {
    // --- This block has a different type we're expecting
    a = a ^ l;
    // --- Reset Z and C
    f &= 0xbe;
    pc = tapeLoadBytesInvalidHeader;
    nextTapeBlock();
    return;
  }
  

  // --- It is time to load the block
  h = a;

  // --- Skip the header byte
  tapeBufferPtr += 1;
  while (de > 0) {
    l = *tapeBufferPtr;
    if (isVerify) {
      // -- VERIFY operation
      if (readMemoryNoContention(ix) != l) {
        // --- We read a different byte, it's an error
        // --- Reset Z and C
        f &= 0xbe;
        pc = tapeLoadBytesInvalidHeader;
        return;
      }
    }
  
    // --- Store the loaded byte
    writeMemoryNoContention(ix, l);

    // --- Calculate the checksum
    h ^= l;
      
    // --- Increment the data pointers
    tapeBufferPtr += 1;
    ix += 1;

    // --- Decrement byte count
    de -= 1;
  }

  // --- Check the end of the data stream
  if (tapeBufferPtr > tapeNextBlockPtr) {
    // --- Read over the expected length
    // --- Reset Carry to sign error
    f &= 0xfe;
  } else {
    // --- Verify checksum
    if (*tapeBufferPtr != h) {
      // --- Wrong checksum
      // --- Reset Carry to sign error
      f &= 0xfe;
    } else {
      // --- Block read successfully, set Carry
      f |= FLAG_C;
    }
  }
  pc = tapeLoadBytesResume;

  // --- Sign completion of this block
  tapePlayPhase = PP_PAUSE;

  // --- Imitate, we're over the pause period
  tapePauseEndPos = 0;

  // --- OK, move to the next block, get the length of the next block
  tapeBufferPtr = tapeNextBlockPtr;
}

// Calculates an u64 value from the current tact
inline u64 getCurrentTactAsI64() {
  return u64(frameCount) * tactsInFrame * clockMultiplier + tacts;
}

// This function processes the MIC bit (tape device)
void processMicBit(u32 micBit) {
  local u32 nextPhase;

  // --- Ignore processing when not in SAVE mode
  if (tapeMode != TM_SAVE) {
    return;
  }

  // --- Any change in MIC bit?
  if (tapeLastMicBit == micBit) {
    return;
  }

  // --- MIC bit changed, process it
  local u64 bitTact = getCurrentTactAsI64();
  local u64 length = bitTact - tapeLastMicBitTact;

  // --- Initialize pulse
  local u32 pulse = PL_NONE;

  // --- Categorize the pulse by its lenght
  if (pulseLengthInRange(length, BIT_0_PULSE)) {
    pulse = PL_BIT_0;
  } else if (pulseLengthInRange(length, BIT_1_PULSE)) {
    pulse = PL_BIT_1;
  } else if (pulseLengthInRange(length, PILOT_PULSE)) {
    pulse = PL_PILOT;
  } else if (pulseLengthInRange(length, SYNC_1_PULSE)) {
    pulse = PL_SYNC_1;
  } else if (pulseLengthInRange(length, SYNC_2_PULSE)) {
    pulse = PL_SYNC_2;
  } else if (pulseLengthInRange(length, TERM_SYNC)) {
    pulse = PL_TERM;
  } else if (length < SYNC_1_PULSE + 24) {
    pulse = PL_TOO_SHORT;
  } else if (length > PILOT_PULSE + 48) {
    pulse = PL_TOO_LONG;
  }

  // --- Now, we have a categorized pulse
  tapeLastMicBit = micBit;
  tapeLastMicBitTact = bitTact;

  // --- Let's process the pulse according to the current SAVE phase and pulse width
  nextPhase = SP_ERROR;
  if (!tapeSavePhase) {
    // ------------------------------------------------------------------------
    // Process the NONE phase
    if (pulse <= 2) {
      // --- Pulse too short or too long, we stay in NONE phase
      nextPhase = SP_NONE;
    } else if (pulse == 3) {
      // --- The first pilot pulse arrived
      tapePilotPulseCount = 1;
      nextPhase = SP_PILOT;
    }
  } else if (tapeSavePhase == SP_PILOT) {
    // -------------------------------------------------------------------------
    // Process the PILOT phase
    if (pulse == PL_PILOT) {
      // --- The next PILOT PULSE arrived
      tapePilotPulseCount += 1;
      nextPhase = SP_PILOT;
    } else if (pulse == PL_SYNC_1) {
      nextPhase = SP_SYNC1;
    }
  } else if (tapeSavePhase == SP_SYNC1) {
    // -------------------------------------------------------------------------
    // Process the SYNC1 phase
    if (pulse == PL_SYNC_2) {
      nextPhase = SP_SYNC2;
    }
  } else if (tapeSavePhase == SP_SYNC2) {
    // -------------------------------------------------------------------------
    // Process the SYNC2 phase
    if ((pulse == PL_BIT_0) | (pulse == PL_BIT_1)) {
      // --- Next pulse starts data, prepare for it
      tapePrevDataPulse = pulse;
      nextPhase = SP_DATA;
      tapeBitOffs = 0;
      tapeDataByte = 0;
    }
  } else if ((pulse == PL_BIT_0) | (pulse == PL_BIT_1)) {
    if (!tapePrevDataPulse) {
      // --- We are waiting for the second half of the bit pulse
      tapePrevDataPulse = pulse;
      nextPhase = SP_DATA;
    } else if (tapePrevDataPulse == pulse) {
      // --- We received a full valid bit pulse
      tapePrevDataPulse = 0;
      nextPhase = SP_DATA;

      // --- Add this bit to the received data
      tapeBitOffs += 1;

      // --- Shift in the received bit
      tapeDataByte = (tapeDataByte << 1) | (pulse == 7);

      // --- Have we received a full byte?
      if (tapeBitOffs == 8) {
        // --- Save the received data
        tapeSaveBuffer[tapeSaveDataLen] = tapeDataByte;
        tapeSaveDataLen += 1;
      
        // --- Reset byte state
        tapeDataByte = 0;
        tapeBitOffs = 0;
      }
    }
  } else if (pulse == PL_TERM) {
    nextPhase = SP_NONE;
    tapeDataBlockCount += 1;
  }

  // --- Store the next phase
  tapeSavePhase = nextPhase;
}

// Tests if the pulse length is in the tolerance range of the specified reference
bool pulseLengthInRange(u64 length, u64 reference) {
  if (length >= reference - 24) {
    return length <= reference + 24;
  }
  // --- Out of expected range
  return false;
}
