// ============================================================================
// Memory device for ZX Spectrum 48/128
// ============================================================================

// The selected ROM page
global u8 memorySelectedRom;

// Is memory pagin enabled?
global bool memoryPagingEnabled;

// The selected memory bank
global u8 memorySelectedBank;

// Shadow screen is to be used?
global bool memoryUseShadowScreen;

// The WA memory offset where the screen memory starts
global u32 memoryScreenOffset;

// Number of ROMs
global u8 numberOfRoms;

// Number of RAM banks
global u8 ramBanks;

// ----------------------------------------------------------------------------
// Public device routines

// Memory read contention delay
inline void contendRead(u16 addr) {
  if (blockLookupTable[addr >> 13].contended) {
    local u32 delay = contentionTable[tacts/clockMultiplier];
    tacts += delay;
    contentionAccumulated += delay;
  }
}

// Memory write contention delay
inline void contendWrite(u16 addr) {
  if (blockLookupTable[addr >> 13].contended) {
    local u32 delay = contentionTable[tacts/clockMultiplier];
    tacts += delay;
    contentionAccumulated += delay;
  }
}

// ----------------------------------------------------------------------------
// Core memory handling routines

// Reads the contents of the memory
inline u8 readMemory(u16 addr) {
  tacts += 3;
  local *blockLookup pagePtr = &(blockLookupTable[addr >> 13]);
  if ((*pagePtr).contended) {
    local u32 delay = contentionTable[tacts/clockMultiplier];
    tacts += delay;
    contentionAccumulated += delay;
  }
  return vmMemory[(*pagePtr).readIndex + (addr & 0b0001_1111_1111_1111)];
}

// Reads the contents of the memory without applying contention
inline u8 readMemoryNoContention(u16 addr) {
  return vmMemory[
    blockLookupTable[addr >> 13].readIndex + 
    (addr & 0b0001_1111_1111_1111)
  ];
}

// Writes the contents of the memory
inline void writeMemory(u16 addr, u8 value) {
  local *blockLookup pagePtr = &(blockLookupTable[addr >> 13]);
  if ((*pagePtr).flags) {
    tacts += 3;
    return;
  }
  vmMemory[(*pagePtr).writeIndex + (addr & 0b0001_1111_1111_1111)] = value;
  if ((*pagePtr).contended) {
    local u32 delay = contentionTable[tacts/clockMultiplier];
    tacts += delay;
    contentionAccumulated += delay;
  }
  tacts += 3;
}

// Writes the contents of the memory without appluing contention
inline void writeMemoryNoContention(u16 addr, u8 value) {
  local *blockLookup pagePtr = &(blockLookupTable[addr >> 13]);
  if ((*pagePtr).flags) {
    return;
  }
  vmMemory[(*pagePtr).writeIndex + (addr & 0b0001_1111_1111_1111)] = value;
}
