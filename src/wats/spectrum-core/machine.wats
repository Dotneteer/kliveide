// ============================================================================
// Implementation of common machine parts of the ZX Spectrum 48K, 128K, 2A,
// and 3+ virtual machines
// ============================================================================

// ----------------------------------------------------------------------------
// Virtual machine state variables

// Describes the state of a ZX Spectrum machine
type spMachineState = struct {
  // --- Port device state
  bool portBit3LastValue,
  bool portBit4LastValue,
  u32 portBit4ChangedFrom0Tacts,
  u32 portBit4ChangedFrom1Tacts,

  // --- Keyboard device state
  u8[8] keyboardLines,

  // --- Interrupt device state
  u16 interruptTact,
  u16 interruptEndTact,

  // --- Memory device state
  u8 numberOfRoms,
  u8 ramBanks,
  u8 memorySelectedRom,
  bool memoryPagingEnabled,
  u8 memorySelectedBank,
  bool memoryUseShadowScreen,
  u16 memoryScreenOffset,

  // --- Screen device state
  u16 verticalSyncLines,
  u16 nonVisibleBorderTopLines,
  u16 borderTopLines,
  u16 displayLines,
  u16 borderBottomLines,
  u16 nonVisibleBorderBottomLines,
  u16 horizontalBlankingTime,
  u16 borderLeftTime,
  u16 displayLineTime,
  u16 borderRightTime,
  u16 nonVisibleBorderRightTime,
  u16 pixelDataPrefetchTime,
  u16 attributeDataPrefetchTime,

  // --- Calculate screen props
  u32 firstDisplayLine,
  u32 lastDisplayLine,
  u32 borderLeftPixels,
  u32 borderRightPixels,
  u32 displayWidth,
  u32 screenLineTime,
  u32 rasterLines,
  u32 firstDisplayPixelTact,
  u32 firstScreenPixelTact,
  u32 screenWidth,
  u32 screenLines,

  // --- Rendering state
  u8 borderColor,
  bool flashPhase,
  u8 pixelByte1,
  u8 pixelByte2,
  u8 attrByte1,
  u8 attrByte2,
  u8 flashFrames,
  *renderingTactEntry renderingTablePtr,
  *u8 pixelBufferPtr,

  // --- Audio device state
  u32 audioSampleRate,
  u32 audioSampleLength,
  u32 audioLowerGate,
  u32 audioUpperGate,
  u32 audioGateValue,
  u32 audioNextSampleTact,
  u32 audioSampleCount,
  u8 beeperLastEarBit,

  // --- Tape device state
  u8 tapeMode,
  u16 tapeBlocksToPlay,
  bool tapeEof,
  *u8 tapeBufferPtr,
  *u8 tapeNextBlockPtr,
  u8 tapePlayPhase,
  u64 tapeStartTact,
  bool tapeFastLoad,
  u8 tapeSavePhase,

  // --- Engine state
  u8 ulaIssue,
  u32 contentionAccumulated,
  u32 lastExecutionContentionValue
};

// Stores contention values for each screen rendering tact
u8[0x1'4000] contentionTable;

u8[8] contentionValues;

// Transfer buffer for machine state
spMachineState spectrumMachineStateBuffer { VM_STATE_PLACEHOLDER };

// Accumulated memory contention value
global u32 contentionAccumulated;

// Contention value accummulated during last execution
global u32 lastExecutionContentionValue;

// ULA issue used by the machine
global u8 ulaIssue = 3;

// ----------------------------------------------------------------------------
// Public methods

// Sets the ZX Spectrum ULA issue value
export void setUlaIssue(u8 ula) {
  ulaIssue = ula == 2 ? 2 : 3;
}

// Gets the current machine state
export void getMachineState() {
  // --- Port state
  spectrumMachineStateBuffer.portBit3LastValue = portBit3LastValue;
  spectrumMachineStateBuffer.portBit4LastValue = portBit4LastValue;
  spectrumMachineStateBuffer.portBit4ChangedFrom0Tacts = portBit4ChangedFrom0Tacts;
  spectrumMachineStateBuffer.portBit4ChangedFrom1Tacts = portBit4ChangedFrom1Tacts;

  // --- Keyboard state
  spectrumMachineStateBuffer.keyboardLines := &keyboardLines;

  // --- Interrupt state
  spectrumMachineStateBuffer.interruptTact = interruptTact;
  spectrumMachineStateBuffer.interruptEndTact = interruptEndTact;

  // --- Memory state
  spectrumMachineStateBuffer.numberOfRoms = numberOfRoms;
  spectrumMachineStateBuffer.ramBanks = ramBanks;
  spectrumMachineStateBuffer.memorySelectedRom = memorySelectedRom;
  spectrumMachineStateBuffer.memoryPagingEnabled = memoryPagingEnabled;
  spectrumMachineStateBuffer.memorySelectedBank = memorySelectedBank;
  spectrumMachineStateBuffer.memoryUseShadowScreen = memoryUseShadowScreen;
  spectrumMachineStateBuffer.memoryScreenOffset = memoryScreenOffset;

  // --- Screen state
  spectrumMachineStateBuffer.verticalSyncLines = verticalSyncLines;
  spectrumMachineStateBuffer.nonVisibleBorderTopLines = nonVisibleBorderTopLines;
  spectrumMachineStateBuffer.borderTopLines = borderTopLines;
  spectrumMachineStateBuffer.displayLines = displayLines;
  spectrumMachineStateBuffer.borderBottomLines = borderBottomLines;
  spectrumMachineStateBuffer.nonVisibleBorderBottomLines = nonVisibleBorderBottomLines;
  spectrumMachineStateBuffer.horizontalBlankingTime = horizontalBlankingTime;
  spectrumMachineStateBuffer.borderLeftTime = borderLeftTime;
  spectrumMachineStateBuffer.displayLineTime = displayLineTime;
  spectrumMachineStateBuffer.borderRightTime = borderRightTime;
  spectrumMachineStateBuffer.nonVisibleBorderRightTime = nonVisibleBorderRightTime;
  spectrumMachineStateBuffer.pixelDataPrefetchTime = pixelDataPrefetchTime;
  spectrumMachineStateBuffer.attributeDataPrefetchTime = attributeDataPrefetchTime;
  spectrumMachineStateBuffer.firstDisplayLine = firstDisplayLine;
  spectrumMachineStateBuffer.lastDisplayLine = lastDisplayLine;
  spectrumMachineStateBuffer.borderLeftPixels = borderLeftPixels;
  spectrumMachineStateBuffer.borderRightPixels = borderRightPixels;
  spectrumMachineStateBuffer.displayWidth = displayWidth;
  spectrumMachineStateBuffer.screenLineTime = screenLineTime;
  spectrumMachineStateBuffer.rasterLines = rasterLines;
  spectrumMachineStateBuffer.firstDisplayPixelTact = firstDisplayPixelTact;
  spectrumMachineStateBuffer.firstScreenPixelTact = firstScreenPixelTact;
  spectrumMachineStateBuffer.screenWidth = screenWidth;
  spectrumMachineStateBuffer.screenLines = screenLines;
  spectrumMachineStateBuffer.borderColor = borderColor;
  spectrumMachineStateBuffer.flashPhase = flashPhase;
  spectrumMachineStateBuffer.pixelByte1 = pixelByte1;
  spectrumMachineStateBuffer.pixelByte2 = pixelByte2;
  spectrumMachineStateBuffer.attrByte1 = attrByte1;
  spectrumMachineStateBuffer.attrByte2 = attrByte2;
  spectrumMachineStateBuffer.flashFrames = flashFrames;
  spectrumMachineStateBuffer.renderingTablePtr = renderingTablePtr;
  spectrumMachineStateBuffer.pixelBufferPtr = pixelBufferPtr;

  // --- Audio state
  spectrumMachineStateBuffer.audioSampleRate = audioSampleRate;
  spectrumMachineStateBuffer.audioSampleLength = audioSampleLength;
  spectrumMachineStateBuffer.audioLowerGate = audioLowerGate;
  spectrumMachineStateBuffer.audioUpperGate = audioUpperGate;
  spectrumMachineStateBuffer.audioGateValue = audioGateValue;
  spectrumMachineStateBuffer.audioNextSampleTact = audioNextSampleTact;
  spectrumMachineStateBuffer.audioSampleCount = audioSampleCount;
  spectrumMachineStateBuffer.beeperLastEarBit = beeperLastEarBit;

  // --- Tape state
  spectrumMachineStateBuffer.tapeMode = tapeMode;
  spectrumMachineStateBuffer.tapeBlocksToPlay = tapeBlocksToPlay;
  spectrumMachineStateBuffer.tapeEof = tapeEof;
  spectrumMachineStateBuffer.tapeBufferPtr = tapeBufferPtr;
  spectrumMachineStateBuffer.tapeNextBlockPtr = tapeNextBlockPtr;
  spectrumMachineStateBuffer.tapePlayPhase = tapePlayPhase;
  spectrumMachineStateBuffer.tapeStartTact = tapeStartTact;
  spectrumMachineStateBuffer.tapeFastLoad = tapeFastLoad;
  spectrumMachineStateBuffer.tapeSavePhase = tapeSavePhase;

  // --- Engine state
  spectrumMachineStateBuffer.ulaIssue = ulaIssue;
  spectrumMachineStateBuffer.contentionAccumulated = contentionAccumulated;
  spectrumMachineStateBuffer.lastExecutionContentionValue = lastExecutionContentionValue;
}

// Resets the ZX Spectrum machine
export void resetMachine() {
  // --- Reset engine state variables
  lastRenderedFrameTact = 0;
  frameCount = 0;
  tacts = 0;
  frameCompleted = true;
  contentionAccumulated = 0;
  lastExecutionContentionValue = 0;
  emulationMode = EMU_CONT;
  debugStepMode = DEB_NONE;
  fastTapeMode = false;
  terminationRom = -1;
  terminationPoint = -1;
  fastVmMode = false;
  disableScreenRendering = false;
  executionCompletionReason = EXCR_EXEC;
  stepOverBreakpoint = 0;

  // --- Reset keyboard line status
  keyboardLines[0] = 0;
  keyboardLines[1] = 0;
  keyboardLines[2] = 0;
  keyboardLines[3] = 0;
  keyboardLines[4] = 0;
  keyboardLines[5] = 0;
  keyboardLines[6] = 0;
  keyboardLines[7] = 0;

  // --- Reset memory state
  memorySelectedRom = 0;
  memoryPagingEnabled = 1;
  memorySelectedBank = 0;
  memoryUseShadowScreen = false;

  // --- Reset port state
  portBit3LastValue = 0;
  portBit4LastValue = 0;
  portBit4ChangedFrom0Tacts = 0;
  portBit4ChangedFrom1Tacts = 0;

  // --- Reset beeper state
  audioGateValue = 0;
  audioNextSampleTact = 0;
  audioSampleCount = 0;
  beeperLastEarBit = 0;

  // --- Reset tape device
  tapeMode = TM_PASSIVE;
  tapeBlocksToPlay = 0;
  tapeEof = false;
  tapeBufferPtr = &tapeDataBuffer;
  tapeFastLoad = false;
  
  // --- Reset debugging state
  stepOutStackDepth = 0;
}

// ----------------------------------------------------------------------------
// Memory contention

// Applies memory contention delay according to the current frame tact
inline void applyContentionDelay() {
  local u32 delay = contentionTable[tacts/clockMultiplier];
  tacts += delay;
  contentionAccumulated += delay;
}
