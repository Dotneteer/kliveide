// ============================================================================
// ZX Spectrum 128K PSG device
// ============================================================================

// ----------------------------------------------------------------------------
// Sound device state

// The number of ULA tacts that represent a single PSG clock tick
const u32 PSG_CLOCK_STEP = 16;

// The index of the last addressed PSG register
global u32 psgRegisterIndex;

// The value of the next ULA tact when a PSG output value should be 
// generated
global u32 psgNextClockTact;

// Number of orphan PSG samples
global u32 psgOrphanSamples;

// Sum of orphan PSG sample values
global u32 psgOrphanSum;

// PSG device status
type psgState = struct {
  // --- Raw register values
  u8[16] regs,

  // --- Channel A
  u16 toneA,
  bool toneAEnabled,
  bool noiseAEnabled,
  u8 volA,
  bool envA,
  u16 cntA,
  bool bitA,

  // --- Channel B
  u16 toneB,
  bool toneBEnabled,
  bool noiseBEnabled,
  u8 volB,
  bool envB,
  u16 cntB,
  bool bitB,

  // --- Channel C
  u16 toneC,
  bool toneCEnabled,
  bool noiseCEnabled,
  u8 volC,
  bool envC,
  u16 cntC,
  bool bitC,

  // --- Noise
  u32 noiseSeed,
  u16 noiseFreq,
  u16 cntNoise,
  bool bitNoise,

  // --- Envelope data
  u16 envFreq,
  u8 envStyle,
  u16 cntEnv,
  u16 posEnv
};

psgState psg;

// This table holds PSG envelope data
u8[0x800] psgEnvelopes;

// --- Table of volume levels
data u16 psgVolumeTable [
  0x0000, 0x0201, 0x033c, 0x04d7, 
  0x0783, 0x0ca6, 0x133e, 0x2393, 
  0x2868, 0x45d4, 0x606a, 0x76ea, 
  0x97bc, 0xb8a6, 0xdc52, 0xffff
];

// Let's store the PSG samples here
u16[0x1000] psgSamplesBuffer;

// ----------------------------------------------------------------------------
// Sound device routines

// --- Initiales a psgState record
void initSound(*psgState psgPtr) {
  local u32 regIdx = 0;
  while (regIdx < 16) {
    (*psgPtr).regs[regIdx] = 0;
    regIdx += 1;
  }

  (*psgPtr).toneA = 0;
  (*psgPtr).toneAEnabled = false;
  (*psgPtr).noiseAEnabled = false;
  (*psgPtr).volA = 0;
  (*psgPtr).envA = false;
  (*psgPtr).cntA = 0;
  (*psgPtr).bitA = false;

  (*psgPtr).toneB = 0;
  (*psgPtr).toneBEnabled = false;
  (*psgPtr).noiseBEnabled = false;
  (*psgPtr).volB = 0;
  (*psgPtr).envB = false;
  (*psgPtr).cntB = 0;
  (*psgPtr).bitB = false;

  (*psgPtr).toneC = 0;
  (*psgPtr).toneCEnabled = false;
  (*psgPtr).noiseCEnabled = false;
  (*psgPtr).volC = 0;
  (*psgPtr).envC = false;
  (*psgPtr).cntC = 0;
  (*psgPtr).bitC = false;

  (*psgPtr).noiseSeed = 0;
  (*psgPtr).noiseFreq = 0;
  (*psgPtr).cntNoise = 0;
  (*psgPtr).bitNoise = false;

  (*psgPtr).envFreq = 0;
  (*psgPtr).envStyle = 0;
  (*psgPtr).cntEnv = 0;
  (*psgPtr).posEnv = 0;

  psgNextClockTact = PSG_CLOCK_STEP;
}

// Initializes the PSG envelope tables
void initEnvelopeTables() {
  // Reset the sample pointer
  local *u8 samplePtr = &psgEnvelopes;

  // --- Iterate through envelopes
  local u32 env = 0;
  while (env < 16) {
    // --- Reset hold
    local bool hold = false;

    // --- Set dir according to env
    local i32 dir = env & 0x04 ? 1 : -1;

    // --- Set vol according to env
    local i32 vol = env & 0x04 ? -1 : 0x20;

    // --- Iterate through envelope positions
    local u32 pos = 0;
    while (pos < 128) {
      if (!hold) {
        vol += dir;
        if (vol < 0 | vol >= 32) {
          // -- Continue flag is set?
          if (env & 0x08) {
            // --- Yes, continue.
            // --- If alternate is set, reverse the direction
            if (env & 0x02) {
              dir = -dir;
            }

            // --- Set start volume according to direction
            vol = dir > 0 ? 0 : 31;

            // --- Hold is set?
            if (env & 0x01) {
              // --- Hold, and set up next volume
              hold = true;
              vol = dir > 0 ? 31 : 0;
            }
          } else {
            // --- Mute and hold this value
            vol = 0;
            hold = true;
          }
        }
      }

      // --- Store the envelope sample and move to the next position
      (*samplePtr) = vol;
      samplePtr += 1;
      pos += 1;
    }

    // --- Next envelope
    env += 1;
  }
}

// Reads the value of the selected PSG register
u8 readPsgRegisterValue(*psgState psgPtr) {
  return (*psgPtr).regs[psgRegisterIndex & 0x0f];
}

// Writes the value of the current PSG register
void writePsgRegisterValue(*psgState psgPtr, u8 v) {
  // --- Write the native register values
  (*psgPtr).regs[psgRegisterIndex & 0x0f] = v;

  // --- Tone A (lower 8 bits)
  if (!psgRegisterIndex ) {
    (*psgPtr).toneA = ((*psgPtr).toneA & 0x0f00) | v;
    return;
  }

  // --- Tone A (upper 4 bits)
  if (psgRegisterIndex == 1) {
    (*psgPtr).toneA = ((*psgPtr).toneA & 0x00ff) | ((v & 0x0f) << 8);
    return;
  }

  // --- Tone B (lower 8 bits)
  if (psgRegisterIndex == 2) {
    (*psgPtr).toneB = ((*psgPtr).toneB & 0x0f00) | v;
    return;
  }

  // --- Tone B (upper 4 bits)
  if (psgRegisterIndex == 3) {
    (*psgPtr).toneB = ((*psgPtr).toneB & 0x00ff) | ((v & 0x0f) << 8);
    return;
  }

  // --- Tone C (lower 8 bits)
  if (psgRegisterIndex == 4) {
    (*psgPtr).toneC = ((*psgPtr).toneC & 0x0f00) | v;
    return;
  }

  // --- Tone C (upper 4 bits)
  if (psgRegisterIndex == 5) {
    (*psgPtr).toneC = ((*psgPtr).toneC & 0x00ff) | ((v & 0x0f) << 8);
    return;
  }

  // --- Noise frequency
  if (psgRegisterIndex == 6) {
    (*psgPtr).noiseFreq = v & 0x1f;
    return;
  }

  // --- Mixer flags
  if (psgRegisterIndex == 7) {
    (*psgPtr).toneAEnabled = !(v & 0x01);
    (*psgPtr).toneBEnabled = !(v & 0x02);
    (*psgPtr).toneCEnabled = !(v & 0x04);
    (*psgPtr).noiseAEnabled = !(v & 0x08);
    (*psgPtr).noiseBEnabled = !(v & 0x10);
    (*psgPtr).noiseCEnabled = !(v & 0x20);
    return;
  }

  // --- Volume A
  if (psgRegisterIndex == 8) {
    (*psgPtr).volA = v & 0x0f;
    (*psgPtr).envA = v & 0x10;
    return;
  }

  // --- Volume B
  if (psgRegisterIndex == 9) {
    (*psgPtr).volB = v & 0x0f;
    (*psgPtr).envB = v & 0x10;
    return;
  }

  // --- Volume C
  if (psgRegisterIndex == 10) {
    (*psgPtr).volC = v & 0x0f;
    (*psgPtr).envC = v & 0x10;
    return;
  }

  // --- Envelope fequency (lower 8 bit)
  if (psgRegisterIndex == 11) {
    (*psgPtr).envFreq = ((*psgPtr).envFreq & 0xff00) | v;
    return;
  }

  // --- Envelope frequency (upper 8 bits)
  if (psgRegisterIndex == 12) {
    (*psgPtr).envFreq = ((*psgPtr).envFreq & 0x00ff) | (v << 8);
    return;
  }

  // --- Check envelope shape
  if (psgRegisterIndex == 13) {
    (*psgPtr).envStyle = v & 0x0f;
    (*psgPtr).cntEnv = 0;
    (*psgPtr).posEnv = 0;
    return;
  }
}

// Prepares samples for PSG emulation
void preparePsgSamples() {
  local u32 currentFrameTact = tacts/clockMultiplier;
  while (currentFrameTact >= psgNextClockTact) {
    generatePsgOutputValue(&psg);
    psgNextClockTact += PSG_CLOCK_STEP;
  }
}

// Generates a PSG output value
void generatePsgOutputValue(*psgState psgPtr) {
  local u32 vol = 0;
  local u32 tmp;
  local *u32 addr32;
  local *u16 addr16;
  local *u8 addr8;
  
  // --- Increment TONE A counter
  addr16 = &((*psgPtr).cntA);
  tmp = *addr16 + 1;
  *addr16 = tmp;
  if (tmp >= (*psgPtr).toneA) {
    // --- Reset counter and reverse output bit
    *addr16 = 0;
    (*psgPtr).bitA ^= 0x01;
  }

  // --- Increment TONE B counter
  addr16 = &((*psgPtr).cntB);
  tmp = *addr16 + 1;
  *addr16 = tmp;
  if (tmp >= (*psgPtr).toneB) {
    // --- Reset counter and reverse output bit
    *addr16 = 0;
    (*psgPtr).bitB ^= 0x01;
  }

  // --- Increment TONE C counter
  addr16 = &((*psgPtr).cntC);
  tmp = *addr16 + 1;
  *addr16 = tmp;
  if (tmp >= (*psgPtr).toneC) {
    // --- Reset counter and reverse output bit
    *addr16 = 0;
    (*psgPtr).bitC ^= 0x01;
  }

  // --- Calculate noise sample
  addr16 = &((*psgPtr).cntNoise);
  *addr16 += 1;
  if (*addr16 >= (*psgPtr).noiseFreq) {
    // --- It is time to generate the next noise sample
    *addr16 = 0;
    addr32 = &((*psgPtr).noiseSeed);
    (*addr32) = ((*addr32) * 2 + 1) ^ (((*addr32 >> 16) ^ (*addr32 >> 13)) & 0x01);
    (*psgPtr).bitNoise = (*addr32 >> 16) & 0x01;
  }

  // --- Calculate envelope position
  addr16 = &((*psgPtr).cntEnv);
  *addr16 += 1;
  if (*addr16 >= (*psgPtr).envFreq) {
    // --- Move to the new position
    *addr16 = 0;
    addr16 = &((*psgPtr).posEnv);
    *addr16 += 1;
    if (*addr16 > 0x7f) {
      *addr16 = 0x40;
    }
  }

  // --- Add Channel A volume value
  local u32 tmpVol;
  if (
       ((*psgPtr).bitA & (*psgPtr).toneAEnabled) |
       ((*psgPtr).bitNoise & (*psgPtr).noiseAEnabled)
  ) {
    if ((*psgPtr).envA) {
      tmpVol = psgEnvelopes[(*psgPtr).envStyle * 128 + (*psgPtr).posEnv];
    } else {
      tmpVol = (*psgPtr).volA * 2 + 1;
    }

    // --- At this point tmpVol is 0-31, let's convert it to 0-65535
    vol += psgVolumeTable[(tmpVol & 0x1f) >> 1];
  }

  // --- Add Channel B volume value
  if (
       ((*psgPtr).bitB & (*psgPtr).toneBEnabled) |
       ((*psgPtr).bitNoise & (*psgPtr).noiseBEnabled)
  ) {
    if ((*psgPtr).envB) {
      tmpVol = psgEnvelopes[(*psgPtr).envStyle * 128 + (*psgPtr).posEnv];
    } else {
      tmpVol = (*psgPtr).volB * 2 + 1;
    }

    // --- At this point tmpVol is 0-31, let's convert it to 0-65535
    vol += psgVolumeTable[(tmpVol & 0x1f) >> 1];
  }

  // --- Add Channel C volume value
  if (
       ((*psgPtr).bitC & (*psgPtr).toneCEnabled) |
       ((*psgPtr).bitNoise & (*psgPtr).noiseCEnabled)
  ) {
    if ((*psgPtr).envC) {
      tmpVol = psgEnvelopes[(*psgPtr).envStyle * 128 + (*psgPtr).posEnv];
    } else {
      tmpVol = (*psgPtr).volC * 2 + 1;
    }

    // --- At this point tmpVol is 0-31, let's convert it to 0-65535
    vol += psgVolumeTable[(tmpVol & 0x1f) >> 1];
  }

  psgOrphanSum += vol;
  psgOrphanSamples += 1;
}