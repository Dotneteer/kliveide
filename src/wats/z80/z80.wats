// ============================================================================
// Z80 CPU Core
// ============================================================================

// ----------------------------------------------------------------------------
// Memory handling for the generic Z80 machine

// 16 MB memory reserved for virtual machines
// memory address is ensured to be 0;
u8[16 * 1024 * 1024] vmMemory { VIRTUAL_MEMORY_PLACEHOLDER };

// buffer for retrieving CPU state
cpuStateStruct cpuStateBuffer { CPU_STATE_PLACEHOLDER };

// Lookup structure for a 8K memory page
type blockLookup = struct {
  u32 readIndex,  // Memory index for read
  u32 writeIndex, // Memory index for write
  u8 flags,       // Page flag (ROM, RAM, NOMEM)
  bool contended, // Contended memory block?
  u16 partition,  // Partition paged in
  u8[4] reserved  // Reserved for machine-specific use
};

// Block flag types
const u8 RAM_BLOCK = 0x00;
const u8 ROM_BLOCK = 0x01;
const u8 UNV_BLOCK = 0xff;

// Memory page lookup table for 64K memory addressing
blockLookup[8] blockLookupTable;

// ----------------------------------------------------------------------------
// Z80 CPU state

u8 REGISTER_AREA_PLACEHOLDER;

// Primary registers
u8 f { REGISTER_AREA_PLACEHOLDER };
u8 a;
u16 af {f};
u8 c;
u8 b;
u16 bc {c};
u8 e;
u8 d;
u16 de {e};
u8 l;
u8 h;
u16 hl {l};

// Alternate registers
u16 af_;
u16 bc_;
u16 de_;
u16 hl_;

// PC & SP
u16 pc;
u16 sp;

// Additional registers
u8 r;
u8 i;
u16 ir {r};
u8 xl;
u8 xh;
u16 ix {xl};
u8 yl;
u8 yh;
u16 iy {yl};
u8 wl;
u8 wh;
u16 wz {wl};

// Number of tacts within one screen rendering frame. This value indicates the
// number of clock cycles with normal CPU speed.
global u32 tactsInFrame;

// CPU tacts since starting the last screen rendering frame. So this variable is reset
// at the beginning of each screen rendering frame.
global u32 tacts;

// Interrupt flip-flop #1
global bool iff1;

// Interrupt flip-flop #2
global bool iff2;

// Current interrupt mode
global u8 interruptMode;

// The last opCode read
global u8 opCode;

// Depth of consequtive DD/FD prefixes
global u32 ddfdDepth;

// Shows that IX is to be used when executing an indexed operation
global bool useIx;

// Keeps track of update status of Bit 5 and 3 of F
global bool f53Updated;
global bool prevf53Updated;


// Various Z80 state flags
global u32 cpuSignalFlags;
const u32 SIG_NON = 0x00;
const u32 SIG_INT = 0x01;
const u32 SIG_NMI = 0x02;
const u32 SIG_RST = 0x04;
const u32 SIG_HLT = 0x08;
const u32 SIG_INT_MASK = 0xfe;
const u32 SIG_HLT_MASK = 0xf7;

// Is the CPU snoozed?
global bool cpuSnoozed;

// Indicates if a RET instruction has been executed
global bool retExecuted;

// The number of instructions to process before interrupt is enabled again
global i32 intBacklog;

// Base CPU clock frequency
global u32 baseClockFrequency;

// Clock frequency multiplier
global u32 clockMultiplier = 1;

// Default clock frequency multiplier
global u32 defaultClockMultiplier = 1;

// ----------------------------------------------------------------------------
// Z80 flag constants
const i32 FLAG_S = 0x80;
const i32 FLAG_Z = 0x40;
const i32 FLAG_5 = 0x20;
const i32 FLAG_H = 0x10;
const i32 FLAG_3 = 0x08;
const i32 FLAG_PV = 0x04;
const i32 FLAG_N = 0x02;
const i32 FLAG_C = 0x01;
const i32 FLAG_53 = FLAG_3 | FLAG_5;
const i32 FLAG_SZP = FLAG_S | FLAG_Z | FLAG_PV;
const i32 FLAG_53C = FLAG_53 | FLAG_C;

// ----------------------------------------------------------------------------
// Memory buffer for CPU state

type cpuStateStruct = struct {
  u32 tactsInFrame,
  u32 tacts,
  bool iff1,
  bool iff2,
  u8 interruptMode,
  u8 opCode,
  u32 ddfdDepth,
  bool useIx,
  u32 cpuSignalFlags,
  bool cpuSnoozed,
  i32 intBacklog,
  bool retExecuted,
  u32 baseClockFrequency,
  u32 clockMultiplier,
  u32 defaultClockMultiplier
};

// ----------------------------------------------------------------------------
// Public Z80 core methods

// Puts the global variables that represent CPU state into a transfer buffer
export void getCpuState() {
  cpuStateBuffer.tactsInFrame = tactsInFrame;
  cpuStateBuffer.tacts = tacts;
  cpuStateBuffer.iff1 = iff1;
  cpuStateBuffer.iff2 = iff2;
  cpuStateBuffer.interruptMode = interruptMode;
  cpuStateBuffer.opCode = opCode;
  cpuStateBuffer.ddfdDepth = ddfdDepth;
  cpuStateBuffer.useIx = useIx;
  cpuStateBuffer.cpuSignalFlags = cpuSignalFlags;
  cpuStateBuffer.cpuSnoozed = cpuSnoozed;
  cpuStateBuffer.intBacklog = intBacklog;
  cpuStateBuffer.retExecuted = retExecuted;
  cpuStateBuffer.baseClockFrequency = baseClockFrequency;
  cpuStateBuffer.clockMultiplier = clockMultiplier;
  cpuStateBuffer.defaultClockMultiplier = defaultClockMultiplier;
}

// Updates the CPU state according to the state transfer buffer
export void updateCpuState() {
  tactsInFrame = cpuStateBuffer.tactsInFrame;
  tacts = cpuStateBuffer.tacts;
  iff1 = cpuStateBuffer.iff1;
  iff2 = cpuStateBuffer.iff2;
  interruptMode = cpuStateBuffer.interruptMode;
  opCode = cpuStateBuffer.opCode;
  ddfdDepth = cpuStateBuffer.ddfdDepth;
  useIx = cpuStateBuffer.useIx;
  cpuSignalFlags = cpuStateBuffer.cpuSignalFlags;
  cpuSnoozed = cpuStateBuffer.cpuSnoozed;
  intBacklog = cpuStateBuffer.intBacklog;
  retExecuted = cpuStateBuffer.retExecuted;
}

// Turn on the CPU
export void turnOnCpu() {
  resetCpu(true);
}

// Resets the CPU
// hard: Is it hard reset?
export void resetCpu(bool hard) {
  af = 0xffff;
  af_ = 0xffff;
  i = 0;
  r = 0;
  pc = 0x0000;
  sp = 0xffff;
  iff1 = false;
  iff2 = false;
  interruptMode = 0;
  if (hard) {
    bc = 0;
    de = 0;
    hl = 0;
    bc_ = 0;
    de_ = 0;
    hl_ = 0;
    ix = 0;
    iy = 0;
    wz = 0;
  }
  tacts = 0;
  cpuSignalFlags = SIG_NON;
  cpuSnoozed = false;
  intBacklog = 2;
}

// Sets the Program Counter
export void setPC(u16 value) {
  pc = value;
}

// Sets the Stack Pointer
export void setSP(u16 value) {
  sp = value;
}

// Sets the CPU state to snoozed
void snoozeCpu() {
  cpuSnoozed = true;
}

// Awakes the CPU
void awakeCpu() {
  cpuSnoozed = false;
}

// Sets the default clock multiplier
export void setClockMultiplier(u32 multiplier) {
  defaultClockMultiplier = multiplier & 0x1f;
}

// ----------------------------------------------------------------------------
// Execution cycle

// Executes a single instruction cycle
export void executeCpuCycle() {
  // --- Just started to process instructions
  ddfdDepth = 0;
  retExecuted = 0;

  // --- Handle the interrupt backlog
  if (intBacklog > 0) {
    intBacklog -= 1;
  }

  if (cpuSignalFlags) {
    // Handle NMI, as it has priority over INT
    if (cpuSignalFlags & SIG_NMI) {
      executeNmi();
      return;
    }

    // Handle INT
    if (cpuSignalFlags & SIG_INT) {
      if (iff1) {
        if (!intBacklog) {
          executeInt();
          return;
        }
      }
    }

    // Handle HLT
    if (cpuSignalFlags & SIG_HLT) {
      executeHalt();
      return;
    }

    // Handle reset
    if (cpuSignalFlags & SIG_RST) {
      resetCpu(false);
      return;
    }
  }

  // Read the opCode from PC and refresh memory
  opCode = readMemory(pc);

  // Handle F3 and F5 status of F
  prevf53Updated = f53Updated;
  f53Updated = false;

  // Close M1 cycle
  refreshMemory();
  pc += 1;
  tacts += 1;

  // --- Execute the operation
  standardOps()[opCode];
}

// Responds to the INT signal
void executeInt() {
  // --- Interrupt awakes the CPU
  awakeCpu();

  // --- Save the current PC value
  local u16 oldPc = pc;

  // --- Remove CPU from the halted state
  if (cpuSignalFlags & SIG_HLT) {
    pc += 1;
    cpuSignalFlags &= SIG_HLT_MASK;
  }

  // --- Reset the interrupt flags
  iff1 = false;
  iff2 = false;
  prevf53Updated = false;

  // --- Push the return address to the stack
  tacts += 7;
  sp -= 1;
  writeMemory(sp, pc >> 8);
  sp -= 1;
  writeMemory(sp, pc);
  refreshMemory();

  // --- Go on according to the interrupt mode
  if (interruptMode == 2) {
    // --- IM 2
    // Let's assume, the device retrieves 0xff (the least significant bit is ignored)
    // *** According to the official Zilog documentation the next line should be:
    // *** local u16 addr = (i << 8) | 0xfe;
    // *** However, this article shows that we need to do it differently:
    // *** http://www.z80.info/interrup2.htm
    local u16 addr = (i << 8) | 0xff;
    wz = readMemory(addr) + (readMemory(addr + 1) << 8);
  } else {
    // --- IM 0 or IM 1
    wz = 0x0038;
  }
  pc = wz;
  pushToStepOver(oldPc);
}

// Responds to the NMI signal
void executeNmi() {
  // --- Interrupt awakes the CPU
  awakeCpu();

  // --- Remove CPU from the halted state
  if (cpuSignalFlags & SIG_HLT) {
    pc += 1;
    cpuSignalFlags &= SIG_HLT_MASK;
  }

  // --- Update the interrupt flip-flops
  iff2 = iff1;
  iff1 = false;
  prevf53Updated = false;

  // --- Push the return address to the stack
  tacts += 1;
  sp -= 1;
  writeMemory(sp, pc >> 8);
  sp -= 1;
  writeMemory(sp, pc);

  // --- Jump to the NMI routine
  pc = 0x0066;
}

// Responds to the HLT signal
void executeHalt() {
  refreshMemory();
  tacts += 4;
}

// ----------------------------------------------------------------------------
// Generic memory handler

// Sets an entry in blockLookupTable
// block: Block index
// bankOffset: Offset in the 16MB virtual memory
// contended: Is that block contended?
// readonly: Is that block read-only?
void setMemoryBlockEntry(
  u32 block, 
  u32 bankOffset, 
  bool contended, 
  bool readonly) {

  local *blockLookup ptr = &(blockLookupTable[block & 0x07]);
  (*ptr).readIndex = bankOffset;
  (*ptr).writeIndex = bankOffset;
  (*ptr).flags = readonly;
  (*ptr).contended = contended;
}

// Sets an entry in blockLookupTable
// block: Block index
// bankOffset: Offset in the 16MB virtual memory
// contended: Is that block contended?
// readonly: Is that block read-only?
// partition: partition information
void setMemoryBlockEntryWithPartition(
  u32 block, 
  u32 bankOffset,
  u16 partition,
  bool contended, 
  bool readonly) {

  local *blockLookup ptr = &(blockLookupTable[block & 0x07]);
  (*ptr).readIndex = bankOffset;
  (*ptr).writeIndex = bankOffset;
  (*ptr).flags = readonly;
  (*ptr).contended = contended;
  (*ptr).partition = partition;
}

// ----------------------------------------------------------------------------
// Helpers

// Emulates memory refresh
inline void refreshMemory() {
  r = (r + 1) & 0x7f | (r & 0x80);
}

// Load the code that implements the Z80 instructions
#include "aluhelpers.wats"
#include "standard-ops.wats"
#include "bit-ops.wats"
#include "extended-ops.wats"
#include "indexed-ops.wats"
#include "indexed-bit-ops.wats"
#include "debug-helpers.wats"
