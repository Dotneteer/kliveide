// ===========================================================================
// Data tables and helper routines for 8-bit and 16-bit ALU operations

// Add operation overflow flags
data u8 overflowAddFlags [ 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00 ];

// Sub operation overflow flags
data u8 overflowSubFlags [ 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00 ];

// Add operation half-carry flags
data u8 halfCarryAddFlags [ 0x00, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x10 ];

// Sub operation half-carry flags
data u8 halfCarrySubFlags [ 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x10 ];

// Combines the S, Z, 5, and 3 flags for a specific value of register A 
data u8 sz53Table [
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
  0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
  0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
  0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
  0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
  0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
  0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 
  0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 
  0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
  0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
  0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 
  0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 
  0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8
];

// Combines the S, Z, 5, PV, and 3 flags for a specific value of register A 
data sz53pTable [
  0x44, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x08, 0x0c, 0x0c, 0x08, 0x0c, 0x08, 0x08, 0x0c, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x0c, 0x08, 0x08, 0x0c, 0x08, 0x0c, 0x0c, 0x08, 
  0x20, 0x24, 0x24, 0x20, 0x24, 0x20, 0x20, 0x24, 
  0x2c, 0x28, 0x28, 0x2c, 0x28, 0x2c, 0x2c, 0x28, 
  0x24, 0x20, 0x20, 0x24, 0x20, 0x24, 0x24, 0x20, 
  0x28, 0x2c, 0x2c, 0x28, 0x2c, 0x28, 0x28, 0x2c, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x0c, 0x08, 0x08, 0x0c, 0x08, 0x0c, 0x0c, 0x08, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x08, 0x0c, 0x0c, 0x08, 0x0c, 0x08, 0x08, 0x0c, 
  0x24, 0x20, 0x20, 0x24, 0x20, 0x24, 0x24, 0x20, 
  0x28, 0x2c, 0x2c, 0x28, 0x2c, 0x28, 0x28, 0x2c, 
  0x20, 0x24, 0x24, 0x20, 0x24, 0x20, 0x20, 0x24, 
  0x2c, 0x28, 0x28, 0x2c, 0x28, 0x2c, 0x2c, 0x28, 
  0x80, 0x84, 0x84, 0x80, 0x84, 0x80, 0x80, 0x84, 
  0x8c, 0x88, 0x88, 0x8c, 0x88, 0x8c, 0x8c, 0x88, 
  0x84, 0x80, 0x80, 0x84, 0x80, 0x84, 0x84, 0x80, 
  0x88, 0x8c, 0x8c, 0x88, 0x8c, 0x88, 0x88, 0x8c, 
  0xa4, 0xa0, 0xa0, 0xa4, 0xa0, 0xa4, 0xa4, 0xa0, 
  0xa8, 0xac, 0xac, 0xa8, 0xac, 0xa8, 0xa8, 0xac, 
  0xa0, 0xa4, 0xa4, 0xa0, 0xa4, 0xa0, 0xa0, 0xa4, 
  0xac, 0xa8, 0xa8, 0xac, 0xa8, 0xac, 0xac, 0xa8, 
  0x84, 0x80, 0x80, 0x84, 0x80, 0x84, 0x84, 0x80, 
  0x88, 0x8c, 0x8c, 0x88, 0x8c, 0x88, 0x88, 0x8c, 
  0x80, 0x84, 0x84, 0x80, 0x84, 0x80, 0x80, 0x84, 
  0x8c, 0x88, 0x88, 0x8c, 0x88, 0x8c, 0x8c, 0x88, 
  0xa0, 0xa4, 0xa4, 0xa0, 0xa4, 0xa0, 0xa0, 0xa4, 
  0xac, 0xa8, 0xa8, 0xac, 0xa8, 0xac, 0xac, 0xa8, 
  0xa4, 0xa0, 0xa0, 0xa4, 0xa0, 0xa4, 0xa4, 0xa0, 
  0xa8, 0xac, 0xac, 0xa8, 0xac, 0xa8, 0xa8, 0xac
];

// Flag values after 8-bit increment
data u8 incFlags [ 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x30, 
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x28, 
  0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x30, 
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x28, 
  0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x10, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x10, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x30, 
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x28, 
  0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x30, 
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x28, 
  0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x94, 
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x88, 
  0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x90, 
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x88, 
  0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0xb0, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa8, 
  0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xb0, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa8, 
  0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x90, 
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x88, 
  0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x90, 
  0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x88, 
  0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0xb0, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa8, 
  0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xb0, 
  0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa8, 
  0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x50
];

// Flag values after 8-bit decrement
data u8 decFlags [ 
  0xba, 0x42, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
  0x02, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 
  0x1a, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
  0x02, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 
  0x1a, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
  0x22, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 
  0x3a, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
  0x22, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 
  0x3a, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
  0x02, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 
  0x1a, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
  0x02, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 
  0x1a, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
  0x22, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 
  0x3a, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 
  0x22, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 
  0x3e, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 
  0x82, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 
  0x9a, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 
  0x82, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 
  0x9a, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 
  0xa2, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xba, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 
  0xa2, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xba, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 
  0x82, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 
  0x9a, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 
  0x82, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 
  0x9a, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 
  0xa2, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 
  0xba, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 
  0xa2, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
];

// Table with the parity flag of a specific value of Register A
data u8 parityTable [
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x00, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00, 0x04, 
  0x04, 0x00, 0x00, 0x04, 0x00, 0x04, 0x04, 0x00
];

// Adjusts flags after an 8-bit increment operation
inline void adjustIncFlags(u8 value) {
  f = (f & 0x01) | incFlags[value];
}

// Adjusts flags after an 8-bit decrement operation
inline void adjustDecFlags(u8 value) {
  f = (f & 0x01) | decFlags[value];
}

// Adds two 16-bit value and sets F accordingly
inline u16 add16(u16 v1, u16 v2) {
  local u32 tmpVal = v1  + v2;
  local u32 lookup = 
    ((v1 & 0x0800) >> 11) | 
    ((v2 & 0x0800) >> 10) | 
    ((tmpVal & 0x0800) >> 9);
  wz = v1 + 1;
  f = 
    (f & 0xc4) | 
    (tmpVal & 0x10000 ? FLAG_C : 0x00) | 
    ((tmpVal >> 8) & 0x28) | 
    halfCarryAddFlags[lookup];
  return tmpVal;
}

// Adds two 16-bit value and sets F accordingly
inline void adc16(u16 v2) {
  local u32 tmpVal = hl + v2 + (f & FLAG_C);
  local u32 lookup = 
    ((hl & 0x0800) >> 11) | 
    ((v2 & 0x0800) >> 10) | 
    ((tmpVal & 0x0800) >> 9);
  wz = hl + 1;
  hl = tmpVal;
  f = 
    (tmpVal & 0x10000 ? FLAG_C : 0) |
    overflowAddFlags[lookup >> 4] |
    (h & (FLAG_53 | FLAG_S)) |
    halfCarryAddFlags[lookup & 0x07] |
    (hl ? 0 : FLAG_Z);
}

// Subtracts two 16-bit value and sets F accordingly
inline void sbc16(u16 v2) {
  local u32 tmpVal = hl - v2 - (f & FLAG_C);
  local u32 lookup = 
    ((hl & 0x0800) >> 11) | 
    ((v2 & 0x0800) >> 10) | 
    ((tmpVal & 0x0800) >> 9);
  wz = hl + 1;
  hl = tmpVal;
  f = 
    (tmpVal & 0x10000 ? FLAG_C : 0) |
    FLAG_N | 
    overflowSubFlags[lookup >> 4] |
    (h & (FLAG_53 | FLAG_S)) |
    halfCarrySubFlags[lookup & 0x07] |
    (hl ? 0 : FLAG_Z);
}

// The core of the 8-bit ADD operation
inline void add8(u8 value) {
  local u32 tmp = a + value;
  local u32 lookup = 
    ((a & 0x88) >> 3) |
		((value & 0x88) >> 2) |
		((tmp & 0x88) >> 1);
  a = tmp;
  f =
    (tmp & 0x100 ? FLAG_C : 0) |
    halfCarryAddFlags[lookup & 0x07] | 
    overflowAddFlags[lookup >> 4] |
    sz53Table[a];
}

// The core of the 8-bit ADC operation
inline void adc8(u8 value) {
  local u32 tmp = a + value + (f & FLAG_C);
  local u32 lookup = 
    ((a & 0x88) >> 3) |
		((value & 0x88) >> 2) |
		((tmp & 0x88) >> 1);
  a = tmp;
  f =
    (tmp & 0x100 ? FLAG_C : 0) |
    halfCarryAddFlags[lookup & 0x07] | 
    overflowAddFlags[lookup >> 4] |
    sz53Table[a];
}

// The core of the 8-bit SUB operation
inline void sub8(u8 value) {
  local u32 tmp = a - value;
  local u32 lookup = 
    ((a & 0x88) >> 3) | 
    ((value & 0x88) >> 2) | 
    ((tmp & 0x88) >> 1);
  a = tmp;
  f = 
    (tmp & 0x100 ? FLAG_C : 0) | FLAG_N | 
    halfCarrySubFlags[lookup & 0x07] | 
    overflowSubFlags[lookup >> 4] | 
    sz53Table[a];
}

// The core of the 8-bit SBC operation
inline void sbc8(u8 value) {
  local u32 tmp = a - value - (f & FLAG_C);
  local u32 lookup = 
    ((a & 0x88) >> 3) | 
    ((value & 0x88) >> 2) | 
    ((tmp & 0x88) >> 1);
  a = tmp;
  f = 
    (tmp & 0x100 ? FLAG_C : 0) | FLAG_N | 
    halfCarrySubFlags[lookup & 0x07] | 
    overflowSubFlags[lookup >> 4] | 
    sz53Table[a];
}

// The core of the 8-bit AND operation
inline void and8(u8 value) {
  a &= value;
  f = FLAG_H | sz53pTable[a];
}

// The core of the 8-bit XOR operation
inline void xor8(u8 value) {
  a ^= value;
  f = sz53pTable[a];
}

// The core of the 8-bit OR operation
inline void or8(u8 value) {
  a |= value;
  f = sz53pTable[a];
}

// The core of the 8-bit CP operation
inline void cp8(u8 value) {
  local u32 tmp = a - value;
  local u32 lookup = 
    ((a & 0x88) >> 3) | 
    ((value & 0x88) >> 2) | 
    ((tmp & 0x88) >> 1);
  f = 
    (tmp & 0x100 ? FLAG_C : 0) | 
    (tmp ? 0 : FLAG_Z) | 
    FLAG_N | 
    halfCarrySubFlags[lookup & 0x07] | 
    overflowSubFlags[lookup >> 4] | 
    (value & FLAG_53) |
    (tmp & FLAG_S);
}

// The core of the 8-bit RLC operation
inline u8 rlc8(u8 oper) {
  local u8 tmp = (oper << 1) | (oper >> 7);
  f = (tmp & FLAG_C) | sz53pTable[tmp];
  return tmp;
}

// The core of the 8-bit RRC operation
inline u8 rrc8(u8 oper) {
  f = oper & FLAG_C;
  local u8 tmp = (oper >>1) | (oper << 7);
  f |= sz53pTable[tmp];
  return tmp;
}

// The core of the 8-bit RL operation
inline u8 rl8(u8 oper) {
  local u8 tmp = (oper << 1) | (f & FLAG_C);
  f = (oper >> 7) | sz53pTable[tmp];
  return tmp;
}

// The core of the 8-bit RR operation
inline u8 rr8(u8 oper) {
  local u8 tmp = (oper >> 1) | (f << 7);
  f = (oper & FLAG_C) | sz53pTable[tmp];
  return tmp;
}

// The core of the 8-bit SLA operation
inline u8 sla8(u8 oper) {
  f = oper >> 7;
  local u8 tmp = oper << 1;
  f |= sz53pTable[tmp];
  return tmp;
}

// The core of the 8-bit SRA operation
inline u8 sra8(u8 oper) {
  f = oper & FLAG_C;
  local u8 tmp = (oper & 0x80) | (oper >> 1);
  f |= sz53pTable[tmp];
  return tmp;
}

// The core of the 8-bit SLL operation
inline u8 sll8(u8 oper) {
  f = oper >> 7;
  local u8 tmp = (oper << 1) | 0x01;
  f |= sz53pTable[tmp];
  return tmp;
}

// The core of the 8-bit SRL operation
inline u8 srl8(u8 oper) {
  f = oper & FLAG_C;
  local u8 tmp = oper >> 1;
  f |= sz53pTable[tmp];
  return tmp;
}

// The core of the 8-bit BIT operation
inline void bit8(u8 bit, u8 oper) {
  f = (f & FLAG_C) | FLAG_H | (oper & FLAG_53);
  local u32 bitVal = oper & (0x01 << bit);
  if(!bitVal) {
    f |= FLAG_PV | FLAG_Z;
  }
  f |= bitVal & 0x80;
}

// The core of the 8-bit BIT operation with WZ
inline void bit8W(u8 bit, u8 oper) {
  f = (f & FLAG_C) | FLAG_H | (wh & FLAG_53);
  local u32 bitVal = oper & (0x01 << bit);
  if(!bitVal) {
    f |= FLAG_PV | FLAG_Z;
  }
  f |= bitVal & 0x80;
}
